/*! Â© 2022 imaoki | MIT License | https://github.com/imaoki */;(local hasMetRequirements;fn hasMetRequirements = (isStruct ::std and isProperty ::std #StructName and classOf ::std.StructName == MAXScriptFunction and ::std.StructName() == #StandardStruct;);if not hasMetRequirements() do (local fileClass = DotNetClass "System.IO.File";local pathClass = DotNetClass "System.IO.Path";local currentDir = pathClass.GetDirectoryName (getSourceFileName());local standardFile = currentDir + @"\Standard.min.ms";if fileClass.Exists standardFile do fileIn standardFile;);if not hasMetRequirements() do (format "[error]Requirement not met.\n";););global flexUIDefinitionPool = Dictionary #String;::flexUIDefinitionPool[@"Model\Layout\FlexBoxCell.ms"] = struct FlexBoxCellStruct (public _CP1_,public _CP2_ = 1,public _CP3_ = 1,public _CP4_,private fixedLength,private item,private minimum = 1,private stretch = 1,public fn GetFixedLength = (this.fixedLength;),public fn GetItem = (this.item;),public fn GetMinimum = (this.minimum;),public fn GetStretch = (this.stretch;),public fn GetType = (this.typeOf this.item;),public fn SetFixedLength input = (if classOf input == UndefinedClass then (this.fixedLength = input;this.StateChanged.Notify #FixedLength this.fixedLength;);else (if superClassOf input == Number do (input = input as Integer;if input < 1 do input = 1;this.fixedLength = input;this.StateChanged.Notify #FixedLength this.fixedLength;););this.GetFixedLength();),public fn SetItem obj = (local itemType = this.typeOf obj;if classOf itemType == Name do (this.item = obj;this.StateChanged.Notify #Item this.item;);this.GetItem();),public fn SetMinimum input = (if superClassOf input == Number do (input = input as Integer;if input < 1 do input = 1;this.minimum = input;this.StateChanged.Notify #Minimum this.minimum;);this.GetMinimum();),public fn SetStretch input = (if superClassOf input == Number do (input = input as Integer;if input < 1 do input = 1;this.stretch = input;this.StateChanged.Notify #Stretch this.stretch;);this.GetStretch();),private fn isMatchStructName obj pattern = (isProperty obj #StructName and classOf obj.StructName == MAXScriptFunction and matchPattern (obj.StructName() as String) pattern:pattern;),private fn isValidLayout obj = (isStruct obj and this.isMatchStructName obj "Flex*LayoutStruct";),private fn isValidSpace obj = (classOf obj == Integer and obj > 0;),private fn isValidStretch obj = (classOf obj == Integer and obj == -1;),private fn isValidWidget obj = (isStruct obj and this.isMatchStructName obj "Flex*WidgetStruct";),private fn typeOf obj = (case of ((this.isValidLayout obj): #Layout;(this.isValidSpace obj): #Space;(this.isValidStretch obj): #Stretch;(this.isValidWidget obj): #Widget;default: undefined;);),public fn StructName = #FlexBoxCellStruct,public fn Dump indent:"" out:listener = (format "%FlexBoxCellStruct\n" indent to:out;format "%  type:%\n" indent (this.GetType()) to:out;format "%  fixedLength:%\n" indent this.fixedLength to:out;format "%  minimum:%\n" indent this.minimum to:out;format "%  stretch:%\n" indent this.stretch to:out;if this.isValidLayout this.item or this.isValidWidget this.item then (format "%  item:\n" indent to:out;this.item.Dump indent:(indent + "    ") out:out;);else (format "%  item:%\n" indent this.item to:out;);ok;),public fn Equals obj = (local isEqualStructName = isStruct obj and isProperty obj #StructName and classOf obj.StructName == MAXScriptFunction and obj.StructName() == this.StructName();local isEqualProperties = true and isProperty obj #GetFixedLength and classOf obj.GetFixedLength == MAXScriptFunction and obj.GetFixedLength() == this.GetFixedLength() and isProperty obj #GetItem and classOf obj.GetItem == MAXScriptFunction and isProperty obj #GetMinimum and classOf obj.GetMinimum == MAXScriptFunction and obj.GetMinimum() == this.GetMinimum() and isProperty obj #GetStretch and classOf obj.GetStretch == MAXScriptFunction and obj.GetStretch() == this.GetStretch() and isProperty obj #GetType and classOf obj.GetType == MAXScriptFunction and obj.GetType() == this.GetType();if isEqualProperties do (local ov = obj.GetItem();local tv = this.GetItem();if (this.isValidLayout ov or this.isValidWidget ov) and (this.isValidLayout tv or this.isValidWidget tv) then (isEqualProperties = tv.Equals ov;);else (isEqualProperties = ov == tv;););isEqualStructName and isEqualProperties;),public StateChanged,on Create do (this.StateChanged = ::std.ObservableStruct();this.SetItem this._CP1_;this.SetStretch this._CP2_;this.SetMinimum this._CP3_;this.SetFixedLength this._CP4_;););::flexUIDefinitionPool[@"Model\Layout\FlexGridCell.ms"] = struct FlexGridCellStruct (public _CP1_,public _CP2_ = 1,public _CP3_ = 1,public _CP4_ = 1,public _CP5_ = 1,private column = 1,private columnSpan = 1,private item,private row = 1,private rowSpan = 1,public fn GetColumn = (this.column;),public fn GetColumnSpan = (this.columnSpan;),public fn GetItem = (this.item;),public fn GetRow = (this.row;),public fn GetRowSpan = (this.rowSpan;),public fn GetType = (this.typeOf this.item;),public fn SetColumn input = (if superClassOf input == Number do (input = input as Integer;if input < 1 do input = 1;this.column = input;this.StateChanged.Notify #Column this.column;);this.GetColumn();),public fn SetColumnSpan input = (if superClassOf input == Number do (input = input as Integer;if input < 1 do input = 1;this.columnSpan = input;this.StateChanged.Notify #ColumnSpan this.columnSpan;);this.GetColumnSpan();),public fn SetItem obj = (local itemType = this.typeOf obj;if classOf itemType == Name do (this.item = obj;this.StateChanged.Notify #Item this.item;);this.GetItem();),public fn SetRow input = (if superClassOf input == Number do (input = input as Integer;if input < 1 do input = 1;this.row = input;this.StateChanged.Notify #Row this.row;);this.GetRow();),public fn SetRowSpan input = (if superClassOf input == Number do (input = input as Integer;if input < 1 do input = 1;this.rowSpan = input;this.StateChanged.Notify #RowSpan this.rowSpan;);this.GetRowSpan();),private fn isMatchStructName obj pattern = (isProperty obj #StructName and classOf obj.StructName == MAXScriptFunction and matchPattern (obj.StructName() as String) pattern:pattern;),private fn isValidLayout obj = (isStruct obj and this.isMatchStructName obj "Flex*LayoutStruct";),private fn isValidWidget obj = (isStruct obj and this.isMatchStructName obj "Flex*WidgetStruct";),private fn typeOf obj = (case of ((this.isValidLayout obj): #Layout;(this.isValidWidget obj): #Widget;default: undefined;);),public fn StructName = #FlexGridCellStruct,public fn Dump indent:"" out:listener = (format "%FlexGridCellStruct\n" indent to:out;format "%  type:%\n" indent (this.GetType()) to:out;format "%  column:%\n" indent this.column to:out;format "%  columnSpan:%\n" indent this.columnSpan to:out;format "%  row:%\n" indent this.row to:out;format "%  rowSpan:%\n" indent this.rowSpan to:out;if this.isValidLayout this.item or this.isValidWidget this.item then (format "%  item:\n" indent to:out;this.item.Dump indent:(indent + "    ") out:out;);else (format "%  item:%\n" indent this.item to:out;);ok;),public fn Equals obj = (local isEqualStructName = isStruct obj and isProperty obj #StructName and classOf obj.StructName == MAXScriptFunction and obj.StructName() == this.StructName();local isEqualProperties = true and isProperty obj #GetColumn and classOf obj.GetColumn == MAXScriptFunction and obj.GetColumn() == this.GetColumn() and isProperty obj #GetColumnSpan and classOf obj.GetColumnSpan == MAXScriptFunction and obj.GetColumnSpan() == this.GetColumnSpan() and isProperty obj #GetItem and classOf obj.GetItem == MAXScriptFunction and isProperty obj #GetRow and classOf obj.GetRow == MAXScriptFunction and obj.GetRow() == this.GetRow() and isProperty obj #GetRowSpan and classOf obj.GetRowSpan == MAXScriptFunction and obj.GetRowSpan() == this.GetRowSpan() and isProperty obj #GetType and classOf obj.GetType == MAXScriptFunction and obj.GetType() == this.GetType();if isEqualProperties do (local ov = obj.GetItem();local tv = this.GetItem();if (this.isValidLayout ov or this.isValidWidget ov) and (this.isValidLayout tv or this.isValidWidget tv) then (isEqualProperties = tv.Equals ov;);else (isEqualProperties = ov == tv;););isEqualStructName and isEqualProperties;),public StateChanged,on Create do (this.StateChanged = ::std.ObservableStruct();this.SetItem this._CP1_;this.SetRow this._CP2_;this.SetColumn this._CP3_;this.SetRowSpan this._CP4_;this.SetColumnSpan this._CP5_;););::flexUIDefinitionPool[@"Model\Layout\FlexLayoutOptions.ms"] = struct FlexLayoutOptionsStruct (public _CP1_ = 0,public _CP2_ = 0,public _CP3_ = 0,public _CP4_ = 0,public _CP5_ = 0,public _CP6_ = 0,private marginH = 0,private marginV = 0,private paddingB = 0,private paddingL = 0,private paddingR = 0,private paddingT = 0,public fn GetMarginH = (this.marginH;),public fn GetMarginV = (this.marginV;),public fn GetPaddingB = (this.paddingB;),public fn GetPaddingL = (this.paddingL;),public fn GetPaddingR = (this.paddingR;),public fn GetPaddingT = (this.paddingT;),public fn SetMargin inputH inputV = (#(this.SetMarginH inputH,this.SetMarginV inputV;);),public fn SetMarginH input = (if superClassOf input == Number do (input = input as Integer;if input < 0 do input = 0;this.marginH = input;this.StateChanged.Notify #MarginH this.marginH;);this.GetMarginH();),public fn SetMarginV input = (if superClassOf input == Number do (input = input as Integer;if input < 0 do input = 0;this.marginV = input;this.StateChanged.Notify #MarginV this.marginV;);this.GetMarginV();),public fn SetPadding inputT inputR inputB inputL = (#(this.SetPaddingT inputT,this.SetPaddingR inputR,this.SetPaddingB inputB,this.SetPaddingL inputL;);),public fn SetPaddingB input = (if superClassOf input == Number do (input = input as Integer;if input < 0 do input = 0;this.paddingB = input;this.StateChanged.Notify #PaddingB this.paddingB;);this.GetPaddingB();),public fn SetPaddingL input = (if superClassOf input == Number do (input = input as Integer;if input < 0 do input = 0;this.paddingL = input;this.StateChanged.Notify #PaddingL this.paddingL;);this.GetPaddingL();),public fn SetPaddingR input = (if superClassOf input == Number do (input = input as Integer;if input < 0 do input = 0;this.paddingR = input;this.StateChanged.Notify #PaddingR this.paddingR;);this.GetPaddingR();),public fn SetPaddingT input = (if superClassOf input == Number do (input = input as Integer;if input < 0 do input = 0;this.paddingT = input;this.StateChanged.Notify #PaddingT this.paddingT;);this.GetPaddingT();),public fn StructName = #FlexLayoutOptionsStruct,public fn Dump indent:"" out:listener = (format "%FlexLayoutOptionsStruct\n" indent to:out;format "%  marginH:%\n" indent this.marginH to:out;format "%  marginV:%\n" indent this.marginV to:out;format "%  paddingB:%\n" indent this.paddingB to:out;format "%  paddingL:%\n" indent this.paddingL to:out;format "%  paddingR:%\n" indent this.paddingR to:out;format "%  paddingT:%\n" indent this.paddingT to:out;ok;),public fn Equals obj = (local isEqualStructName = isStruct obj and isProperty obj #StructName and classOf obj.StructName == MAXScriptFunction and obj.StructName() == this.StructName();local isEqualProperties = true;isEqualStructName and isEqualProperties;),public StateChanged,on Create do (this.StateChanged = ::std.ObservableStruct();this.SetMargin this._CP1_ this._CP2_;this.SetPadding this._CP3_ this._CP4_ this._CP5_ this._CP6_;););::flexUIDefinitionPool[@"Model\Layout\FlexGroupLayout.ms"] = struct FlexGroupLayoutStruct (public _CP1_,private cell,private groupBoxWidget,private boxCellDef,private paddingB = 5,private paddingL = 5,private paddingR = 5,private paddingT = 15,public fn GetCell = (this.cell;),public fn GetGroupBoxWidget = (this.groupBoxWidget;),public fn GetVisibility = (local visibility = unsupplied;if this.isValidGroupBoxControlWidget this.groupBoxWidget do (visibility = this.groupBoxWidget.GetVisibility(););if this.isValidBoxCell this.cell do (local cellItem = this.cell.GetItem();local cellType = this.cell.GetType();if (cellType == #Layout or cellType == #Widget) and isProperty cellItem #GetVisibility and classOf cellItem.GetVisibility == MAXScriptFunction do (local isVisible = cellItem.GetVisibility();if visibility == unsupplied do (visibility = isVisible;);if classOf visibility != UndefinedClass do (if isVisible != visibility do (visibility = undefined;););););if visibility == unsupplied do (visibility = undefined;);visibility;),public fn SetCell obj = (local boxCell = this.boxCellDef obj;local boxCellType = boxCell.GetType();if boxCellType == #Layout or boxCellType == #Widget do (this.cell = boxCell;this.StateChanged.Notify #CellSet this.cell;);this.GetCell();),public fn SetRect rect = (local cellRects = #();if this.isValidGroupBoxControlWidget this.groupBoxWidget and this.isValidBoxCell this.cell do (local minH = this.groupBoxWidget.GetMinH();local minW = this.groupBoxWidget.GetMinW();local rectX = copy rect.X;local rectY = copy rect.Y;local rectH = copy rect.H;local rectW = copy rect.W;if rectH < minH do rectH = minH;if rectW < minW do rectW = minW;local groupBoxRect = Box2 rectX rectY rectW rectH;this.groupBoxWidget.SetRect groupBoxRect;local cellItem = this.cell.GetItem();local cellType = this.cell.GetType();local cellX = rectX + this.paddingL;local cellY = rectY + this.paddingT;local cellW = rectW - this.paddingL - this.paddingR;local cellH = rectH - this.paddingT - this.paddingB;if cellW < 1 do cellW = 1;if cellH < 1 do cellH = 1;local cellRect = Box2 cellX cellY cellW cellH;if cellType == #Layout or cellType == #Widget do (cellItem.SetRect cellRect;);append cellRects cellRect;this.StateChanged.Notify #RectUpdated cellRects;);cellRects;),public fn SetVisibility input = (if classOf input == BooleanClass do (if this.isValidGroupBoxControlWidget this.groupBoxWidget do (this.groupBoxWidget.SetVisibility input;);if this.isValidBoxCell this.cell do (local cellItem = this.cell.GetItem();local cellType = this.cell.GetType();if (cellType == #Layout or cellType == #Widget) and isProperty cellItem #SetVisibility and classOf cellItem.SetVisibility == MAXScriptFunction do (cellItem.SetVisibility input;););this.StateChanged.Notify #VisibilityChanged undefined;);this.GetVisibility();),private fn isValidBoxCell obj = (isStruct obj and isProperty obj #StructName and classOf obj.StructName == MAXScriptFunction and obj.StructName() == #FlexBoxCellStruct;),private fn isValidGroupBoxControlWidget obj = (isStruct obj and isProperty obj #StructName and classOf obj.StructName == MAXScriptFunction and obj.StructName() == #FlexGroupBoxControlWidgetStruct;),private fn setGroupBoxWidget obj = (if this.isValidGroupBoxControlWidget obj do (this.groupBoxWidget = obj;);this.GetGroupBoxWidget();),public fn StructName = #FlexGroupLayoutStruct,public fn Dump indent:"" out:listener = (format "%FlexGroupLayoutStruct\n" indent to:out;if this.isValidBoxCell this.cell then (format "%  cell:\n" indent to:out;this.cell.Dump indent:(indent + "    ") out:out;);else (format "%  cell:%\n" indent this.cell to:out;);if this.isValidGroupBoxControlWidget this.groupBoxWidget then (format "%  groupBoxWidget:\n" indent to:out;this.groupBoxWidget.Dump indent:(indent + "    ") out:out;);else (format "%  groupBoxWidget:%\n" indent this.groupBoxWidget to:out;);ok;),public fn Equals obj = (local isEqualStructName = isStruct obj and isProperty obj #StructName and classOf obj.StructName == MAXScriptFunction and obj.StructName() == this.StructName();local isEqualProperties = true and isProperty obj #GetCell and classOf obj.GetCell == MAXScriptFunction and isProperty obj #GetGroupBoxWidget and classOf obj.GetGroupBoxWidget == MAXScriptFunction ;if isEqualProperties do (local ov = obj.GetCell();local tv = this.GetCell();if isStruct tv and isProperty tv #Equals and classOf tv.Equals == MAXScriptFunction then (isEqualProperties = tv.Equals ov;);else (isEqualProperties = ov == tv;););if isEqualProperties do (local ov = obj.GetGroupBoxWidget();local tv = this.GetGroupBoxWidget();if isStruct tv and isProperty tv #Equals and classOf tv.Equals == MAXScriptFunction then (isEqualProperties = tv.Equals ov;);else (isEqualProperties = ov == tv;););isEqualStructName and isEqualProperties;),public StateChanged,on Create do (this.StateChanged = ::std.ObservableStruct();this.boxCellDef = ::flexUIDefinitionPool[@"Model\Layout\FlexBoxCell.ms"];this.setGroupBoxWidget this._CP1_;););::flexUIDefinitionPool[@"Model\Layout\FlexHBoxLayout.ms"] = struct FlexHBoxLayoutStruct (public Options,private cells = #(),private boxCellDef,public fn AddLayout layout fixedLength:undefined minimum:1 stretch:1 = (local cell = this.boxCellDef layout stretch minimum fixedLength;if cell.GetType() == #Layout and layout != this then (append this.cells cell;this.StateChanged.Notify #LayoutAdded cell;);else (cell = undefined;);cell;),public fn AddSpace input = (local cell = this.boxCellDef input;if cell.GetType() == #Space then (append this.cells cell;this.StateChanged.Notify #SpaceAdded cell;);else (cell = undefined;);cell;),public fn AddStretch stretch:1 = (local cell = this.boxCellDef -1 stretch;if cell.GetType() == #Stretch then (append this.cells cell;this.StateChanged.Notify #StretchAdded cell;);else (cell = undefined;);cell;),public fn AddWidget widget fixedLength:undefined minimum:1 stretch:1 = (local cell = this.boxCellDef widget stretch minimum fixedLength;if cell.GetType() == #Widget and this.findWidget widget == 0 then (append this.cells cell;this.StateChanged.Notify #WidgetAdded cell;);else (cell = undefined;);cell;),public fn GetCells = (this.cells;),public fn GetVisibility = (local visibility = unsupplied;for cell in this.cells do (local cellItem = cell.GetItem();local cellType = cell.GetType();if (cellType == #Layout or cellType == #Widget) and isProperty cellItem #GetVisibility and classOf cellItem.GetVisibility == MAXScriptFunction do (local isVisible = cellItem.GetVisibility();if visibility == unsupplied do (visibility = isVisible;);if classOf visibility != UndefinedClass do (if isVisible != visibility do (visibility = undefined;););););if visibility == unsupplied do (visibility = undefined;);visibility;),public fn SetRect rect = (local cellCount = this.cells.Count;local marginH = this.Options.GetMarginH();local paddingB = this.Options.GetPaddingB();local paddingL = this.Options.GetPaddingL();local paddingR = this.Options.GetPaddingR();local paddingT = this.Options.GetPaddingT();local cellItems = #();local cellLengths = #();local cellLengthTypes = #();local cellMinimums = #();local cellTypes = #();local totalFixed = paddingL + paddingR;local totalStretch = 0;for i = 1 to cellCount do (if i > 1 do totalFixed += marginH;local cell = this.cells[i];local cellFixedLength = cell.GetFixedLength();local cellItem = cell.GetItem();local cellMinimum = cell.GetMinimum();local cellStretch = cell.GetStretch();local cellType = cell.GetType();append cellItems cellItem;append cellMinimums cellMinimum;append cellTypes cellType;if classOf cellType == Name then (if cellType == #Space then (append cellLengths cellItem;append cellLengthTypes #Fixed;totalFixed += cellItem;);else (if classOf cellFixedLength == Integer then (append cellLengths cellFixedLength;append cellLengthTypes #Fixed;totalFixed += cellFixedLength;);else (append cellLengths cellStretch;append cellLengthTypes #Stretch;totalStretch += cellStretch;);););else (append cellLengths 1;append cellLengthTypes #Stretch;totalStretch += 1;););local needsRecalculation = true;local unitRatio = 0.0;while needsRecalculation do (needsRecalculation = false;unitRatio = 0.0;if totalStretch > 0 do (unitRatio = (rect.W - totalFixed) as Float / totalStretch as Float;);for i = 1 to cellCount while needsRecalculation == false do (if cellLengthTypes[i] == #Stretch do (local cellStretch = copy cellLengths[i];local cellW = (cellStretch * unitRatio) as Integer;needsRecalculation = cellW < cellMinimums[i];if needsRecalculation do (cellLengths[i] = copy cellMinimums[i];cellLengthTypes[i] = #Fixed;totalFixed += cellLengths[i];totalStretch -= cellStretch;););););local cellX = rect.X + paddingL;local cellY = rect.Y + paddingT;local cellH = rect.H - paddingT - paddingB;if cellH < 1 do cellH = 1;local cellRects = for i = 1 to cellCount collect (if i > 1 do cellX += marginH;local cellItem = cellItems[i];local cellLength = cellLengths[i];local cellLengthType = cellLengthTypes[i];local cellType = cellTypes[i];local cellW = copy cellLength;if cellLengthType == #Stretch do (cellW = (cellW * unitRatio) as Integer;);if cellW < 1 do cellW = 1;local cellRect = Box2 cellX cellY cellW cellH;if cellType == #Layout or cellType == #Widget do (cellItem.SetRect cellRect;);cellX += cellW;cellRect;);this.StateChanged.Notify #RectUpdated cellRects;cellRects;),public fn SetVisibility input = (if classOf input == BooleanClass do (for cell in this.cells do (local cellItem = cell.GetItem();local cellType = cell.GetType();if (cellType == #Layout or cellType == #Widget) and isProperty cellItem #SetVisibility and classOf cellItem.SetVisibility == MAXScriptFunction do (cellItem.SetVisibility input;););this.StateChanged.Notify #VisibilityChanged undefined;);this.GetVisibility();),private fn findWidget widget = (local index = 0;for i = 1 to this.cells.Count while index == 0 do (if this.cells[i].GetType() == #Widget do (local cellItem = this.cells[i].GetItem();if this.isValidWidget cellItem and cellItem.Equals widget do (index = 1;);););index;),private fn isMatchStructName obj pattern = (isProperty obj #StructName and classOf obj.StructName == MAXScriptFunction and matchPattern (obj.StructName() as String) pattern:pattern;),private fn isValidLayoutOptions obj = (isStruct obj and isProperty obj #StructName and classOf obj.StructName == MAXScriptFunction and obj.StructName() == #FlexLayoutOptionsStruct;),private fn isValidWidget obj = (isStruct obj and this.isMatchStructName obj "Flex*WidgetStruct";),public fn StructName = #FlexHBoxLayoutStruct,public fn Dump indent:"" out:listener = (format "%FlexHBoxLayoutStruct\n" indent to:out;format "%  Options:\n" indent to:out;this.Options.Dump indent:(indent + "    ") out:out;format "%  cells:%\n" indent this.cells.Count to:out;for i = 1 to this.cells.Count do (format "%    [%]:\n" indent i to:out;this.cells[i].Dump indent:(indent + "      ") out:out;);ok;),public fn Equals obj = (local isEqualStructName = isStruct obj and isProperty obj #StructName and classOf obj.StructName == MAXScriptFunction and obj.StructName() == this.StructName();local isEqualProperties = isProperty obj #GetCells and classOf obj.GetCells == MAXScriptFunction ;if isEqualProperties do (local ov = obj.GetCells();local tv = this.GetCells();isEqualProperties = classOf ov == Array and ov.Count == tv.Count;if isEqualProperties do (for i = 1 to tv.Count while isEqualProperties do (isEqualProperties = tv[i].Equals ov[i];);););isEqualStructName and isEqualProperties;),public StateChanged,on Create do (this.StateChanged = ::std.ObservableStruct();if not this.isValidLayoutOptions this.Options do (this.Options = (::flexUIDefinitionPool[@"Model\Layout\FlexLayoutOptions.ms"])(););this.boxCellDef = ::flexUIDefinitionPool[@"Model\Layout\FlexBoxCell.ms"];););::flexUIDefinitionPool[@"Model\Layout\FlexStackedLayout.ms"] = struct FlexStackedLayoutStruct (public Options,private cells = #(),private currentIndex = 0,private visibility = true,private boxCellDef,public fn AddLayout layout index: = (local cell = this.boxCellDef layout;if cell.GetType() == #Layout and layout != this then (this.addCell cell index;this.StateChanged.Notify #LayoutAdded cell;);else (cell = undefined;);cell;),public fn AddWidget widget index: = (local cell = this.boxCellDef widget;if cell.GetType() == #Widget and this.findWidget widget == 0 then (this.addCell cell index;this.StateChanged.Notify #WidgetAdded cell;);else (cell = undefined;);cell;),public fn GetCells = (this.cells;),public fn GetCurrentIndex = (this.currentIndex;),public fn GetVisibility = (this.visibility;),public fn SetCurrentIndex index = (if classOf index == Integer and 0 <= index and index <= this.cells.Count do (this.currentIndex = index;this.updateCellVisibility();this.StateChanged.Notify #CurrentIndex this.currentIndex;);this.GetCurrentIndex();),public fn SetRect rect = (local cellCount = this.cells.Count;local paddingB = this.Options.GetPaddingB();local paddingL = this.Options.GetPaddingL();local paddingR = this.Options.GetPaddingR();local paddingT = this.Options.GetPaddingT();local cellX = rect.X + paddingL;local cellY = rect.Y + paddingT;local cellW = rect.W - paddingL - paddingR;local cellH = rect.H - paddingT - paddingB;if cellW < 1 do cellW = 1;if cellH < 1 do cellH = 1;local cellRect = Box2 cellX cellY cellW cellH;local cellRects = for i = 1 to cellCount collect (local cell = this.cells[i];local cellItem = cell.GetItem();local cellType = cell.GetType();if cellType == #Layout or cellType == #Widget do (cellItem.SetRect cellRect;);cellRect;);this.StateChanged.Notify #RectUpdated cellRects;cellRects;),public fn SetVisibility input = (if classOf input == BooleanClass do (this.visibility = input;this.updateCellVisibility();this.StateChanged.Notify #VisibilityChanged undefined;);this.GetVisibility();),private fn addCell cell index = (if classOf index == Integer and 1 <= index and index <= this.cells.Count then (insertItem cell this.cells index;);else (append this.cells cell;index = this.cells.Count;);this.updateCellVisibility();index;),private fn findWidget widget = (local index = 0;for i = 1 to this.cells.Count while index == 0 do (if this.cells[i].GetType() == #Widget do (local cellItem = this.cells[i].GetItem();if this.isValidWidget cellItem and cellItem.Equals widget do (index = 1;);););index;),private fn isMatchStructName obj pattern = (isProperty obj #StructName and classOf obj.StructName == MAXScriptFunction and matchPattern (obj.StructName() as String) pattern:pattern;),private fn isValidLayoutOptions obj = (isStruct obj and isProperty obj #StructName and classOf obj.StructName == MAXScriptFunction and obj.StructName() == #FlexLayoutOptionsStruct;),private fn isValidWidget obj = (isStruct obj and this.isMatchStructName obj "Flex*WidgetStruct";),private fn updateCellVisibility = (local cellCount = this.cells.Count;for i = 1 to cellCount do (local cell = this.cells[i];local cellItem = cell.GetItem();local cellType = cell.GetType();if (cellType == #Layout or cellType == #Widget) and isProperty cellItem #SetVisibility and classOf cellItem.SetVisibility == MAXScriptFunction do (cellItem.SetVisibility (this.visibility and i == this.currentIndex);););ok;),public fn StructName = #FlexStackedLayoutStruct,public fn Dump indent:"" out:listener = (format "%FlexStackedLayoutStruct\n" indent to:out;format "%  Options:\n" indent to:out;this.Options.Dump indent:(indent + "    ") out:out;format "%  currentIndex:%\n" indent this.currentIndex to:out;format "%  visibility:%\n" indent this.visibility to:out;format "%  cells:%\n" indent this.cells.Count to:out;for i = 1 to this.cells.Count do (format "%    [%]:\n" indent i to:out;this.cells[i].Dump indent:(indent + "      ") out:out;);ok;),public fn Equals obj = (local isEqualStructName = isStruct obj and isProperty obj #StructName and classOf obj.StructName == MAXScriptFunction and obj.StructName() == this.StructName();local isEqualProperties = isProperty obj #GetCells and classOf obj.GetCells == MAXScriptFunction and isProperty obj #GetCurrentIndex and classOf obj.GetCurrentIndex == MAXScriptFunction and obj.GetCurrentIndex() == this.GetCurrentIndex() and isProperty obj #GetVisibility and classOf obj.GetVisibility == MAXScriptFunction and obj.GetVisibility() == this.GetVisibility();if isEqualProperties do (local ov = obj.GetCells();local tv = this.GetCells();isEqualProperties = classOf ov == Array and ov.Count == tv.Count;if isEqualProperties do (for i = 1 to tv.Count while isEqualProperties do (isEqualProperties = tv[i].Equals ov[i];);););isEqualStructName and isEqualProperties;),public StateChanged,on Create do (this.StateChanged = ::std.ObservableStruct();if not this.isValidLayoutOptions this.Options do (this.Options = (::flexUIDefinitionPool[@"Model\Layout\FlexLayoutOptions.ms"])(););this.boxCellDef = ::flexUIDefinitionPool[@"Model\Layout\FlexBoxCell.ms"];););::flexUIDefinitionPool[@"Model\Layout\FlexVBoxLayout.ms"] = struct FlexVBoxLayoutStruct (public Options,private cells = #(),private boxCellDef,public fn AddLayout layout fixedLength:undefined minimum:1 stretch:1 = (local cell = this.boxCellDef layout stretch minimum fixedLength;if cell.GetType() == #Layout and layout != this then (append this.cells cell;this.StateChanged.Notify #LayoutAdded cell;);else (cell = undefined;);cell;),public fn AddSpace input = (local cell = this.boxCellDef input;if cell.GetType() == #Space then (append this.cells cell;this.StateChanged.Notify #SpaceAdded cell;);else (cell = undefined;);cell;),public fn AddStretch stretch:1 = (local cell = this.boxCellDef -1 stretch;if cell.GetType() == #Stretch then (append this.cells cell;this.StateChanged.Notify #StretchAdded cell;);else (cell = undefined;);cell;),public fn AddWidget widget fixedLength:undefined minimum:1 stretch:1 = (local cell = this.boxCellDef widget stretch minimum fixedLength;if cell.GetType() == #Widget and this.findWidget widget == 0 then (append this.cells cell;this.StateChanged.Notify #WidgetAdded cell;);else (cell = undefined;);cell;),public fn GetCells = (this.cells;),public fn GetVisibility = (local visibility = unsupplied;for cell in this.cells do (local cellItem = cell.GetItem();local cellType = cell.GetType();if (cellType == #Layout or cellType == #Widget) and isProperty cellItem #GetVisibility and classOf cellItem.GetVisibility == MAXScriptFunction do (local isVisible = cellItem.GetVisibility();if visibility == unsupplied do (visibility = isVisible;);if classOf visibility != UndefinedClass do (if isVisible != visibility do (visibility = undefined;););););if visibility == unsupplied do (visibility = undefined;);visibility;),public fn SetRect rect = (local cellCount = this.cells.Count;local marginV = this.Options.GetMarginV();local paddingB = this.Options.GetPaddingB();local paddingL = this.Options.GetPaddingL();local paddingR = this.Options.GetPaddingR();local paddingT = this.Options.GetPaddingT();local cellItems = #();local cellLengths = #();local cellLengthTypes = #();local cellMinimums = #();local cellTypes = #();local totalFixed = paddingT + paddingB;local totalStretch = 0;for i = 1 to cellCount do (if i > 1 do totalFixed += marginV;local cell = this.cells[i];local cellFixedLength = cell.GetFixedLength();local cellItem = cell.GetItem();local cellMinimum = cell.GetMinimum();local cellStretch = cell.GetStretch();local cellType = cell.GetType();append cellItems cellItem;append cellMinimums cellMinimum;append cellTypes cellType;if classOf cellType == Name then (if cellType == #Space then (append cellLengths cellItem;append cellLengthTypes #Fixed;totalFixed += cellItem;);else (if classOf cellFixedLength == Integer then (append cellLengths cellFixedLength;append cellLengthTypes #Fixed;totalFixed += cellFixedLength;);else (append cellLengths cellStretch;append cellLengthTypes #Stretch;totalStretch += cellStretch;);););else (append cellLengths 1;append cellLengthTypes #Stretch;totalStretch += 1;););local needsRecalculation = true;local unitRatio = 0.0;while needsRecalculation do (needsRecalculation = false;unitRatio = 0.0;if totalStretch > 0 do (unitRatio = (rect.H - totalFixed) as Float / totalStretch as Float;);for i = 1 to cellCount while needsRecalculation == false do (if cellLengthTypes[i] == #Stretch do (local cellStretch = copy cellLengths[i];local cellH = (cellStretch * unitRatio) as Integer;needsRecalculation = cellH < cellMinimums[i];if needsRecalculation do (cellLengths[i] = copy cellMinimums[i];cellLengthTypes[i] = #Fixed;totalFixed += cellLengths[i];totalStretch -= cellStretch;););););local cellX = rect.X + paddingL;local cellY = rect.Y + paddingT;local cellW = rect.W - paddingL - paddingR;if cellW < 1 do cellW = 1;local cellRects = for i = 1 to cellCount collect (if i > 1 do cellY += marginV;local cellItem = cellItems[i];local cellLength = cellLengths[i];local cellLengthType = cellLengthTypes[i];local cellType = cellTypes[i];local cellH = copy cellLength;if cellLengthType == #Stretch do (cellH = (cellH * unitRatio) as Integer;);if cellH < 1 do cellH = 1;local cellRect = Box2 cellX cellY cellW cellH;if cellType == #Layout or cellType == #Widget do (cellItem.SetRect cellRect;);cellY += cellH;cellRect;);this.StateChanged.Notify #RectUpdated cellRects;cellRects;),public fn SetVisibility input = (if classOf input == BooleanClass do (for cell in this.cells do (local cellItem = cell.GetItem();local cellType = cell.GetType();if (cellType == #Layout or cellType == #Widget) and isProperty cellItem #SetVisibility and classOf cellItem.SetVisibility == MAXScriptFunction do (cellItem.SetVisibility input;););this.StateChanged.Notify #VisibilityChanged undefined;);this.GetVisibility();),private fn findWidget widget = (local index = 0;for i = 1 to this.cells.Count while index == 0 do (if this.cells[i].GetType() == #Widget do (local cellItem = this.cells[i].GetItem();if this.isValidWidget cellItem and cellItem.Equals widget do (index = 1;);););index;),private fn isMatchStructName obj pattern = (isProperty obj #StructName and classOf obj.StructName == MAXScriptFunction and matchPattern (obj.StructName() as String) pattern:pattern;),private fn isValidLayoutOptions obj = (isStruct obj and isProperty obj #StructName and classOf obj.StructName == MAXScriptFunction and obj.StructName() == #FlexLayoutOptionsStruct;),private fn isValidWidget obj = (isStruct obj and this.isMatchStructName obj "Flex*WidgetStruct";),public fn StructName = #FlexVBoxLayoutStruct,public fn Dump indent:"" out:listener = (format "%FlexVBoxLayoutStruct\n" indent to:out;format "%  Options:\n" indent to:out;this.Options.Dump indent:(indent + "    ") out:out;format "%  cells:%\n" indent this.cells.Count to:out;for i = 1 to this.cells.Count do (format "%    [%]:\n" indent i to:out;this.cells[i].Dump indent:(indent + "      ") out:out;);ok;),public fn Equals obj = (local isEqualStructName = isStruct obj and isProperty obj #StructName and classOf obj.StructName == MAXScriptFunction and obj.StructName() == this.StructName();local isEqualProperties = isProperty obj #GetCells and classOf obj.GetCells == MAXScriptFunction ;if isEqualProperties do (local ov = obj.GetCells();local tv = this.GetCells();isEqualProperties = classOf ov == Array and ov.Count == tv.Count;if isEqualProperties do (for i = 1 to tv.Count while isEqualProperties do (isEqualProperties = tv[i].Equals ov[i];);););isEqualStructName and isEqualProperties;),public StateChanged,on Create do (this.StateChanged = ::std.ObservableStruct();if not this.isValidLayoutOptions this.Options do (this.Options = (::flexUIDefinitionPool[@"Model\Layout\FlexLayoutOptions.ms"])(););this.boxCellDef = ::flexUIDefinitionPool[@"Model\Layout\FlexBoxCell.ms"];););::flexUIDefinitionPool[@"Model\Layout\FlexGridLayout.ms"] = struct FlexGridLayoutStruct (public Options,private cells = #(),private columnCells = #(),private rowCells = #(),private boxCellDef,private gridCellDef,public fn AddLayout layout row column rowSpan:1 columnSpan:1 = (local cell = this.gridCellDef layout row column rowSpan columnSpan;if cell.GetType() == #Layout and layout != this then (if this.addGrid row column rowSpan columnSpan then (append this.cells cell;this.StateChanged.Notify #LayoutAdded cell;);else (cell = undefined;););else (cell = undefined;);cell;),public fn AddWidget widget row column rowSpan:1 columnSpan:1 = (local cell = this.gridCellDef widget row column rowSpan columnSpan;if cell.GetType() == #Widget and this.findWidget widget == 0 then (if this.addGrid row column rowSpan columnSpan then (append this.cells cell;this.StateChanged.Notify #WidgetAdded cell;);else (cell = undefined;););else (cell = undefined;);cell;),public fn GetCells = (this.cells;),public fn GetColumnCells = (this.columnCells;),public fn GetRowCells = (this.rowCells;),public fn GetVisibility = (local visibility = unsupplied;for cell in this.cells do (local cellItem = cell.GetItem();local cellType = cell.GetType();if (cellType == #Layout or cellType == #Widget) and isProperty cellItem #GetVisibility and classOf cellItem.GetVisibility == MAXScriptFunction do (local isVisible = cellItem.GetVisibility();if visibility == unsupplied do (visibility = isVisible;);if classOf visibility != UndefinedClass do (if isVisible != visibility do (visibility = undefined;););););if visibility == unsupplied do (visibility = undefined;);visibility;),public fn SetColumnFixedLength column fixedLength = (local columnFixedLength = undefined;if superClassOf column == Number do (column = column as Integer;if column > 0 do (columnFixedLength = this.columnCells[column].SetFixedLength fixedLength;this.StateChanged.Notify #ColumnFixedLength columnFixedLength;););columnFixedLength;),public fn SetColumnMinimumWidth column minimum = (local columnMinimum = undefined;if superClassOf column == Number do (column = column as Integer;if column > 0 and this.isValidStretchCell this.columnCells[column] do (columnMinimum = this.columnCells[column].SetMinimum minimum;this.StateChanged.Notify #ColumnMinimumWidth columnMinimum;););columnMinimum;),public fn SetColumnStretch column stretch = (local columnStretch = undefined;if superClassOf column == Number do (column = column as Integer;if column > 0 and this.isValidStretchCell this.columnCells[column] do (columnStretch = this.columnCells[column].SetStretch stretch;this.StateChanged.Notify #ColumnStretch columnStretch;););columnStretch;),public fn SetRect rect = (local columnRects = this.generateColumnRects rect;local rowRects = this.generateRowRects rect;local cellCount = this.cells.Count;local cellRects = for i = 1 to cellCount collect (local cell = this.cells[i];local cellItem = cell.GetItem();local cellType = cell.GetType();local columnStart = cell.GetColumn();local columnEnd = columnStart + (cell.GetColumnSpan() - 1);local rowStart = cell.GetRow();local rowEnd = rowStart + (cell.GetRowSpan() - 1);local cellX = columnRects[columnStart].X;local cellY = rowRects[rowStart].Y;local cellW = columnRects[columnEnd].X + columnRects[columnEnd].W - cellX;local cellH = rowRects[rowEnd].Y + rowRects[rowEnd].H - cellY;local cellRect = Box2 cellX cellY cellW cellH;if cellType == #Layout or cellType == #Widget do (cellItem.SetRect cellRect;);cellRect;);this.StateChanged.Notify #RectUpdated cellRects;cellRects;),public fn SetRowFixedLength row fixedLength = (local rowFixedLength = undefined;if superClassOf row == Number do (row = row as Integer;if row > 0 do (rowFixedLength = this.rowCells[row].SetFixedLength fixedLength;this.StateChanged.Notify #RowFixedLength rowFixedLength;););rowFixedLength;),public fn SetRowMinimumHeight row minimum = (local rowMinimum = undefined;if superClassOf row == Number do (row = row as Integer;if row > 0 and this.isValidStretchCell this.rowCells[row] do (rowMinimum = this.rowCells[row].SetMinimum minimum;this.StateChanged.Notify #RowMinimumHeight rowMinimum;););rowMinimum;),public fn SetRowStretch row stretch = (local rowStretch = undefined;if superClassOf row == Number do (row = row as Integer;if row > 0 and this.isValidStretchCell this.rowCells[row] do (rowStretch = this.rowCells[row].SetStretch stretch;this.StateChanged.Notify #RowStretch rowStretch;););rowStretch;),public fn SetVisibility input = (if classOf input == BooleanClass do (for cell in this.cells do (local cellItem = cell.GetItem();local cellType = cell.GetType();if (cellType == #Layout or cellType == #Widget) and isProperty cellItem #SetVisibility and classOf cellItem.SetVisibility == MAXScriptFunction do (cellItem.SetVisibility input;););this.StateChanged.Notify #VisibilityChanged undefined;);this.GetVisibility();),private fn addGrid row column rowSpan columnSpan = (local columnCellCount = 0;local rowCellCount = 0;if superClassOf column == Number and superClassOf columnSpan == Number and superClassOf row == Number and superClassOf rowSpan == Number do (column = column as Integer;columnSpan = columnSpan as Integer;if column > 0 and columnSpan > 0 do (local columnStart = column;local columnEnd = column + (columnSpan - 1);for i = columnStart to columnEnd do (if not this.isValidStretchCell this.columnCells[i] do (this.columnCells[i] = this.boxCellDef -1 1;);if this.isValidStretchCell this.columnCells[i] do (columnCellCount += 1;);););row = row as Integer;rowSpan = rowSpan as Integer;if row > 0 and rowSpan > 0 do (local rowStart = row;local rowEnd = row + (rowSpan - 1);for i = rowStart to rowEnd do (if not this.isValidStretchCell this.rowCells[i] do (this.rowCells[i] = this.boxCellDef -1 1;);if this.isValidStretchCell this.rowCells[i] do (rowCellCount += 1;););););columnCellCount > 0 and rowCellCount > 0 and columnCellCount == columnSpan and rowCellCount == rowSpan;),private fn findWidget widget = (local index = 0;for i = 1 to this.cells.Count while index == 0 do (if this.cells[i].GetType() == #Widget do (local cellItem = this.cells[i].GetItem();if this.isValidWidget cellItem and cellItem.Equals widget do (index = 1;);););index;),private fn generateColumnRects rect = (local cellCount = this.columnCells.Count;local marginH = this.Options.GetMarginH();local paddingB = this.Options.GetPaddingB();local paddingL = this.Options.GetPaddingL();local paddingR = this.Options.GetPaddingR();local paddingT = this.Options.GetPaddingT();local cellItems = #();local cellLengths = #();local cellLengthTypes = #();local cellMinimums = #();local totalFixed = paddingL + paddingR;local totalStretch = 0;for i = 1 to cellCount do (if i > 1 do totalFixed += marginH;local cell = this.columnCells[i];local cellFixedLength = cell.GetFixedLength();local cellItem = cell.GetItem();local cellMinimum = cell.GetMinimum();local cellStretch = cell.GetStretch();append cellItems cellItem;append cellMinimums cellMinimum;if classOf cellFixedLength == Integer then (append cellLengths cellFixedLength;append cellLengthTypes #Fixed;totalFixed += cellFixedLength;);else (append cellLengths cellStretch;append cellLengthTypes #Stretch;totalStretch += cellStretch;););local needsRecalculation = true;local unitRatio = 0.0;while needsRecalculation do (needsRecalculation = false;unitRatio = 0.0;if totalStretch > 0 do (unitRatio = (rect.W - totalFixed) as Float / totalStretch as Float;);for i = 1 to cellCount while needsRecalculation == false do (if cellLengthTypes[i] == #Stretch do (local cellStretch = copy cellLengths[i];local cellW = (cellStretch * unitRatio) as Integer;needsRecalculation = cellW < cellMinimums[i];if needsRecalculation do (cellLengths[i] = copy cellMinimums[i];cellLengthTypes[i] = #Fixed;totalFixed += cellLengths[i];totalStretch -= cellStretch;););););local cellX = rect.X + paddingL;local cellY = rect.Y + paddingT;local cellH = rect.H - paddingT - paddingB;if cellH < 1 do cellH = 1;for i = 1 to cellCount collect (if i > 1 do cellX += marginH;local cellItem = cellItems[i];local cellLength = cellLengths[i];local cellLengthType = cellLengthTypes[i];local cellW = copy cellLength;if cellLengthType == #Stretch do (cellW = (cellW * unitRatio) as Integer;);if cellW < 1 do cellW = 1;local cellRect = Box2 cellX cellY cellW cellH;cellX += cellW;cellRect;);),private fn generateRowRects rect = (local cellCount = this.rowCells.Count;local marginV = this.Options.GetMarginV();local paddingB = this.Options.GetPaddingB();local paddingL = this.Options.GetPaddingL();local paddingR = this.Options.GetPaddingR();local paddingT = this.Options.GetPaddingT();local cellItems = #();local cellLengths = #();local cellLengthTypes = #();local cellMinimums = #();local totalFixed = paddingT + paddingB;local totalStretch = 0;for i = 1 to cellCount do (if i > 1 do totalFixed += marginV;local cell = this.rowCells[i];local cellFixedLength = cell.GetFixedLength();local cellItem = cell.GetItem();local cellMinimum = cell.GetMinimum();local cellStretch = cell.GetStretch();append cellItems cellItem;append cellMinimums cellMinimum;if classOf cellFixedLength == Integer then (append cellLengths cellFixedLength;append cellLengthTypes #Fixed;totalFixed += cellFixedLength;);else (append cellLengths cellStretch;append cellLengthTypes #Stretch;totalStretch += cellStretch;););local needsRecalculation = true;local unitRatio = 0.0;while needsRecalculation do (needsRecalculation = false;unitRatio = 0.0;if totalStretch > 0 do (unitRatio = (rect.H - totalFixed) as Float / totalStretch as Float;);for i = 1 to cellCount while needsRecalculation == false do (if cellLengthTypes[i] == #Stretch do (local cellStretch = copy cellLengths[i];local cellH = (cellStretch * unitRatio) as Integer;needsRecalculation = cellH < cellMinimums[i];if needsRecalculation do (cellLengths[i] = copy cellMinimums[i];cellLengthTypes[i] = #Fixed;totalFixed += cellLengths[i];totalStretch -= cellStretch;););););local cellX = rect.X + paddingL;local cellY = rect.Y + paddingT;local cellW = rect.W - paddingL - paddingR;if cellW < 1 do cellW = 1;for i = 1 to cellCount collect (if i > 1 do cellY += marginV;local cellItem = cellItems[i];local cellLength = cellLengths[i];local cellLengthType = cellLengthTypes[i];local cellH = copy cellLength;if cellLengthType == #Stretch do (cellH = (cellH * unitRatio) as Integer;);if cellH < 1 do cellH = 1;local cellRect = Box2 cellX cellY cellW cellH;cellY += cellH;cellRect;);),private fn isMatchStructName obj pattern = (isProperty obj #StructName and classOf obj.StructName == MAXScriptFunction and matchPattern (obj.StructName() as String) pattern:pattern;),private fn isValidLayoutOptions obj = (isStruct obj and isProperty obj #StructName and classOf obj.StructName == MAXScriptFunction and obj.StructName() == #FlexLayoutOptionsStruct;),private fn isValidStretchCell obj = (isStruct obj and isProperty obj #StructName and classOf obj.StructName == MAXScriptFunction and obj.StructName() == #FlexBoxCellStruct and obj.GetType() == #Stretch;),private fn isValidWidget obj = (isStruct obj and this.isMatchStructName obj "Flex*WidgetStruct";),public fn StructName = #FlexGridLayoutStruct,public fn Dump indent:"" out:listener = (format "%FlexGridLayoutStruct\n" indent to:out;format "%  Options:\n" indent to:out;this.Options.Dump indent:(indent + "    ") out:out;format "%  cells:%\n" indent this.cells.Count to:out;for i = 1 to this.cells.Count do (format "%    [%]:\n" indent i to:out;this.cells[i].Dump indent:(indent + "      ") out:out;);format "%  columnCells:%\n" indent this.columnCells.Count to:out;for i = 1 to this.columnCells.Count do (format "%    [%]:\n" indent i to:out;this.columnCells[i].Dump indent:(indent + "      ") out:out;);format "%  rowCells:%\n" indent this.rowCells.Count to:out;for i = 1 to this.rowCells.Count do (format "%    [%]:\n" indent i to:out;this.rowCells[i].Dump indent:(indent + "      ") out:out;);ok;),public fn Equals obj = (local isEqualStructName = isStruct obj and isProperty obj #StructName and classOf obj.StructName == MAXScriptFunction and obj.StructName() == this.StructName();local isEqualProperties = isProperty obj #GetCells and classOf obj.GetCells == MAXScriptFunction and isProperty obj #GetColumnCells and classOf obj.GetColumnCells == MAXScriptFunction and isProperty obj #GetRowCells and classOf obj.GetRowCells == MAXScriptFunction;if isEqualProperties do (local ov = obj.GetCells();local tv = this.GetCells();isEqualProperties = classOf ov == Array and ov.Count == tv.Count;if isEqualProperties do (for i = 1 to tv.Count while isEqualProperties do (isEqualProperties = tv[i].Equals ov[i];);););if isEqualProperties do (local ov = obj.GetColumnCells();local tv = this.GetColumnCells();isEqualProperties = classOf ov == Array and ov.Count == tv.Count;if isEqualProperties do (for i = 1 to tv.Count while isEqualProperties do (isEqualProperties = tv[i].Equals ov[i];);););if isEqualProperties do (local ov = obj.GetRowCells();local tv = this.GetRowCells();isEqualProperties = classOf ov == Array and ov.Count == tv.Count;if isEqualProperties do (for i = 1 to tv.Count while isEqualProperties do (isEqualProperties = tv[i].Equals ov[i];);););isEqualStructName and isEqualProperties;),public StateChanged,on Create do (this.StateChanged = ::std.ObservableStruct();if not this.isValidLayoutOptions this.Options do (this.Options = (::flexUIDefinitionPool[@"Model\Layout\FlexLayoutOptions.ms"])(););this.boxCellDef = ::flexUIDefinitionPool[@"Model\Layout\FlexBoxCell.ms"];this.gridCellDef = ::flexUIDefinitionPool[@"Model\Layout\FlexGridCell.ms"];););::flexUIDefinitionPool[@"Model\Widget\FlexAngleControlWidget.ms"] = struct FlexAngleControlWidgetStruct (public _CP1_,private alignmentH = #Center,private alignmentV = #Center,private captionMargin = 3,private captionPosition = #Top,private control,private explicitH,private explicitW,private defaultH = -1,private defaultW = -1,private minH = 5,private minW = 5,private resizableH = true,private resizableW = true,public fn GetAlignmentH = (this.alignmentH;),public fn GetAlignmentV = (this.alignmentV;),public fn GetCaptionMargin = (this.captionMargin;),public fn GetCaptionPosition = (this.captionPosition;),public fn GetControl = (this.control;),public fn GetDefaultH = (this.defaultH;),public fn GetDefaultW = (this.defaultW;),public fn GetExplicitH = (this.explicitH;),public fn GetExplicitW = (this.explicitW;),public fn GetMinH = (this.minH;),public fn GetMinW = (this.minW;),public fn GetRect = (local rect = undefined;if this.isValidControl this.control do (local rectL = undefined;local rectT = undefined;local rectR = undefined;local rectB = undefined;for hwnd in this.control.Hwnd do (local hwndRect = this.getClientRect hwnd;local hwndL = hwndRect.X;local hwndT = hwndRect.Y;local hwndR = hwndL + hwndRect.W;local hwndB = hwndT + hwndRect.H;if classOf rectL != Integer do rectL = hwndL;if classOf rectT != Integer do rectT = hwndT;if classOf rectR != Integer do rectR = hwndR;if classOf rectB != Integer do rectB = hwndB;if rectL > hwndL do rectL = hwndL;if rectT > hwndT do rectT = hwndT;if rectR < hwndR do rectR = hwndR;if rectB < hwndB do rectB = hwndB;);if classOf rectL == Integer and classOf rectT == Integer and classOf rectR == Integer and classOf rectB == Integer do (local x = rectL;local y = rectT;local w = rectR - rectL;local h = rectB - rectT;rect = Box2 x y w h;););rect;),public fn GetResizableH = (this.resizableH;),public fn GetResizableW = (this.resizableW;),public fn GetVisibility = (local isVisible = undefined;if this.isValidControl this.control do (isVisible = this.control.Visible;);isVisible;),public fn SetAlignmentH input = (local validValues = #(#Left, #Center, #Right);if findItem validValues input > 0 do (this.alignmentH = input;this.StateChanged.Notify #AlignmentH this.alignmentH;);this.GetAlignmentH();),public fn SetAlignmentV input = (local validValues = #(#Top, #Center, #Bottom);if findItem validValues input > 0 do (this.alignmentV = input;this.StateChanged.Notify #AlignmentV this.alignmentV;);this.GetAlignmentV();),public fn SetCaptionMargin input = (if superClassOf input == Number do (input = input as Integer;if input < 0 do input = 0;this.captionMargin = input;this.StateChanged.Notify #CaptionMargin this.captionMargin;);this.GetCaptionMargin();),public fn SetCaptionPosition input = (local validValues = #(#Left, #Top);if findItem validValues input > 0 do (this.captionPosition = input;this.StateChanged.Notify #CaptionPosition this.captionPosition;);this.GetCaptionPosition();),public fn SetControl obj = (if this.isValidControl obj do (this.control = obj;this.StateChanged.Notify #Control this.control;);this.GetControl();),public fn SetExplicitH input = (if classOf input == UndefinedClass then (this.explicitH = input;this.StateChanged.Notify #ExplicitH this.explicitH;);else (if superClassOf input == Number do (input = input as Integer;if input < 0 do input = 0;this.explicitH = input;this.StateChanged.Notify #ExplicitH this.explicitH;););this.GetExplicitH();),public fn SetExplicitW input = (if classOf input == UndefinedClass then (this.explicitW = input;this.StateChanged.Notify #ExplicitW this.explicitW;);else (if superClassOf input == Number do (input = input as Integer;if input < 0 do input = 0;this.explicitW = input;this.StateChanged.Notify #ExplicitW this.explicitW;););this.GetExplicitW();),public fn SetRect rect = (local rectX = rect.X as Integer;local rectY = rect.Y as Integer;local rectW = rect.W as Integer;local rectH = rect.H as Integer;if classOf rect == Box2 and this.isValidControl this.control do (if this.control.Hwnd.Count == 2 do (local hwnd1 = this.control.Hwnd[1];local hwnd2 = this.control.Hwnd[2];local captionSize = getTextExtent this.control.Caption;local captionW = captionSize.X as Integer;local captionH = captionSize.Y as Integer;local captionOffset = 0;if captionW > 0 do (case this.captionPosition of ((#Left): captionOffset = captionW + this.captionMargin;(#Top): captionOffset = captionH + this.captionMargin;default: ();););local x = copy rectX;local y = copy rectY;local w = copy rectW;local h = copy rectH;case this.captionPosition of ((#Left): w -= captionOffset;(#Top): h -= captionOffset;default: (););if this.defaultW >= 0 do w = copy this.defaultW;if this.defaultH >= 0 do h = copy this.defaultH;if this.isValidExplicitW() do w = copy this.explicitW;if this.isValidExplicitH() do h = copy this.explicitH;local hwnd1Rect = this.getClientRect hwnd1;if not this.resizableW do w = hwnd1Rect.W;if not this.resizableH do h = hwnd1Rect.H;if w < this.minW do w = copy this.minW;if h < this.minH do h = copy this.minH;if w < 0 do w = 0;if h < 0 do h = 0;local isSyncedW = h < w;local isSyncedH = w < h;if isSyncedW do w = copy h;if isSyncedH do h = copy w;local rectMinW = copy w;if this.captionPosition == #Left do rectMinW += captionOffset;if rectW > rectMinW and (this.isFixedW() or isSyncedW) do (case this.alignmentH of ((#Left): ();(#Center): (case this.captionPosition of ((#Left): x += (rectW / 2) as Integer - ((w + captionOffset) / 2) as Integer;(#Top): x += (rectW / 2) as Integer - (w / 2) as Integer;default: ();););(#Right): (x += rectW - w;if this.captionPosition == #Left do x -= captionOffset;);default: ();););local rectMinH = copy h;if this.captionPosition == #Top do rectMinH += captionOffset;if rectH > rectMinH and (this.isFixedH() or isSyncedH) do (case this.alignmentV of ((#Top): ();(#Center): (case this.captionPosition of ((#Left): y += (rectH / 2) as Integer - (h / 2) as Integer;(#Top): y += (rectH / 2) as Integer - ((h + captionOffset) / 2) as Integer;default: ();););(#Bottom): (y += rectH - h;if this.captionPosition == #Top do y -= captionOffset;);default: ();););case this.captionPosition of ((#Left): x += captionOffset;(#Top): y += captionOffset;default: (););case this.captionPosition of ((#Left): this.control.Height = h;(#Top): this.control.Width = w;default: (););this.control.Pos = [x, y];if captionW == 0 then (Windows.SetWindowPos hwnd2 x y 1 1 true;);else (local captionX = copy x;case this.captionPosition of ((#Left): captionX -= captionOffset;(#Top): ();default: (););local captionY = copy y;case this.captionPosition of ((#Left): captionY += (h / 2) as Integer - (captionH / 2) as Integer;(#Top): captionY -= captionOffset;default: (););Windows.SetWindowPos hwnd2 captionX captionY captionW captionH true;);this.StateChanged.Notify #RectUpdated undefined;););this.GetRect();),public fn SetVisibility input = (if classOf input == BooleanClass and this.isValidControl this.control do (this.control.Visible = input;this.StateChanged.Notify #Visibility this.control.Visible;);this.GetVisibility();),private fn getClientRect hwnd = (local parentHwnd = (Windows.GetHwndData hwnd)[2];local rect = Windows.GetWindowPos hwnd;local pos = Windows.ScreenToClient parentHwnd rect.X rect.Y;Box2 (pos.X as Integer) (pos.Y as Integer) rect.W rect.H;),private fn isFixedH = (this.defaultH >= 0 or this.isValidExplicitH() or not this.resizableH;),private fn isFixedW = (this.defaultW >= 0 or this.isValidExplicitW() or not this.resizableW;),private fn isValidControl obj = (classOf obj == AngleControl;),private fn isValidExplicitH = (classOf this.explicitH == Integer and this.explicitH >= 0;),private fn isValidExplicitW = (classOf this.explicitW == Integer and this.explicitW >= 0;),public fn StructName = #FlexAngleControlWidgetStruct,public fn Dump indent:"" out:listener = (format "%FlexAngleControlWidgetStruct\n" indent to:out;format "%  alignmentH:%\n" indent this.alignmentH to:out;format "%  alignmentV:%\n" indent this.alignmentV to:out;format "%  captionMargin:%\n" indent this.captionMargin to:out;format "%  captionPosition:%\n" indent this.captionPosition to:out;format "%  control:%\n" indent this.control to:out;format "%  defaultH:%\n" indent this.defaultH to:out;format "%  defaultW:%\n" indent this.defaultW to:out;format "%  explicitH:%\n" indent this.explicitH to:out;format "%  explicitW:%\n" indent this.explicitW to:out;format "%  minH:%\n" indent this.minH to:out;format "%  minW:%\n" indent this.minW to:out;format "%  resizableH:%\n" indent this.resizableH to:out;format "%  resizableW:%\n" indent this.resizableW to:out;ok;),public fn Equals obj = (local isEqualStructName = isStruct obj and isProperty obj #StructName and classOf obj.StructName == MAXScriptFunction and obj.StructName() == this.StructName();local isEqualProperties = isProperty obj #GetAlignmentH and classOf obj.GetAlignmentH == MAXScriptFunction and obj.GetAlignmentH() == this.GetAlignmentH() and isProperty obj #GetAlignmentV and classOf obj.GetAlignmentV == MAXScriptFunction and obj.GetAlignmentV() == this.GetAlignmentV() and isProperty obj #GetCaptionMargin and classOf obj.GetCaptionMargin == MAXScriptFunction and obj.GetCaptionMargin() == this.GetCaptionMargin() and isProperty obj #GetCaptionPosition and classOf obj.GetCaptionPosition == MAXScriptFunction and obj.GetCaptionPosition() == this.GetCaptionPosition() and isProperty obj #GetControl and classOf obj.GetControl == MAXScriptFunction and obj.GetControl() == this.GetControl() and isProperty obj #GetDefaultH and classOf obj.GetDefaultH == MAXScriptFunction and obj.GetDefaultH() == this.GetDefaultH() and isProperty obj #GetDefaultW and classOf obj.GetDefaultW == MAXScriptFunction and obj.GetDefaultW() == this.GetDefaultW() and isProperty obj #GetExplicitH and classOf obj.GetExplicitH == MAXScriptFunction and obj.GetExplicitH() == this.GetExplicitH() and isProperty obj #GetExplicitW and classOf obj.GetExplicitW == MAXScriptFunction and obj.GetExplicitW() == this.GetExplicitW() and isProperty obj #GetMinH and classOf obj.GetMinH == MAXScriptFunction and obj.GetMinH() == this.GetMinH() and isProperty obj #GetMinW and classOf obj.GetMinW == MAXScriptFunction and obj.GetMinW() == this.GetMinW() and isProperty obj #GetResizableH and classOf obj.GetResizableH == MAXScriptFunction and obj.GetResizableH() == this.GetResizableH() and isProperty obj #GetResizableW and classOf obj.GetResizableW == MAXScriptFunction and obj.GetResizableW() == this.GetResizableW();isEqualStructName and isEqualProperties;),public StateChanged,on Create do (this.StateChanged = ::std.ObservableStruct();this.SetControl this._CP1_;););::flexUIDefinitionPool[@"Model\Widget\FlexBitmapControlWidget.ms"] = struct FlexBitmapControlWidgetStruct (public _CP1_,private alignmentH = #Center,private alignmentV = #Center,private captionMargin = 3,private captionPosition = #Left,private control,private explicitH,private explicitW,private defaultH = -1,private defaultW = -1,private minH = 1,private minW = 1,private resizableH = true,private resizableW = true,public fn GetAlignmentH = (this.alignmentH;),public fn GetAlignmentV = (this.alignmentV;),public fn GetCaptionMargin = (this.captionMargin;),public fn GetCaptionPosition = (this.captionPosition;),public fn GetControl = (this.control;),public fn GetDefaultH = (this.defaultH;),public fn GetDefaultW = (this.defaultW;),public fn GetExplicitH = (this.explicitH;),public fn GetExplicitW = (this.explicitW;),public fn GetMinH = (this.minH;),public fn GetMinW = (this.minW;),public fn GetRect = (local rect = undefined;if this.isValidControl this.control do (local rectL = undefined;local rectT = undefined;local rectR = undefined;local rectB = undefined;for hwnd in this.control.Hwnd do (local hwndRect = this.getClientRect hwnd;local hwndL = hwndRect.X;local hwndT = hwndRect.Y;local hwndR = hwndL + hwndRect.W;local hwndB = hwndT + hwndRect.H;if classOf rectL != Integer do rectL = hwndL;if classOf rectT != Integer do rectT = hwndT;if classOf rectR != Integer do rectR = hwndR;if classOf rectB != Integer do rectB = hwndB;if rectL > hwndL do rectL = hwndL;if rectT > hwndT do rectT = hwndT;if rectR < hwndR do rectR = hwndR;if rectB < hwndB do rectB = hwndB;);if classOf rectL == Integer and classOf rectT == Integer and classOf rectR == Integer and classOf rectB == Integer do (local x = rectL;local y = rectT;local w = rectR - rectL;local h = rectB - rectT;rect = Box2 x y w h;););rect;),public fn GetResizableH = (this.resizableH;),public fn GetResizableW = (this.resizableW;),public fn GetVisibility = (local isVisible = undefined;if this.isValidControl this.control do (isVisible = this.control.Visible;);isVisible;),public fn SetAlignmentH input = (local validValues = #(#Left, #Center, #Right);if findItem validValues input > 0 do (this.alignmentH = input;this.StateChanged.Notify #AlignmentH this.alignmentH;);this.GetAlignmentH();),public fn SetAlignmentV input = (local validValues = #(#Top, #Center, #Bottom);if findItem validValues input > 0 do (this.alignmentV = input;this.StateChanged.Notify #AlignmentV this.alignmentV;);this.GetAlignmentV();),public fn SetCaptionMargin input = (if superClassOf input == Number do (input = input as Integer;if input < 0 do input = 0;this.captionMargin = input;this.StateChanged.Notify #CaptionMargin this.captionMargin;);this.GetCaptionMargin();),public fn SetCaptionPosition input = (local validValues = #(#Left, #Top);if findItem validValues input > 0 do (this.captionPosition = input;this.StateChanged.Notify #CaptionPosition this.captionPosition;);this.GetCaptionPosition();),public fn SetControl obj = (if this.isValidControl obj do (this.control = obj;this.StateChanged.Notify #Control this.control;);this.GetControl();),public fn SetExplicitH input = (if classOf input == UndefinedClass then (this.explicitH = input;this.StateChanged.Notify #ExplicitH this.explicitH;);else (if superClassOf input == Number do (input = input as Integer;if input < 0 do input = 0;this.explicitH = input;this.StateChanged.Notify #ExplicitH this.explicitH;););this.GetExplicitH();),public fn SetExplicitW input = (if classOf input == UndefinedClass then (this.explicitW = input;this.StateChanged.Notify #ExplicitW this.explicitW;);else (if superClassOf input == Number do (input = input as Integer;if input < 0 do input = 0;this.explicitW = input;this.StateChanged.Notify #ExplicitW this.explicitW;););this.GetExplicitW();),public fn SetRect rect = (local rectX = rect.X as Integer;local rectY = rect.Y as Integer;local rectW = rect.W as Integer;local rectH = rect.H as Integer;if classOf rect == Box2 and this.isValidControl this.control do (if this.control.Hwnd.Count == 1 do (local hwnd1 = this.control.Hwnd[1];local x = copy rectX;local y = copy rectY;local w = copy rectW;local h = copy rectH;if this.defaultW >= 0 do w = copy this.defaultW;if this.defaultH >= 0 do h = copy this.defaultH;if this.isValidExplicitW() do w = copy this.explicitW;if this.isValidExplicitH() do h = copy this.explicitH;local hwnd1Rect = this.getClientRect hwnd1;if not this.resizableW do w = hwnd1Rect.W;if not this.resizableH do h = hwnd1Rect.H;if w < this.minW do w = copy this.minW;if h < this.minH do h = copy this.minH;if w < 0 do w = 0;if h < 0 do h = 0;if rectW > w and this.isFixedW() do (case this.alignmentH of ((#Left): ();(#Center): x += (rectW / 2) as Integer - (w / 2) as Integer;(#Right): x += rectW - w;default: ();););if rectH > h and this.isFixedH() do (case this.alignmentV of ((#Top): ();(#Center): y += (rectH / 2) as Integer - (h / 2) as Integer;(#Bottom): y += rectH - h;default: ();););Windows.SetWindowPos hwnd1 x y w h true;this.StateChanged.Notify #RectUpdated undefined;););this.GetRect();),public fn SetVisibility input = (if classOf input == BooleanClass and this.isValidControl this.control do (this.control.Visible = input;this.StateChanged.Notify #Visibility this.control.Visible;);this.GetVisibility();),private fn getClientRect hwnd = (local parentHwnd = (Windows.GetHwndData hwnd)[2];local rect = Windows.GetWindowPos hwnd;local pos = Windows.ScreenToClient parentHwnd rect.X rect.Y;Box2 (pos.X as Integer) (pos.Y as Integer) rect.W rect.H;),private fn isFixedH = (this.defaultH >= 0 or this.isValidExplicitH() or not this.resizableH;),private fn isFixedW = (this.defaultW >= 0 or this.isValidExplicitW() or not this.resizableW;),private fn isValidControl obj = (classOf obj == BitmapControl;),private fn isValidExplicitH = (classOf this.explicitH == Integer and this.explicitH >= 0;),private fn isValidExplicitW = (classOf this.explicitW == Integer and this.explicitW >= 0;),public fn StructName = #FlexBitmapControlWidgetStruct,public fn Dump indent:"" out:listener = (format "%FlexBitmapControlWidgetStruct\n" indent to:out;format "%  alignmentH:%\n" indent this.alignmentH to:out;format "%  alignmentV:%\n" indent this.alignmentV to:out;format "%  captionMargin:%\n" indent this.captionMargin to:out;format "%  captionPosition:%\n" indent this.captionPosition to:out;format "%  control:%\n" indent this.control to:out;format "%  defaultH:%\n" indent this.defaultH to:out;format "%  defaultW:%\n" indent this.defaultW to:out;format "%  explicitH:%\n" indent this.explicitH to:out;format "%  explicitW:%\n" indent this.explicitW to:out;format "%  minH:%\n" indent this.minH to:out;format "%  minW:%\n" indent this.minW to:out;format "%  resizableH:%\n" indent this.resizableH to:out;format "%  resizableW:%\n" indent this.resizableW to:out;ok;),public fn Equals obj = (local isEqualStructName = isStruct obj and isProperty obj #StructName and classOf obj.StructName == MAXScriptFunction and obj.StructName() == this.StructName();local isEqualProperties = isProperty obj #GetAlignmentH and classOf obj.GetAlignmentH == MAXScriptFunction and obj.GetAlignmentH() == this.GetAlignmentH() and isProperty obj #GetAlignmentV and classOf obj.GetAlignmentV == MAXScriptFunction and obj.GetAlignmentV() == this.GetAlignmentV() and isProperty obj #GetCaptionMargin and classOf obj.GetCaptionMargin == MAXScriptFunction and obj.GetCaptionMargin() == this.GetCaptionMargin() and isProperty obj #GetCaptionPosition and classOf obj.GetCaptionPosition == MAXScriptFunction and obj.GetCaptionPosition() == this.GetCaptionPosition() and isProperty obj #GetControl and classOf obj.GetControl == MAXScriptFunction and obj.GetControl() == this.GetControl() and isProperty obj #GetDefaultH and classOf obj.GetDefaultH == MAXScriptFunction and obj.GetDefaultH() == this.GetDefaultH() and isProperty obj #GetDefaultW and classOf obj.GetDefaultW == MAXScriptFunction and obj.GetDefaultW() == this.GetDefaultW() and isProperty obj #GetExplicitH and classOf obj.GetExplicitH == MAXScriptFunction and obj.GetExplicitH() == this.GetExplicitH() and isProperty obj #GetExplicitW and classOf obj.GetExplicitW == MAXScriptFunction and obj.GetExplicitW() == this.GetExplicitW() and isProperty obj #GetMinH and classOf obj.GetMinH == MAXScriptFunction and obj.GetMinH() == this.GetMinH() and isProperty obj #GetMinW and classOf obj.GetMinW == MAXScriptFunction and obj.GetMinW() == this.GetMinW() and isProperty obj #GetResizableH and classOf obj.GetResizableH == MAXScriptFunction and obj.GetResizableH() == this.GetResizableH() and isProperty obj #GetResizableW and classOf obj.GetResizableW == MAXScriptFunction and obj.GetResizableW() == this.GetResizableW();isEqualStructName and isEqualProperties;),public StateChanged,on Create do (this.StateChanged = ::std.ObservableStruct();this.SetControl this._CP1_;););::flexUIDefinitionPool[@"Model\Widget\FlexButtonControlWidget.ms"] = struct FlexButtonControlWidgetStruct (public _CP1_,private alignmentH = #Center,private alignmentV = #Center,private captionMargin = 3,private captionPosition = #Left,private control,private explicitH,private explicitW,private defaultH = -1,private defaultW = -1,private minH = 1,private minW = 1,private resizableH = true,private resizableW = true,public fn GetAlignmentH = (this.alignmentH;),public fn GetAlignmentV = (this.alignmentV;),public fn GetCaptionMargin = (this.captionMargin;),public fn GetCaptionPosition = (this.captionPosition;),public fn GetControl = (this.control;),public fn GetDefaultH = (this.defaultH;),public fn GetDefaultW = (this.defaultW;),public fn GetExplicitH = (this.explicitH;),public fn GetExplicitW = (this.explicitW;),public fn GetMinH = (this.minH;),public fn GetMinW = (this.minW;),public fn GetRect = (local rect = undefined;if this.isValidControl this.control do (local rectL = undefined;local rectT = undefined;local rectR = undefined;local rectB = undefined;for hwnd in this.control.Hwnd do (local hwndRect = this.getClientRect hwnd;local hwndL = hwndRect.X;local hwndT = hwndRect.Y;local hwndR = hwndL + hwndRect.W;local hwndB = hwndT + hwndRect.H;if classOf rectL != Integer do rectL = hwndL;if classOf rectT != Integer do rectT = hwndT;if classOf rectR != Integer do rectR = hwndR;if classOf rectB != Integer do rectB = hwndB;if rectL > hwndL do rectL = hwndL;if rectT > hwndT do rectT = hwndT;if rectR < hwndR do rectR = hwndR;if rectB < hwndB do rectB = hwndB;);if classOf rectL == Integer and classOf rectT == Integer and classOf rectR == Integer and classOf rectB == Integer do (local x = rectL;local y = rectT;local w = rectR - rectL;local h = rectB - rectT;rect = Box2 x y w h;););rect;),public fn GetResizableH = (this.resizableH;),public fn GetResizableW = (this.resizableW;),public fn GetVisibility = (local isVisible = undefined;if this.isValidControl this.control do (isVisible = this.control.Visible;);isVisible;),public fn SetAlignmentH input = (local validValues = #(#Left, #Center, #Right);if findItem validValues input > 0 do (this.alignmentH = input;this.StateChanged.Notify #AlignmentH this.alignmentH;);this.GetAlignmentH();),public fn SetAlignmentV input = (local validValues = #(#Top, #Center, #Bottom);if findItem validValues input > 0 do (this.alignmentV = input;this.StateChanged.Notify #AlignmentV this.alignmentV;);this.GetAlignmentV();),public fn SetCaptionMargin input = (if superClassOf input == Number do (input = input as Integer;if input < 0 do input = 0;this.captionMargin = input;this.StateChanged.Notify #CaptionMargin this.captionMargin;);this.GetCaptionMargin();),public fn SetCaptionPosition input = (local validValues = #(#Left, #Top);if findItem validValues input > 0 do (this.captionPosition = input;this.StateChanged.Notify #CaptionPosition this.captionPosition;);this.GetCaptionPosition();),public fn SetControl obj = (if this.isValidControl obj do (this.control = obj;this.StateChanged.Notify #Control this.control;);this.GetControl();),public fn SetExplicitH input = (if classOf input == UndefinedClass then (this.explicitH = input;this.StateChanged.Notify #ExplicitH this.explicitH;);else (if superClassOf input == Number do (input = input as Integer;if input < 0 do input = 0;this.explicitH = input;this.StateChanged.Notify #ExplicitH this.explicitH;););this.GetExplicitH();),public fn SetExplicitW input = (if classOf input == UndefinedClass then (this.explicitW = input;this.StateChanged.Notify #ExplicitW this.explicitW;);else (if superClassOf input == Number do (input = input as Integer;if input < 0 do input = 0;this.explicitW = input;this.StateChanged.Notify #ExplicitW this.explicitW;););this.GetExplicitW();),public fn SetRect rect = (local rectX = rect.X as Integer;local rectY = rect.Y as Integer;local rectW = rect.W as Integer;local rectH = rect.H as Integer;if classOf rect == Box2 and this.isValidControl this.control do (if this.control.Hwnd.Count == 1 do (local hwnd1 = this.control.Hwnd[1];local x = copy rectX;local y = copy rectY;local w = copy rectW;local h = copy rectH;if this.defaultW >= 0 do w = copy this.defaultW;if this.defaultH >= 0 do h = copy this.defaultH;if this.isValidExplicitW() do w = copy this.explicitW;if this.isValidExplicitH() do h = copy this.explicitH;local hwnd1Rect = this.getClientRect hwnd1;if not this.resizableW do w = hwnd1Rect.W;if not this.resizableH do h = hwnd1Rect.H;if w < this.minW do w = copy this.minW;if h < this.minH do h = copy this.minH;if w < 0 do w = 0;if h < 0 do h = 0;if rectW > w and this.isFixedW() do (case this.alignmentH of ((#Left): ();(#Center): x += (rectW / 2) as Integer - (w / 2) as Integer;(#Right): x += rectW - w;default: ();););if rectH > h and this.isFixedH() do (case this.alignmentV of ((#Top): ();(#Center): y += (rectH / 2) as Integer - (h / 2) as Integer;(#Bottom): y += rectH - h;default: ();););Windows.SetWindowPos hwnd1 x y w h true;this.StateChanged.Notify #RectUpdated undefined;););this.GetRect();),public fn SetVisibility input = (if classOf input == BooleanClass and this.isValidControl this.control do (this.control.Visible = input;this.StateChanged.Notify #Visibility this.control.Visible;);this.GetVisibility();),private fn getClientRect hwnd = (local parentHwnd = (Windows.GetHwndData hwnd)[2];local rect = Windows.GetWindowPos hwnd;local pos = Windows.ScreenToClient parentHwnd rect.X rect.Y;Box2 (pos.X as Integer) (pos.Y as Integer) rect.W rect.H;),private fn isFixedH = (this.defaultH >= 0 or this.isValidExplicitH() or not this.resizableH;),private fn isFixedW = (this.defaultW >= 0 or this.isValidExplicitW() or not this.resizableW;),private fn isValidControl obj = (classOf obj == ButtonControl;),private fn isValidExplicitH = (classOf this.explicitH == Integer and this.explicitH >= 0;),private fn isValidExplicitW = (classOf this.explicitW == Integer and this.explicitW >= 0;),public fn StructName = #FlexButtonControlWidgetStruct,public fn Dump indent:"" out:listener = (format "%FlexButtonControlWidgetStruct\n" indent to:out;format "%  alignmentH:%\n" indent this.alignmentH to:out;format "%  alignmentV:%\n" indent this.alignmentV to:out;format "%  captionMargin:%\n" indent this.captionMargin to:out;format "%  captionPosition:%\n" indent this.captionPosition to:out;format "%  control:%\n" indent this.control to:out;format "%  defaultH:%\n" indent this.defaultH to:out;format "%  defaultW:%\n" indent this.defaultW to:out;format "%  explicitH:%\n" indent this.explicitH to:out;format "%  explicitW:%\n" indent this.explicitW to:out;format "%  minH:%\n" indent this.minH to:out;format "%  minW:%\n" indent this.minW to:out;format "%  resizableH:%\n" indent this.resizableH to:out;format "%  resizableW:%\n" indent this.resizableW to:out;ok;),public fn Equals obj = (local isEqualStructName = isStruct obj and isProperty obj #StructName and classOf obj.StructName == MAXScriptFunction and obj.StructName() == this.StructName();local isEqualProperties = isProperty obj #GetAlignmentH and classOf obj.GetAlignmentH == MAXScriptFunction and obj.GetAlignmentH() == this.GetAlignmentH() and isProperty obj #GetAlignmentV and classOf obj.GetAlignmentV == MAXScriptFunction and obj.GetAlignmentV() == this.GetAlignmentV() and isProperty obj #GetCaptionMargin and classOf obj.GetCaptionMargin == MAXScriptFunction and obj.GetCaptionMargin() == this.GetCaptionMargin() and isProperty obj #GetCaptionPosition and classOf obj.GetCaptionPosition == MAXScriptFunction and obj.GetCaptionPosition() == this.GetCaptionPosition() and isProperty obj #GetControl and classOf obj.GetControl == MAXScriptFunction and obj.GetControl() == this.GetControl() and isProperty obj #GetDefaultH and classOf obj.GetDefaultH == MAXScriptFunction and obj.GetDefaultH() == this.GetDefaultH() and isProperty obj #GetDefaultW and classOf obj.GetDefaultW == MAXScriptFunction and obj.GetDefaultW() == this.GetDefaultW() and isProperty obj #GetExplicitH and classOf obj.GetExplicitH == MAXScriptFunction and obj.GetExplicitH() == this.GetExplicitH() and isProperty obj #GetExplicitW and classOf obj.GetExplicitW == MAXScriptFunction and obj.GetExplicitW() == this.GetExplicitW() and isProperty obj #GetMinH and classOf obj.GetMinH == MAXScriptFunction and obj.GetMinH() == this.GetMinH() and isProperty obj #GetMinW and classOf obj.GetMinW == MAXScriptFunction and obj.GetMinW() == this.GetMinW() and isProperty obj #GetResizableH and classOf obj.GetResizableH == MAXScriptFunction and obj.GetResizableH() == this.GetResizableH() and isProperty obj #GetResizableW and classOf obj.GetResizableW == MAXScriptFunction and obj.GetResizableW() == this.GetResizableW();isEqualStructName and isEqualProperties;),public StateChanged,on Create do (this.StateChanged = ::std.ObservableStruct();this.SetControl this._CP1_;););::flexUIDefinitionPool[@"Model\Widget\FlexCheckBoxControlWidget.ms"] = struct FlexCheckBoxControlWidgetStruct (public _CP1_,private alignmentH = #Center,private alignmentV = #Center,private captionMargin = 3,private captionPosition = #Left,private control,private explicitH,private explicitW,private defaultH = -1,private defaultW = -1,private minH = 15,private minW = 24,private resizableH = false,private resizableW = false,public fn GetAlignmentH = (this.alignmentH;),public fn GetAlignmentV = (this.alignmentV;),public fn GetCaptionMargin = (this.captionMargin;),public fn GetCaptionPosition = (this.captionPosition;),public fn GetControl = (this.control;),public fn GetDefaultH = (this.defaultH;),public fn GetDefaultW = (this.defaultW;),public fn GetExplicitH = (this.explicitH;),public fn GetExplicitW = (this.explicitW;),public fn GetMinH = (this.minH;),public fn GetMinW = (this.minW;),public fn GetRect = (local rect = undefined;if this.isValidControl this.control do (local rectL = undefined;local rectT = undefined;local rectR = undefined;local rectB = undefined;for hwnd in this.control.Hwnd do (local hwndRect = this.getClientRect hwnd;local hwndL = hwndRect.X;local hwndT = hwndRect.Y;local hwndR = hwndL + hwndRect.W;local hwndB = hwndT + hwndRect.H;if classOf rectL != Integer do rectL = hwndL;if classOf rectT != Integer do rectT = hwndT;if classOf rectR != Integer do rectR = hwndR;if classOf rectB != Integer do rectB = hwndB;if rectL > hwndL do rectL = hwndL;if rectT > hwndT do rectT = hwndT;if rectR < hwndR do rectR = hwndR;if rectB < hwndB do rectB = hwndB;);if classOf rectL == Integer and classOf rectT == Integer and classOf rectR == Integer and classOf rectB == Integer do (local x = rectL;local y = rectT;local w = rectR - rectL;local h = rectB - rectT;rect = Box2 x y w h;););rect;),public fn GetResizableH = (this.resizableH;),public fn GetResizableW = (this.resizableW;),public fn GetVisibility = (local isVisible = undefined;if this.isValidControl this.control do (isVisible = this.control.Visible;);isVisible;),public fn SetAlignmentH input = (local validValues = #(#Left, #Center, #Right);if findItem validValues input > 0 do (this.alignmentH = input;this.StateChanged.Notify #AlignmentH this.alignmentH;);this.GetAlignmentH();),public fn SetAlignmentV input = (local validValues = #(#Top, #Center, #Bottom);if findItem validValues input > 0 do (this.alignmentV = input;this.StateChanged.Notify #AlignmentV this.alignmentV;);this.GetAlignmentV();),public fn SetCaptionMargin input = (if superClassOf input == Number do (input = input as Integer;if input < 0 do input = 0;this.captionMargin = input;this.StateChanged.Notify #CaptionMargin this.captionMargin;);this.GetCaptionMargin();),public fn SetCaptionPosition input = (local validValues = #(#Left, #Top);if findItem validValues input > 0 do (this.captionPosition = input;this.StateChanged.Notify #CaptionPosition this.captionPosition;);this.GetCaptionPosition();),public fn SetControl obj = (if this.isValidControl obj do (this.control = obj;this.StateChanged.Notify #Control this.control;);this.GetControl();),public fn SetExplicitH input = (if classOf input == UndefinedClass then (this.explicitH = input;this.StateChanged.Notify #ExplicitH this.explicitH;);else (if superClassOf input == Number do (input = input as Integer;if input < 0 do input = 0;this.explicitH = input;this.StateChanged.Notify #ExplicitH this.explicitH;););this.GetExplicitH();),public fn SetExplicitW input = (if classOf input == UndefinedClass then (this.explicitW = input;this.StateChanged.Notify #ExplicitW this.explicitW;);else (if superClassOf input == Number do (input = input as Integer;if input < 0 do input = 0;this.explicitW = input;this.StateChanged.Notify #ExplicitW this.explicitW;););this.GetExplicitW();),public fn SetRect rect = (local rectX = rect.X as Integer;local rectY = rect.Y as Integer;local rectW = rect.W as Integer;local rectH = rect.H as Integer;if classOf rect == Box2 and this.isValidControl this.control do (if this.control.Hwnd.Count == 1 do (local hwnd1 = this.control.Hwnd[1];local x = copy rectX;local y = copy rectY;local w = copy rectW;local h = copy rectH;if this.defaultW >= 0 do w = copy this.defaultW;if this.defaultH >= 0 do h = copy this.defaultH;if this.isValidExplicitW() do w = copy this.explicitW;if this.isValidExplicitH() do h = copy this.explicitH;local hwnd1Rect = this.getClientRect hwnd1;if not this.resizableW do w = hwnd1Rect.W;if not this.resizableH do h = hwnd1Rect.H;if w < this.minW do w = copy this.minW;if h < this.minH do h = copy this.minH;if w < 0 do w = 0;if h < 0 do h = 0;if rectW > w and this.isFixedW() do (case this.alignmentH of ((#Left): ();(#Center): x += (rectW / 2) as Integer - (w / 2) as Integer;(#Right): x += rectW - w;default: ();););if rectH > h and this.isFixedH() do (case this.alignmentV of ((#Top): ();(#Center): y += (rectH / 2) as Integer - (h / 2) as Integer;(#Bottom): y += rectH - h;default: ();););Windows.SetWindowPos hwnd1 x y w h true;this.StateChanged.Notify #RectUpdated undefined;););this.GetRect();),public fn SetVisibility input = (if classOf input == BooleanClass and this.isValidControl this.control do (this.control.Visible = input;this.StateChanged.Notify #Visibility this.control.Visible;);this.GetVisibility();),private fn getClientRect hwnd = (local parentHwnd = (Windows.GetHwndData hwnd)[2];local rect = Windows.GetWindowPos hwnd;local pos = Windows.ScreenToClient parentHwnd rect.X rect.Y;Box2 (pos.X as Integer) (pos.Y as Integer) rect.W rect.H;),private fn isFixedH = (this.defaultH >= 0 or this.isValidExplicitH() or not this.resizableH;),private fn isFixedW = (this.defaultW >= 0 or this.isValidExplicitW() or not this.resizableW;),private fn isValidControl obj = (classOf obj == CheckBoxControl;),private fn isValidExplicitH = (classOf this.explicitH == Integer and this.explicitH >= 0;),private fn isValidExplicitW = (classOf this.explicitW == Integer and this.explicitW >= 0;),public fn StructName = #FlexCheckBoxControlWidgetStruct,public fn Dump indent:"" out:listener = (format "%FlexCheckBoxControlWidgetStruct\n" indent to:out;format "%  alignmentH:%\n" indent this.alignmentH to:out;format "%  alignmentV:%\n" indent this.alignmentV to:out;format "%  captionMargin:%\n" indent this.captionMargin to:out;format "%  captionPosition:%\n" indent this.captionPosition to:out;format "%  control:%\n" indent this.control to:out;format "%  defaultH:%\n" indent this.defaultH to:out;format "%  defaultW:%\n" indent this.defaultW to:out;format "%  explicitH:%\n" indent this.explicitH to:out;format "%  explicitW:%\n" indent this.explicitW to:out;format "%  minH:%\n" indent this.minH to:out;format "%  minW:%\n" indent this.minW to:out;format "%  resizableH:%\n" indent this.resizableH to:out;format "%  resizableW:%\n" indent this.resizableW to:out;ok;),public fn Equals obj = (local isEqualStructName = isStruct obj and isProperty obj #StructName and classOf obj.StructName == MAXScriptFunction and obj.StructName() == this.StructName();local isEqualProperties = isProperty obj #GetAlignmentH and classOf obj.GetAlignmentH == MAXScriptFunction and obj.GetAlignmentH() == this.GetAlignmentH() and isProperty obj #GetAlignmentV and classOf obj.GetAlignmentV == MAXScriptFunction and obj.GetAlignmentV() == this.GetAlignmentV() and isProperty obj #GetCaptionMargin and classOf obj.GetCaptionMargin == MAXScriptFunction and obj.GetCaptionMargin() == this.GetCaptionMargin() and isProperty obj #GetCaptionPosition and classOf obj.GetCaptionPosition == MAXScriptFunction and obj.GetCaptionPosition() == this.GetCaptionPosition() and isProperty obj #GetControl and classOf obj.GetControl == MAXScriptFunction and obj.GetControl() == this.GetControl() and isProperty obj #GetDefaultH and classOf obj.GetDefaultH == MAXScriptFunction and obj.GetDefaultH() == this.GetDefaultH() and isProperty obj #GetDefaultW and classOf obj.GetDefaultW == MAXScriptFunction and obj.GetDefaultW() == this.GetDefaultW() and isProperty obj #GetExplicitH and classOf obj.GetExplicitH == MAXScriptFunction and obj.GetExplicitH() == this.GetExplicitH() and isProperty obj #GetExplicitW and classOf obj.GetExplicitW == MAXScriptFunction and obj.GetExplicitW() == this.GetExplicitW() and isProperty obj #GetMinH and classOf obj.GetMinH == MAXScriptFunction and obj.GetMinH() == this.GetMinH() and isProperty obj #GetMinW and classOf obj.GetMinW == MAXScriptFunction and obj.GetMinW() == this.GetMinW() and isProperty obj #GetResizableH and classOf obj.GetResizableH == MAXScriptFunction and obj.GetResizableH() == this.GetResizableH() and isProperty obj #GetResizableW and classOf obj.GetResizableW == MAXScriptFunction and obj.GetResizableW() == this.GetResizableW();isEqualStructName and isEqualProperties;),public StateChanged,on Create do (this.StateChanged = ::std.ObservableStruct();this.SetControl this._CP1_;););::flexUIDefinitionPool[@"Model\Widget\FlexCheckButtonControlWidget.ms"] = struct FlexCheckButtonControlWidgetStruct (public _CP1_,private alignmentH = #Center,private alignmentV = #Center,private captionMargin = 3,private captionPosition = #Left,private control,private explicitH,private explicitW,private defaultH = -1,private defaultW = -1,private minH = 1,private minW = 1,private resizableH = true,private resizableW = true,public fn GetAlignmentH = (this.alignmentH;),public fn GetAlignmentV = (this.alignmentV;),public fn GetCaptionMargin = (this.captionMargin;),public fn GetCaptionPosition = (this.captionPosition;),public fn GetControl = (this.control;),public fn GetDefaultH = (this.defaultH;),public fn GetDefaultW = (this.defaultW;),public fn GetExplicitH = (this.explicitH;),public fn GetExplicitW = (this.explicitW;),public fn GetMinH = (this.minH;),public fn GetMinW = (this.minW;),public fn GetRect = (local rect = undefined;if this.isValidControl this.control do (local rectL = undefined;local rectT = undefined;local rectR = undefined;local rectB = undefined;for hwnd in this.control.Hwnd do (local hwndRect = this.getClientRect hwnd;local hwndL = hwndRect.X;local hwndT = hwndRect.Y;local hwndR = hwndL + hwndRect.W;local hwndB = hwndT + hwndRect.H;if classOf rectL != Integer do rectL = hwndL;if classOf rectT != Integer do rectT = hwndT;if classOf rectR != Integer do rectR = hwndR;if classOf rectB != Integer do rectB = hwndB;if rectL > hwndL do rectL = hwndL;if rectT > hwndT do rectT = hwndT;if rectR < hwndR do rectR = hwndR;if rectB < hwndB do rectB = hwndB;);if classOf rectL == Integer and classOf rectT == Integer and classOf rectR == Integer and classOf rectB == Integer do (local x = rectL;local y = rectT;local w = rectR - rectL;local h = rectB - rectT;rect = Box2 x y w h;););rect;),public fn GetResizableH = (this.resizableH;),public fn GetResizableW = (this.resizableW;),public fn GetVisibility = (local isVisible = undefined;if this.isValidControl this.control do (isVisible = this.control.Visible;);isVisible;),public fn SetAlignmentH input = (local validValues = #(#Left, #Center, #Right);if findItem validValues input > 0 do (this.alignmentH = input;this.StateChanged.Notify #AlignmentH this.alignmentH;);this.GetAlignmentH();),public fn SetAlignmentV input = (local validValues = #(#Top, #Center, #Bottom);if findItem validValues input > 0 do (this.alignmentV = input;this.StateChanged.Notify #AlignmentV this.alignmentV;);this.GetAlignmentV();),public fn SetCaptionMargin input = (if superClassOf input == Number do (input = input as Integer;if input < 0 do input = 0;this.captionMargin = input;this.StateChanged.Notify #CaptionMargin this.captionMargin;);this.GetCaptionMargin();),public fn SetCaptionPosition input = (local validValues = #(#Left, #Top);if findItem validValues input > 0 do (this.captionPosition = input;this.StateChanged.Notify #CaptionPosition this.captionPosition;);this.GetCaptionPosition();),public fn SetControl obj = (if this.isValidControl obj do (this.control = obj;this.StateChanged.Notify #Control this.control;);this.GetControl();),public fn SetExplicitH input = (if classOf input == UndefinedClass then (this.explicitH = input;this.StateChanged.Notify #ExplicitH this.explicitH;);else (if superClassOf input == Number do (input = input as Integer;if input < 0 do input = 0;this.explicitH = input;this.StateChanged.Notify #ExplicitH this.explicitH;););this.GetExplicitH();),public fn SetExplicitW input = (if classOf input == UndefinedClass then (this.explicitW = input;this.StateChanged.Notify #ExplicitW this.explicitW;);else (if superClassOf input == Number do (input = input as Integer;if input < 0 do input = 0;this.explicitW = input;this.StateChanged.Notify #ExplicitW this.explicitW;););this.GetExplicitW();),public fn SetRect rect = (local rectX = rect.X as Integer;local rectY = rect.Y as Integer;local rectW = rect.W as Integer;local rectH = rect.H as Integer;if classOf rect == Box2 and this.isValidControl this.control do (if this.control.Hwnd.Count == 1 do (local hwnd1 = this.control.Hwnd[1];local x = copy rectX;local y = copy rectY;local w = copy rectW;local h = copy rectH;if this.defaultW >= 0 do w = copy this.defaultW;if this.defaultH >= 0 do h = copy this.defaultH;if this.isValidExplicitW() do w = copy this.explicitW;if this.isValidExplicitH() do h = copy this.explicitH;local hwnd1Rect = this.getClientRect hwnd1;if not this.resizableW do w = hwnd1Rect.W;if not this.resizableH do h = hwnd1Rect.H;if w < this.minW do w = copy this.minW;if h < this.minH do h = copy this.minH;if w < 0 do w = 0;if h < 0 do h = 0;if rectW > w and this.isFixedW() do (case this.alignmentH of ((#Left): ();(#Center): x += (rectW / 2) as Integer - (w / 2) as Integer;(#Right): x += rectW - w;default: ();););if rectH > h and this.isFixedH() do (case this.alignmentV of ((#Top): ();(#Center): y += (rectH / 2) as Integer - (h / 2) as Integer;(#Bottom): y += rectH - h;default: ();););Windows.SetWindowPos hwnd1 x y w h true;this.StateChanged.Notify #RectUpdated undefined;););this.GetRect();),public fn SetVisibility input = (if classOf input == BooleanClass and this.isValidControl this.control do (this.control.Visible = input;this.StateChanged.Notify #Visibility this.control.Visible;);this.GetVisibility();),private fn getClientRect hwnd = (local parentHwnd = (Windows.GetHwndData hwnd)[2];local rect = Windows.GetWindowPos hwnd;local pos = Windows.ScreenToClient parentHwnd rect.X rect.Y;Box2 (pos.X as Integer) (pos.Y as Integer) rect.W rect.H;),private fn isFixedH = (this.defaultH >= 0 or this.isValidExplicitH() or not this.resizableH;),private fn isFixedW = (this.defaultW >= 0 or this.isValidExplicitW() or not this.resizableW;),private fn isValidControl obj = (classOf obj == CheckButtonControl;),private fn isValidExplicitH = (classOf this.explicitH == Integer and this.explicitH >= 0;),private fn isValidExplicitW = (classOf this.explicitW == Integer and this.explicitW >= 0;),public fn StructName = #FlexCheckButtonControlWidgetStruct,public fn Dump indent:"" out:listener = (format "%FlexCheckButtonControlWidgetStruct\n" indent to:out;format "%  alignmentH:%\n" indent this.alignmentH to:out;format "%  alignmentV:%\n" indent this.alignmentV to:out;format "%  captionMargin:%\n" indent this.captionMargin to:out;format "%  captionPosition:%\n" indent this.captionPosition to:out;format "%  control:%\n" indent this.control to:out;format "%  defaultH:%\n" indent this.defaultH to:out;format "%  defaultW:%\n" indent this.defaultW to:out;format "%  explicitH:%\n" indent this.explicitH to:out;format "%  explicitW:%\n" indent this.explicitW to:out;format "%  minH:%\n" indent this.minH to:out;format "%  minW:%\n" indent this.minW to:out;format "%  resizableH:%\n" indent this.resizableH to:out;format "%  resizableW:%\n" indent this.resizableW to:out;ok;),public fn Equals obj = (local isEqualStructName = isStruct obj and isProperty obj #StructName and classOf obj.StructName == MAXScriptFunction and obj.StructName() == this.StructName();local isEqualProperties = isProperty obj #GetAlignmentH and classOf obj.GetAlignmentH == MAXScriptFunction and obj.GetAlignmentH() == this.GetAlignmentH() and isProperty obj #GetAlignmentV and classOf obj.GetAlignmentV == MAXScriptFunction and obj.GetAlignmentV() == this.GetAlignmentV() and isProperty obj #GetCaptionMargin and classOf obj.GetCaptionMargin == MAXScriptFunction and obj.GetCaptionMargin() == this.GetCaptionMargin() and isProperty obj #GetCaptionPosition and classOf obj.GetCaptionPosition == MAXScriptFunction and obj.GetCaptionPosition() == this.GetCaptionPosition() and isProperty obj #GetControl and classOf obj.GetControl == MAXScriptFunction and obj.GetControl() == this.GetControl() and isProperty obj #GetDefaultH and classOf obj.GetDefaultH == MAXScriptFunction and obj.GetDefaultH() == this.GetDefaultH() and isProperty obj #GetDefaultW and classOf obj.GetDefaultW == MAXScriptFunction and obj.GetDefaultW() == this.GetDefaultW() and isProperty obj #GetExplicitH and classOf obj.GetExplicitH == MAXScriptFunction and obj.GetExplicitH() == this.GetExplicitH() and isProperty obj #GetExplicitW and classOf obj.GetExplicitW == MAXScriptFunction and obj.GetExplicitW() == this.GetExplicitW() and isProperty obj #GetMinH and classOf obj.GetMinH == MAXScriptFunction and obj.GetMinH() == this.GetMinH() and isProperty obj #GetMinW and classOf obj.GetMinW == MAXScriptFunction and obj.GetMinW() == this.GetMinW() and isProperty obj #GetResizableH and classOf obj.GetResizableH == MAXScriptFunction and obj.GetResizableH() == this.GetResizableH() and isProperty obj #GetResizableW and classOf obj.GetResizableW == MAXScriptFunction and obj.GetResizableW() == this.GetResizableW();isEqualStructName and isEqualProperties;),public StateChanged,on Create do (this.StateChanged = ::std.ObservableStruct();this.SetControl this._CP1_;););::flexUIDefinitionPool[@"Model\Widget\FlexColorPickerControlWidget.ms"] = struct FlexColorPickerControlWidgetStruct (public _CP1_,private alignmentH = #Center,private alignmentV = #Center,private captionMargin = 3,private captionPosition = #Left,private control,private explicitH,private explicitW,private defaultH = 20,private defaultW = -1,private minH = 5,private minW = 5,private resizableH = true,private resizableW = true,public fn GetAlignmentH = (this.alignmentH;),public fn GetAlignmentV = (this.alignmentV;),public fn GetCaptionMargin = (this.captionMargin;),public fn GetCaptionPosition = (this.captionPosition;),public fn GetControl = (this.control;),public fn GetDefaultH = (this.defaultH;),public fn GetDefaultW = (this.defaultW;),public fn GetExplicitH = (this.explicitH;),public fn GetExplicitW = (this.explicitW;),public fn GetMinH = (this.minH;),public fn GetMinW = (this.minW;),public fn GetRect = (local rect = undefined;if this.isValidControl this.control do (local rectL = undefined;local rectT = undefined;local rectR = undefined;local rectB = undefined;for hwnd in this.control.Hwnd do (local hwndRect = this.getClientRect hwnd;local hwndL = hwndRect.X;local hwndT = hwndRect.Y;local hwndR = hwndL + hwndRect.W;local hwndB = hwndT + hwndRect.H;if classOf rectL != Integer do rectL = hwndL;if classOf rectT != Integer do rectT = hwndT;if classOf rectR != Integer do rectR = hwndR;if classOf rectB != Integer do rectB = hwndB;if rectL > hwndL do rectL = hwndL;if rectT > hwndT do rectT = hwndT;if rectR < hwndR do rectR = hwndR;if rectB < hwndB do rectB = hwndB;);if classOf rectL == Integer and classOf rectT == Integer and classOf rectR == Integer and classOf rectB == Integer do (local x = rectL;local y = rectT;local w = rectR - rectL;local h = rectB - rectT;rect = Box2 x y w h;););rect;),public fn GetResizableH = (this.resizableH;),public fn GetResizableW = (this.resizableW;),public fn GetVisibility = (local isVisible = undefined;if this.isValidControl this.control do (isVisible = this.control.Visible;);isVisible;),public fn SetAlignmentH input = (local validValues = #(#Left, #Center, #Right);if findItem validValues input > 0 do (this.alignmentH = input;this.StateChanged.Notify #AlignmentH this.alignmentH;);this.GetAlignmentH();),public fn SetAlignmentV input = (local validValues = #(#Top, #Center, #Bottom);if findItem validValues input > 0 do (this.alignmentV = input;this.StateChanged.Notify #AlignmentV this.alignmentV;);this.GetAlignmentV();),public fn SetCaptionMargin input = (if superClassOf input == Number do (input = input as Integer;if input < 0 do input = 0;this.captionMargin = input;this.StateChanged.Notify #CaptionMargin this.captionMargin;);this.GetCaptionMargin();),public fn SetCaptionPosition input = (local validValues = #(#Left, #Top);if findItem validValues input > 0 do (this.captionPosition = input;this.StateChanged.Notify #CaptionPosition this.captionPosition;);this.GetCaptionPosition();),public fn SetControl obj = (if this.isValidControl obj do (this.control = obj;this.StateChanged.Notify #Control this.control;);this.GetControl();),public fn SetExplicitH input = (if classOf input == UndefinedClass then (this.explicitH = input;this.StateChanged.Notify #ExplicitH this.explicitH;);else (if superClassOf input == Number do (input = input as Integer;if input < 0 do input = 0;this.explicitH = input;this.StateChanged.Notify #ExplicitH this.explicitH;););this.GetExplicitH();),public fn SetExplicitW input = (if classOf input == UndefinedClass then (this.explicitW = input;this.StateChanged.Notify #ExplicitW this.explicitW;);else (if superClassOf input == Number do (input = input as Integer;if input < 0 do input = 0;this.explicitW = input;this.StateChanged.Notify #ExplicitW this.explicitW;););this.GetExplicitW();),public fn SetRect rect = (local rectX = rect.X as Integer;local rectY = rect.Y as Integer;local rectW = rect.W as Integer;local rectH = rect.H as Integer;if classOf rect == Box2 and this.isValidControl this.control do (if this.control.Hwnd.Count == 2 do (local hwnd1 = this.control.Hwnd[1];local hwnd2 = this.control.Hwnd[2];local captionSize = getTextExtent this.control.Caption;local captionW = captionSize.X as Integer;local captionH = captionSize.Y as Integer;local captionOffset = 0;if captionW > 0 do (case this.captionPosition of ((#Left): captionOffset = captionW + this.captionMargin;(#Top): captionOffset = captionH + this.captionMargin;default: ();););local x = copy rectX;local y = copy rectY;local w = copy rectW;local h = copy rectH;case this.captionPosition of ((#Left): w -= captionOffset;(#Top): h -= captionOffset;default: (););if this.defaultW >= 0 do w = copy this.defaultW;if this.defaultH >= 0 do h = copy this.defaultH;if this.isValidExplicitW() do w = copy this.explicitW;if this.isValidExplicitH() do h = copy this.explicitH;local hwnd1Rect = this.getClientRect hwnd1;if not this.resizableW do w = hwnd1Rect.W;if not this.resizableH do h = hwnd1Rect.H;if w < this.minW do w = copy this.minW;if h < this.minH do h = copy this.minH;if w < 0 do w = 0;if h < 0 do h = 0;local rectMinW = copy w;if this.captionPosition == #Left do rectMinW += captionOffset;if rectW > rectMinW and this.isFixedW() do (case this.alignmentH of ((#Left): ();(#Center): (case this.captionPosition of ((#Left): x += (rectW / 2) as Integer - ((w + captionOffset) / 2) as Integer;(#Top): x += (rectW / 2) as Integer - (w / 2) as Integer;default: ();););(#Right): (x += rectW - w;if this.captionPosition == #Left do x -= captionOffset;);default: ();););local rectMinH = copy h;if this.captionPosition == #Top do rectMinH += captionOffset;if rectH > rectMinH and this.isFixedH() do (case this.alignmentV of ((#Top): ();(#Center): (case this.captionPosition of ((#Left): y += (rectH / 2) as Integer - (h / 2) as Integer;(#Top): y += (rectH / 2) as Integer - ((h + captionOffset) / 2) as Integer;default: ();););(#Bottom): (y += rectH - h;if this.captionPosition == #Top do y -= captionOffset;);default: ();););case this.captionPosition of ((#Left): x += captionOffset;(#Top): y += captionOffset;default: (););Windows.SetWindowPos hwnd1 x y w h true;if captionW == 0 then (Windows.SetWindowPos hwnd2 x y 1 1 true;);else (local captionX = copy x;case this.captionPosition of ((#Left): captionX -= captionOffset;(#Top): ();default: (););local captionY = copy y;case this.captionPosition of ((#Left): captionY += (h / 2) as Integer - (captionH / 2) as Integer;(#Top): captionY -= captionOffset;default: (););Windows.SetWindowPos hwnd2 captionX captionY captionW captionH true;);this.StateChanged.Notify #RectUpdated undefined;););this.GetRect();),public fn SetVisibility input = (if classOf input == BooleanClass and this.isValidControl this.control do (this.control.Visible = input;this.StateChanged.Notify #Visibility this.control.Visible;);this.GetVisibility();),private fn getClientRect hwnd = (local parentHwnd = (Windows.GetHwndData hwnd)[2];local rect = Windows.GetWindowPos hwnd;local pos = Windows.ScreenToClient parentHwnd rect.X rect.Y;Box2 (pos.X as Integer) (pos.Y as Integer) rect.W rect.H;),private fn isFixedH = (this.defaultH >= 0 or this.isValidExplicitH() or not this.resizableH;),private fn isFixedW = (this.defaultW >= 0 or this.isValidExplicitW() or not this.resizableW;),private fn isValidControl obj = (classOf obj == ColorPickerControl;),private fn isValidExplicitH = (classOf this.explicitH == Integer and this.explicitH >= 0;),private fn isValidExplicitW = (classOf this.explicitW == Integer and this.explicitW >= 0;),public fn StructName = #FlexColorPickerControlWidgetStruct,public fn Dump indent:"" out:listener = (format "%FlexColorPickerControlWidgetStruct\n" indent to:out;format "%  alignmentH:%\n" indent this.alignmentH to:out;format "%  alignmentV:%\n" indent this.alignmentV to:out;format "%  captionMargin:%\n" indent this.captionMargin to:out;format "%  captionPosition:%\n" indent this.captionPosition to:out;format "%  control:%\n" indent this.control to:out;format "%  defaultH:%\n" indent this.defaultH to:out;format "%  defaultW:%\n" indent this.defaultW to:out;format "%  explicitH:%\n" indent this.explicitH to:out;format "%  explicitW:%\n" indent this.explicitW to:out;format "%  minH:%\n" indent this.minH to:out;format "%  minW:%\n" indent this.minW to:out;format "%  resizableH:%\n" indent this.resizableH to:out;format "%  resizableW:%\n" indent this.resizableW to:out;ok;),public fn Equals obj = (local isEqualStructName = isStruct obj and isProperty obj #StructName and classOf obj.StructName == MAXScriptFunction and obj.StructName() == this.StructName();local isEqualProperties = isProperty obj #GetAlignmentH and classOf obj.GetAlignmentH == MAXScriptFunction and obj.GetAlignmentH() == this.GetAlignmentH() and isProperty obj #GetAlignmentV and classOf obj.GetAlignmentV == MAXScriptFunction and obj.GetAlignmentV() == this.GetAlignmentV() and isProperty obj #GetCaptionMargin and classOf obj.GetCaptionMargin == MAXScriptFunction and obj.GetCaptionMargin() == this.GetCaptionMargin() and isProperty obj #GetCaptionPosition and classOf obj.GetCaptionPosition == MAXScriptFunction and obj.GetCaptionPosition() == this.GetCaptionPosition() and isProperty obj #GetControl and classOf obj.GetControl == MAXScriptFunction and obj.GetControl() == this.GetControl() and isProperty obj #GetDefaultH and classOf obj.GetDefaultH == MAXScriptFunction and obj.GetDefaultH() == this.GetDefaultH() and isProperty obj #GetDefaultW and classOf obj.GetDefaultW == MAXScriptFunction and obj.GetDefaultW() == this.GetDefaultW() and isProperty obj #GetExplicitH and classOf obj.GetExplicitH == MAXScriptFunction and obj.GetExplicitH() == this.GetExplicitH() and isProperty obj #GetExplicitW and classOf obj.GetExplicitW == MAXScriptFunction and obj.GetExplicitW() == this.GetExplicitW() and isProperty obj #GetMinH and classOf obj.GetMinH == MAXScriptFunction and obj.GetMinH() == this.GetMinH() and isProperty obj #GetMinW and classOf obj.GetMinW == MAXScriptFunction and obj.GetMinW() == this.GetMinW() and isProperty obj #GetResizableH and classOf obj.GetResizableH == MAXScriptFunction and obj.GetResizableH() == this.GetResizableH() and isProperty obj #GetResizableW and classOf obj.GetResizableW == MAXScriptFunction and obj.GetResizableW() == this.GetResizableW();isEqualStructName and isEqualProperties;),public StateChanged,on Create do (this.StateChanged = ::std.ObservableStruct();this.SetControl this._CP1_;););::flexUIDefinitionPool[@"Model\Widget\FlexComboBoxControlWidget.ms"] = struct FlexComboBoxControlWidgetStruct (public _CP1_,private alignmentH = #Center,private alignmentV = #Center,private captionMargin = 3,private captionPosition = #Top,private control,private explicitH,private explicitW,private defaultH = 21,private defaultW = -1,private minH = 21,private minW = 21,private resizableH = false,private resizableW = true,public fn GetAlignmentH = (this.alignmentH;),public fn GetAlignmentV = (this.alignmentV;),public fn GetCaptionMargin = (this.captionMargin;),public fn GetCaptionPosition = (this.captionPosition;),public fn GetControl = (this.control;),public fn GetDefaultH = (this.defaultH;),public fn GetDefaultW = (this.defaultW;),public fn GetExplicitH = (this.explicitH;),public fn GetExplicitW = (this.explicitW;),public fn GetMinH = (this.minH;),public fn GetMinW = (this.minW;),public fn GetRect = (local rect = undefined;if this.isValidControl this.control do (local rectL = undefined;local rectT = undefined;local rectR = undefined;local rectB = undefined;for hwnd in this.control.Hwnd do (local hwndRect = this.getClientRect hwnd;local hwndL = hwndRect.X;local hwndT = hwndRect.Y;local hwndR = hwndL + hwndRect.W;local hwndB = hwndT + hwndRect.H;if classOf rectL != Integer do rectL = hwndL;if classOf rectT != Integer do rectT = hwndT;if classOf rectR != Integer do rectR = hwndR;if classOf rectB != Integer do rectB = hwndB;if rectL > hwndL do rectL = hwndL;if rectT > hwndT do rectT = hwndT;if rectR < hwndR do rectR = hwndR;if rectB < hwndB do rectB = hwndB;);if classOf rectL == Integer and classOf rectT == Integer and classOf rectR == Integer and classOf rectB == Integer do (local x = rectL;local y = rectT;local w = rectR - rectL;local h = rectB - rectT;rect = Box2 x y w h;););rect;),public fn GetResizableH = (this.resizableH;),public fn GetResizableW = (this.resizableW;),public fn GetVisibility = (local isVisible = undefined;if this.isValidControl this.control do (isVisible = this.control.Visible;);isVisible;),public fn SetAlignmentH input = (local validValues = #(#Left, #Center, #Right);if findItem validValues input > 0 do (this.alignmentH = input;this.StateChanged.Notify #AlignmentH this.alignmentH;);this.GetAlignmentH();),public fn SetAlignmentV input = (local validValues = #(#Top, #Center, #Bottom);if findItem validValues input > 0 do (this.alignmentV = input;this.StateChanged.Notify #AlignmentV this.alignmentV;);this.GetAlignmentV();),public fn SetCaptionMargin input = (if superClassOf input == Number do (input = input as Integer;if input < 0 do input = 0;this.captionMargin = input;this.StateChanged.Notify #CaptionMargin this.captionMargin;);this.GetCaptionMargin();),public fn SetCaptionPosition input = (local validValues = #(#Left, #Top);if findItem validValues input > 0 do (this.captionPosition = input;this.StateChanged.Notify #CaptionPosition this.captionPosition;);this.GetCaptionPosition();),public fn SetControl obj = (if this.isValidControl obj do (this.control = obj;this.StateChanged.Notify #Control this.control;);this.GetControl();),public fn SetExplicitH input = (if classOf input == UndefinedClass then (this.explicitH = input;this.StateChanged.Notify #ExplicitH this.explicitH;);else (if superClassOf input == Number do (input = input as Integer;if input < 0 do input = 0;this.explicitH = input;this.StateChanged.Notify #ExplicitH this.explicitH;););this.GetExplicitH();),public fn SetExplicitW input = (if classOf input == UndefinedClass then (this.explicitW = input;this.StateChanged.Notify #ExplicitW this.explicitW;);else (if superClassOf input == Number do (input = input as Integer;if input < 0 do input = 0;this.explicitW = input;this.StateChanged.Notify #ExplicitW this.explicitW;););this.GetExplicitW();),public fn SetRect rect = (local rectX = rect.X as Integer;local rectY = rect.Y as Integer;local rectW = rect.W as Integer;local rectH = rect.H as Integer;if classOf rect == Box2 and this.isValidControl this.control do (if this.control.Hwnd.Count == 2 do (local hwnd1 = this.control.Hwnd[1];local hwnd2 = this.control.Hwnd[2];local captionSize = getTextExtent this.control.Caption;local captionW = captionSize.X as Integer;local captionH = captionSize.Y as Integer;local captionOffset = 0;if captionW > 0 do (case this.captionPosition of ((#Left): captionOffset = captionW + this.captionMargin;(#Top): captionOffset = captionH + this.captionMargin;default: ();););local x = copy rectX;local y = copy rectY;local w = copy rectW;local h = copy rectH;case this.captionPosition of ((#Left): w -= captionOffset;(#Top): h -= captionOffset;default: (););if this.defaultW >= 0 do w = copy this.defaultW;if this.defaultH >= 0 do h = copy this.defaultH;if this.isValidExplicitW() do w = copy this.explicitW;if this.isValidExplicitH() do h = copy this.explicitH;local hwnd1Rect = this.getClientRect hwnd1;if not this.resizableW do w = hwnd1Rect.W;if not this.resizableH do h = hwnd1Rect.H;if w < this.minW do w = copy this.minW;if h < this.minH do h = copy this.minH;if w < 0 do w = 0;if h < 0 do h = 0;local rectMinW = copy w;if this.captionPosition == #Left do rectMinW += captionOffset;if rectW > rectMinW and this.isFixedW() do (case this.alignmentH of ((#Left): ();(#Center): (case this.captionPosition of ((#Left): x += (rectW / 2) as Integer - ((w + captionOffset) / 2) as Integer;(#Top): x += (rectW / 2) as Integer - (w / 2) as Integer;default: ();););(#Right): (x += rectW - w;if this.captionPosition == #Left do x -= captionOffset;);default: ();););local rectMinH = copy h;if this.captionPosition == #Top do rectMinH += captionOffset;if rectH > rectMinH and this.isFixedH() do (case this.alignmentV of ((#Top): ();(#Center): (case this.captionPosition of ((#Left): y += (rectH / 2) as Integer - (h / 2) as Integer;(#Top): y += (rectH / 2) as Integer - ((h + captionOffset) / 2) as Integer;default: ();););(#Bottom): (y += rectH - h;if this.captionPosition == #Top do y -= captionOffset;);default: ();););case this.captionPosition of ((#Left): x += captionOffset;(#Top): y += captionOffset;default: (););this.control.Width = w;Windows.SetWindowPos hwnd1 x y w h true;if captionW == 0 then (Windows.SetWindowPos hwnd2 x y 1 1 true;);else (local captionX = copy x;case this.captionPosition of ((#Left): captionX -= captionOffset;(#Top): ();default: (););local captionY = copy y;case this.captionPosition of ((#Left): captionY += (h / 2) as Integer - (captionH / 2) as Integer;(#Top): captionY -= captionOffset;default: (););Windows.SetWindowPos hwnd2 captionX captionY captionW captionH true;);this.StateChanged.Notify #RectUpdated undefined;););this.GetRect();),public fn SetVisibility input = (if classOf input == BooleanClass and this.isValidControl this.control do (this.control.Visible = input;this.StateChanged.Notify #Visibility this.control.Visible;);this.GetVisibility();),private fn getClientRect hwnd = (local parentHwnd = (Windows.GetHwndData hwnd)[2];local rect = Windows.GetWindowPos hwnd;local pos = Windows.ScreenToClient parentHwnd rect.X rect.Y;Box2 (pos.X as Integer) (pos.Y as Integer) rect.W rect.H;),private fn isFixedH = (this.defaultH >= 0 or this.isValidExplicitH() or not this.resizableH;),private fn isFixedW = (this.defaultW >= 0 or this.isValidExplicitW() or not this.resizableW;),private fn isValidControl obj = (classOf obj == ComboBoxControl;),private fn isValidExplicitH = (classOf this.explicitH == Integer and this.explicitH >= 0;),private fn isValidExplicitW = (classOf this.explicitW == Integer and this.explicitW >= 0;),public fn StructName = #FlexComboBoxControlWidgetStruct,public fn Dump indent:"" out:listener = (format "%FlexComboBoxControlWidgetStruct\n" indent to:out;format "%  alignmentH:%\n" indent this.alignmentH to:out;format "%  alignmentV:%\n" indent this.alignmentV to:out;format "%  captionMargin:%\n" indent this.captionMargin to:out;format "%  captionPosition:%\n" indent this.captionPosition to:out;format "%  control:%\n" indent this.control to:out;format "%  defaultH:%\n" indent this.defaultH to:out;format "%  defaultW:%\n" indent this.defaultW to:out;format "%  explicitH:%\n" indent this.explicitH to:out;format "%  explicitW:%\n" indent this.explicitW to:out;format "%  minH:%\n" indent this.minH to:out;format "%  minW:%\n" indent this.minW to:out;format "%  resizableH:%\n" indent this.resizableH to:out;format "%  resizableW:%\n" indent this.resizableW to:out;ok;),public fn Equals obj = (local isEqualStructName = isStruct obj and isProperty obj #StructName and classOf obj.StructName == MAXScriptFunction and obj.StructName() == this.StructName();local isEqualProperties = isProperty obj #GetAlignmentH and classOf obj.GetAlignmentH == MAXScriptFunction and obj.GetAlignmentH() == this.GetAlignmentH() and isProperty obj #GetAlignmentV and classOf obj.GetAlignmentV == MAXScriptFunction and obj.GetAlignmentV() == this.GetAlignmentV() and isProperty obj #GetCaptionMargin and classOf obj.GetCaptionMargin == MAXScriptFunction and obj.GetCaptionMargin() == this.GetCaptionMargin() and isProperty obj #GetCaptionPosition and classOf obj.GetCaptionPosition == MAXScriptFunction and obj.GetCaptionPosition() == this.GetCaptionPosition() and isProperty obj #GetControl and classOf obj.GetControl == MAXScriptFunction and obj.GetControl() == this.GetControl() and isProperty obj #GetDefaultH and classOf obj.GetDefaultH == MAXScriptFunction and obj.GetDefaultH() == this.GetDefaultH() and isProperty obj #GetDefaultW and classOf obj.GetDefaultW == MAXScriptFunction and obj.GetDefaultW() == this.GetDefaultW() and isProperty obj #GetExplicitH and classOf obj.GetExplicitH == MAXScriptFunction and obj.GetExplicitH() == this.GetExplicitH() and isProperty obj #GetExplicitW and classOf obj.GetExplicitW == MAXScriptFunction and obj.GetExplicitW() == this.GetExplicitW() and isProperty obj #GetMinH and classOf obj.GetMinH == MAXScriptFunction and obj.GetMinH() == this.GetMinH() and isProperty obj #GetMinW and classOf obj.GetMinW == MAXScriptFunction and obj.GetMinW() == this.GetMinW() and isProperty obj #GetResizableH and classOf obj.GetResizableH == MAXScriptFunction and obj.GetResizableH() == this.GetResizableH() and isProperty obj #GetResizableW and classOf obj.GetResizableW == MAXScriptFunction and obj.GetResizableW() == this.GetResizableW();isEqualStructName and isEqualProperties;),public StateChanged,on Create do (this.StateChanged = ::std.ObservableStruct();this.SetControl this._CP1_;););::flexUIDefinitionPool[@"Model\Widget\FlexDotNetControlWidget.ms"] = struct FlexDotNetControlWidgetStruct (public _CP1_,private alignmentH = #Center,private alignmentV = #Center,private captionMargin = 3,private captionPosition = #Left,private control,private explicitH,private explicitW,private lastRect = Box2 0 0 1 1,private defaultH = -1,private defaultW = -1,private minH = 1,private minW = 1,private resizableH = true,private resizableW = true,public fn GetAlignmentH = (this.alignmentH;),public fn GetAlignmentV = (this.alignmentV;),public fn GetCaptionMargin = (this.captionMargin;),public fn GetCaptionPosition = (this.captionPosition;),public fn GetControl = (this.control;),public fn GetDefaultH = (this.defaultH;),public fn GetDefaultW = (this.defaultW;),public fn GetExplicitH = (this.explicitH;),public fn GetExplicitW = (this.explicitW;),public fn GetMinH = (this.minH;),public fn GetMinW = (this.minW;),public fn GetRect = (local rect = undefined;if this.isValidControl this.control do (local rectL = undefined;local rectT = undefined;local rectR = undefined;local rectB = undefined;for hwnd in this.control.Hwnd do (local hwndRect = this.getClientRect hwnd;local hwndL = hwndRect.X;local hwndT = hwndRect.Y;local hwndR = hwndL + hwndRect.W;local hwndB = hwndT + hwndRect.H;if classOf rectL != Integer do rectL = hwndL;if classOf rectT != Integer do rectT = hwndT;if classOf rectR != Integer do rectR = hwndR;if classOf rectB != Integer do rectB = hwndB;if rectL > hwndL do rectL = hwndL;if rectT > hwndT do rectT = hwndT;if rectR < hwndR do rectR = hwndR;if rectB < hwndB do rectB = hwndB;);if classOf rectL == Integer and classOf rectT == Integer and classOf rectR == Integer and classOf rectB == Integer do (local x = rectL;local y = rectT;local w = rectR - rectL;local h = rectB - rectT;rect = Box2 x y w h;););rect;),public fn GetResizableH = (this.resizableH;),public fn GetResizableW = (this.resizableW;),public fn GetVisibility = (local isVisible = undefined;if this.isValidControl this.control do (isVisible = this.control.Visible;);isVisible;),public fn SetAlignmentH input = (local validValues = #(#Left, #Center, #Right);if findItem validValues input > 0 do (this.alignmentH = input;this.StateChanged.Notify #AlignmentH this.alignmentH;);this.GetAlignmentH();),public fn SetAlignmentV input = (local validValues = #(#Top, #Center, #Bottom);if findItem validValues input > 0 do (this.alignmentV = input;this.StateChanged.Notify #AlignmentV this.alignmentV;);this.GetAlignmentV();),public fn SetCaptionMargin input = (if superClassOf input == Number do (input = input as Integer;if input < 0 do input = 0;this.captionMargin = input;this.StateChanged.Notify #CaptionMargin this.captionMargin;);this.GetCaptionMargin();),public fn SetCaptionPosition input = (local validValues = #(#Left, #Top);if findItem validValues input > 0 do (this.captionPosition = input;this.StateChanged.Notify #CaptionPosition this.captionPosition;);this.GetCaptionPosition();),public fn SetControl obj = (if this.isValidControl obj do (this.control = obj;this.StateChanged.Notify #Control this.control;);this.GetControl();),public fn SetExplicitH input = (if classOf input == UndefinedClass then (this.explicitH = input;this.StateChanged.Notify #ExplicitH this.explicitH;);else (if superClassOf input == Number do (input = input as Integer;if input < 0 do input = 0;this.explicitH = input;this.StateChanged.Notify #ExplicitH this.explicitH;););this.GetExplicitH();),public fn SetExplicitW input = (if classOf input == UndefinedClass then (this.explicitW = input;this.StateChanged.Notify #ExplicitW this.explicitW;);else (if superClassOf input == Number do (input = input as Integer;if input < 0 do input = 0;this.explicitW = input;this.StateChanged.Notify #ExplicitW this.explicitW;););this.GetExplicitW();),public fn SetRect rect = (this.lastRect = copy rect;local rectX = rect.X as Integer;local rectY = rect.Y as Integer;local rectW = rect.W as Integer;local rectH = rect.H as Integer;if classOf rect == Box2 and this.isValidControl this.control do (if this.control.Hwnd.Count == 1 do (if this.control.Visible then (local hwnd1 = this.control.Hwnd[1];local x = copy rectX;local y = copy rectY;local w = copy rectW;local h = copy rectH;if this.defaultW >= 0 do w = copy this.defaultW;if this.defaultH >= 0 do h = copy this.defaultH;if this.isValidExplicitW() do w = copy this.explicitW;if this.isValidExplicitH() do h = copy this.explicitH;local hwnd1Rect = this.getClientRect hwnd1;if not this.resizableW do w = hwnd1Rect.W;if not this.resizableH do h = hwnd1Rect.H;if w < this.minW do w = copy this.minW;if h < this.minH do h = copy this.minH;if w < 0 do w = 0;if h < 0 do h = 0;if rectW > w and this.isFixedW() do (case this.alignmentH of ((#Left): ();(#Center): x += (rectW / 2) as Integer - (w / 2) as Integer;(#Right): x += rectW - w;default: ();););if rectH > h and this.isFixedH() do (case this.alignmentV of ((#Top): ();(#Center): y += (rectH / 2) as Integer - (h / 2) as Integer;(#Bottom): y += rectH - h;default: ();););this.control.Pos = [x, y];this.control.Width = w;this.control.Height = h;this.StateChanged.Notify #RectUpdated undefined;);else (this.control.Pos = [-10, -10];this.control.Width = 1;this.control.Height = 1;);););this.GetRect();),public fn SetVisibility input = (if classOf input == BooleanClass and this.isValidControl this.control do (this.control.Visible = input;this.StateChanged.Notify #Visibility this.control.Visible;this.SetRect this.lastRect;);this.GetVisibility();),private fn getClientRect hwnd = (local parentHwnd = (Windows.GetHwndData hwnd)[2];local rect = Windows.GetWindowPos hwnd;local pos = Windows.ScreenToClient parentHwnd rect.X rect.Y;Box2 (pos.X as Integer) (pos.Y as Integer) rect.W rect.H;),private fn isFixedH = (this.defaultH >= 0 or this.isValidExplicitH() or not this.resizableH;),private fn isFixedW = (this.defaultW >= 0 or this.isValidExplicitW() or not this.resizableW;),private fn isValidControl obj = (classOf obj == DotNetControl;),private fn isValidExplicitH = (classOf this.explicitH == Integer and this.explicitH >= 0;),private fn isValidExplicitW = (classOf this.explicitW == Integer and this.explicitW >= 0;),public fn StructName = #FlexDotNetControlWidgetStruct,public fn Dump indent:"" out:listener = (format "%FlexDotNetControlWidgetStruct\n" indent to:out;format "%  alignmentH:%\n" indent this.alignmentH to:out;format "%  alignmentV:%\n" indent this.alignmentV to:out;format "%  captionMargin:%\n" indent this.captionMargin to:out;format "%  captionPosition:%\n" indent this.captionPosition to:out;format "%  control:%\n" indent this.control to:out;format "%  defaultH:%\n" indent this.defaultH to:out;format "%  defaultW:%\n" indent this.defaultW to:out;format "%  explicitH:%\n" indent this.explicitH to:out;format "%  explicitW:%\n" indent this.explicitW to:out;format "%  minH:%\n" indent this.minH to:out;format "%  minW:%\n" indent this.minW to:out;format "%  resizableH:%\n" indent this.resizableH to:out;format "%  resizableW:%\n" indent this.resizableW to:out;ok;),public fn Equals obj = (local isEqualStructName = isStruct obj and isProperty obj #StructName and classOf obj.StructName == MAXScriptFunction and obj.StructName() == this.StructName();local isEqualProperties = isProperty obj #GetAlignmentH and classOf obj.GetAlignmentH == MAXScriptFunction and obj.GetAlignmentH() == this.GetAlignmentH() and isProperty obj #GetAlignmentV and classOf obj.GetAlignmentV == MAXScriptFunction and obj.GetAlignmentV() == this.GetAlignmentV() and isProperty obj #GetCaptionMargin and classOf obj.GetCaptionMargin == MAXScriptFunction and obj.GetCaptionMargin() == this.GetCaptionMargin() and isProperty obj #GetCaptionPosition and classOf obj.GetCaptionPosition == MAXScriptFunction and obj.GetCaptionPosition() == this.GetCaptionPosition() and isProperty obj #GetControl and classOf obj.GetControl == MAXScriptFunction and obj.GetControl() == this.GetControl() and isProperty obj #GetDefaultH and classOf obj.GetDefaultH == MAXScriptFunction and obj.GetDefaultH() == this.GetDefaultH() and isProperty obj #GetDefaultW and classOf obj.GetDefaultW == MAXScriptFunction and obj.GetDefaultW() == this.GetDefaultW() and isProperty obj #GetExplicitH and classOf obj.GetExplicitH == MAXScriptFunction and obj.GetExplicitH() == this.GetExplicitH() and isProperty obj #GetExplicitW and classOf obj.GetExplicitW == MAXScriptFunction and obj.GetExplicitW() == this.GetExplicitW() and isProperty obj #GetMinH and classOf obj.GetMinH == MAXScriptFunction and obj.GetMinH() == this.GetMinH() and isProperty obj #GetMinW and classOf obj.GetMinW == MAXScriptFunction and obj.GetMinW() == this.GetMinW() and isProperty obj #GetResizableH and classOf obj.GetResizableH == MAXScriptFunction and obj.GetResizableH() == this.GetResizableH() and isProperty obj #GetResizableW and classOf obj.GetResizableW == MAXScriptFunction and obj.GetResizableW() == this.GetResizableW();isEqualStructName and isEqualProperties;),public StateChanged,on Create do (this.StateChanged = ::std.ObservableStruct();this.SetControl this._CP1_;););::flexUIDefinitionPool[@"Model\Widget\FlexEditTextControlWidget.ms"] = struct FlexEditTextControlWidgetStruct (public _CP1_,private alignmentH = #Center,private alignmentV = #Center,private captionMargin = 3,private captionPosition = #Left,private control,private explicitH,private explicitW,private defaultH = -1,private defaultW = -1,private minH = 17,private minW = 5,private resizableH = true,private resizableW = true,public fn GetAlignmentH = (this.alignmentH;),public fn GetAlignmentV = (this.alignmentV;),public fn GetCaptionMargin = (this.captionMargin;),public fn GetCaptionPosition = (this.captionPosition;),public fn GetControl = (this.control;),public fn GetDefaultH = (this.defaultH;),public fn GetDefaultW = (this.defaultW;),public fn GetExplicitH = (this.explicitH;),public fn GetExplicitW = (this.explicitW;),public fn GetMinH = (this.minH;),public fn GetMinW = (this.minW;),public fn GetRect = (local rect = undefined;if this.isValidControl this.control do (local rectL = undefined;local rectT = undefined;local rectR = undefined;local rectB = undefined;for hwnd in this.control.Hwnd do (local hwndRect = this.getClientRect hwnd;local hwndL = hwndRect.X;local hwndT = hwndRect.Y;local hwndR = hwndL + hwndRect.W;local hwndB = hwndT + hwndRect.H;if classOf rectL != Integer do rectL = hwndL;if classOf rectT != Integer do rectT = hwndT;if classOf rectR != Integer do rectR = hwndR;if classOf rectB != Integer do rectB = hwndB;if rectL > hwndL do rectL = hwndL;if rectT > hwndT do rectT = hwndT;if rectR < hwndR do rectR = hwndR;if rectB < hwndB do rectB = hwndB;);if classOf rectL == Integer and classOf rectT == Integer and classOf rectR == Integer and classOf rectB == Integer do (local x = rectL;local y = rectT;local w = rectR - rectL;local h = rectB - rectT;rect = Box2 x y w h;););rect;),public fn GetResizableH = (this.resizableH;),public fn GetResizableW = (this.resizableW;),public fn GetVisibility = (local isVisible = undefined;if this.isValidControl this.control do (isVisible = this.control.Visible;);isVisible;),public fn SetAlignmentH input = (local validValues = #(#Left, #Center, #Right);if findItem validValues input > 0 do (this.alignmentH = input;this.StateChanged.Notify #AlignmentH this.alignmentH;);this.GetAlignmentH();),public fn SetAlignmentV input = (local validValues = #(#Top, #Center, #Bottom);if findItem validValues input > 0 do (this.alignmentV = input;this.StateChanged.Notify #AlignmentV this.alignmentV;);this.GetAlignmentV();),public fn SetCaptionMargin input = (if superClassOf input == Number do (input = input as Integer;if input < 0 do input = 0;this.captionMargin = input;this.StateChanged.Notify #CaptionMargin this.captionMargin;);this.GetCaptionMargin();),public fn SetCaptionPosition input = (local validValues = #(#Left, #Top);if findItem validValues input > 0 do (this.captionPosition = input;this.StateChanged.Notify #CaptionPosition this.captionPosition;);this.GetCaptionPosition();),public fn SetControl obj = (if this.isValidControl obj do (this.control = obj;this.StateChanged.Notify #Control this.control;);this.GetControl();),public fn SetExplicitH input = (if classOf input == UndefinedClass then (this.explicitH = input;this.StateChanged.Notify #ExplicitH this.explicitH;);else (if superClassOf input == Number do (input = input as Integer;if input < 0 do input = 0;this.explicitH = input;this.StateChanged.Notify #ExplicitH this.explicitH;););this.GetExplicitH();),public fn SetExplicitW input = (if classOf input == UndefinedClass then (this.explicitW = input;this.StateChanged.Notify #ExplicitW this.explicitW;);else (if superClassOf input == Number do (input = input as Integer;if input < 0 do input = 0;this.explicitW = input;this.StateChanged.Notify #ExplicitW this.explicitW;););this.GetExplicitW();),public fn SetRect rect = (local rectX = rect.X as Integer;local rectY = rect.Y as Integer;local rectW = rect.W as Integer;local rectH = rect.H as Integer;if classOf rect == Box2 and this.isValidControl this.control do (if this.control.Hwnd.Count == 2 do (local hwnd1 = this.control.Hwnd[1];local hwnd2 = this.control.Hwnd[2];local captionSize = getTextExtent this.control.Caption;local captionW = captionSize.X as Integer;local captionH = captionSize.Y as Integer;local captionOffset = 0;if captionW > 0 do (case this.captionPosition of ((#Left): captionOffset = captionW + this.captionMargin;(#Top): captionOffset = captionH + this.captionMargin;default: ();););local x = copy rectX;local y = copy rectY;local w = copy rectW;local h = copy rectH;case this.captionPosition of ((#Left): w -= captionOffset;(#Top): h -= captionOffset;default: (););if this.defaultW >= 0 do w = copy this.defaultW;if this.defaultH >= 0 do h = copy this.defaultH;if this.isValidExplicitW() do w = copy this.explicitW;if this.isValidExplicitH() do h = copy this.explicitH;local hwnd1Rect = this.getClientRect hwnd1;if not this.resizableW do w = hwnd1Rect.W;if not this.resizableH do h = hwnd1Rect.H;if w < this.minW do w = copy this.minW;if h < this.minH do h = copy this.minH;if w < 0 do w = 0;if h < 0 do h = 0;local rectMinW = copy w;if this.captionPosition == #Left do rectMinW += captionOffset;if rectW > rectMinW and this.isFixedW() do (case this.alignmentH of ((#Left): ();(#Center): (case this.captionPosition of ((#Left): x += (rectW / 2) as Integer - ((w + captionOffset) / 2) as Integer;(#Top): x += (rectW / 2) as Integer - (w / 2) as Integer;default: ();););(#Right): (x += rectW - w;if this.captionPosition == #Left do x -= captionOffset;);default: ();););local rectMinH = copy h;if this.captionPosition == #Top do rectMinH += captionOffset;if rectH > rectMinH and this.isFixedH() do (case this.alignmentV of ((#Top): ();(#Center): (case this.captionPosition of ((#Left): y += (rectH / 2) as Integer - (h / 2) as Integer;(#Top): y += (rectH / 2) as Integer - ((h + captionOffset) / 2) as Integer;default: ();););(#Bottom): (y += rectH - h;if this.captionPosition == #Top do y -= captionOffset;);default: ();););case this.captionPosition of ((#Left): x += captionOffset;(#Top): y += captionOffset;default: (););this.control.Height = h;Windows.SetWindowPos hwnd1 x y w h true;if captionW == 0 then (Windows.SetWindowPos hwnd2 x y 1 1 true;);else (local captionX = copy x;case this.captionPosition of ((#Left): captionX -= captionOffset;(#Top): ();default: (););local captionY = copy y;case this.captionPosition of ((#Left): captionY += (h / 2) as Integer - (captionH / 2) as Integer;(#Top): captionY -= captionOffset;default: (););Windows.SetWindowPos hwnd2 captionX captionY captionW captionH true;);this.StateChanged.Notify #RectUpdated undefined;););this.GetRect();),public fn SetVisibility input = (if classOf input == BooleanClass and this.isValidControl this.control do (this.control.Visible = input;this.StateChanged.Notify #Visibility this.control.Visible;);this.GetVisibility();),private fn getClientRect hwnd = (local parentHwnd = (Windows.GetHwndData hwnd)[2];local rect = Windows.GetWindowPos hwnd;local pos = Windows.ScreenToClient parentHwnd rect.X rect.Y;Box2 (pos.X as Integer) (pos.Y as Integer) rect.W rect.H;),private fn isFixedH = (this.defaultH >= 0 or this.isValidExplicitH() or not this.resizableH;),private fn isFixedW = (this.defaultW >= 0 or this.isValidExplicitW() or not this.resizableW;),private fn isValidControl obj = (classOf obj == EditTextControl;),private fn isValidExplicitH = (classOf this.explicitH == Integer and this.explicitH >= 0;),private fn isValidExplicitW = (classOf this.explicitW == Integer and this.explicitW >= 0;),public fn StructName = #FlexEditTextControlWidgetStruct,public fn Dump indent:"" out:listener = (format "%FlexEditTextControlWidgetStruct\n" indent to:out;format "%  alignmentH:%\n" indent this.alignmentH to:out;format "%  alignmentV:%\n" indent this.alignmentV to:out;format "%  captionMargin:%\n" indent this.captionMargin to:out;format "%  captionPosition:%\n" indent this.captionPosition to:out;format "%  control:%\n" indent this.control to:out;format "%  defaultH:%\n" indent this.defaultH to:out;format "%  defaultW:%\n" indent this.defaultW to:out;format "%  explicitH:%\n" indent this.explicitH to:out;format "%  explicitW:%\n" indent this.explicitW to:out;format "%  minH:%\n" indent this.minH to:out;format "%  minW:%\n" indent this.minW to:out;format "%  resizableH:%\n" indent this.resizableH to:out;format "%  resizableW:%\n" indent this.resizableW to:out;ok;),public fn Equals obj = (local isEqualStructName = isStruct obj and isProperty obj #StructName and classOf obj.StructName == MAXScriptFunction and obj.StructName() == this.StructName();local isEqualProperties = isProperty obj #GetAlignmentH and classOf obj.GetAlignmentH == MAXScriptFunction and obj.GetAlignmentH() == this.GetAlignmentH() and isProperty obj #GetAlignmentV and classOf obj.GetAlignmentV == MAXScriptFunction and obj.GetAlignmentV() == this.GetAlignmentV() and isProperty obj #GetCaptionMargin and classOf obj.GetCaptionMargin == MAXScriptFunction and obj.GetCaptionMargin() == this.GetCaptionMargin() and isProperty obj #GetCaptionPosition and classOf obj.GetCaptionPosition == MAXScriptFunction and obj.GetCaptionPosition() == this.GetCaptionPosition() and isProperty obj #GetControl and classOf obj.GetControl == MAXScriptFunction and obj.GetControl() == this.GetControl() and isProperty obj #GetDefaultH and classOf obj.GetDefaultH == MAXScriptFunction and obj.GetDefaultH() == this.GetDefaultH() and isProperty obj #GetDefaultW and classOf obj.GetDefaultW == MAXScriptFunction and obj.GetDefaultW() == this.GetDefaultW() and isProperty obj #GetExplicitH and classOf obj.GetExplicitH == MAXScriptFunction and obj.GetExplicitH() == this.GetExplicitH() and isProperty obj #GetExplicitW and classOf obj.GetExplicitW == MAXScriptFunction and obj.GetExplicitW() == this.GetExplicitW() and isProperty obj #GetMinH and classOf obj.GetMinH == MAXScriptFunction and obj.GetMinH() == this.GetMinH() and isProperty obj #GetMinW and classOf obj.GetMinW == MAXScriptFunction and obj.GetMinW() == this.GetMinW() and isProperty obj #GetResizableH and classOf obj.GetResizableH == MAXScriptFunction and obj.GetResizableH() == this.GetResizableH() and isProperty obj #GetResizableW and classOf obj.GetResizableW == MAXScriptFunction and obj.GetResizableW() == this.GetResizableW();isEqualStructName and isEqualProperties;),public StateChanged,on Create do (this.StateChanged = ::std.ObservableStruct();this.SetControl this._CP1_;););::flexUIDefinitionPool[@"Model\Widget\FlexGroupBoxControlWidget.ms"] = struct FlexGroupBoxControlWidgetStruct (public _CP1_,private alignmentH = #Center,private alignmentV = #Center,private captionMargin = 3,private captionPosition = #Left,private control,private explicitH,private explicitW,private defaultH = -1,private defaultW = -1,private minH = 21,private minW = 11,private resizableH = true,private resizableW = true,public fn GetAlignmentH = (this.alignmentH;),public fn GetAlignmentV = (this.alignmentV;),public fn GetCaptionMargin = (this.captionMargin;),public fn GetCaptionPosition = (this.captionPosition;),public fn GetControl = (this.control;),public fn GetDefaultH = (this.defaultH;),public fn GetDefaultW = (this.defaultW;),public fn GetExplicitH = (this.explicitH;),public fn GetExplicitW = (this.explicitW;),public fn GetMinH = (this.minH;),public fn GetMinW = (this.minW;),public fn GetRect = (local rect = undefined;if this.isValidControl this.control do (local rectL = undefined;local rectT = undefined;local rectR = undefined;local rectB = undefined;for hwnd in this.control.Hwnd do (local hwndRect = this.getClientRect hwnd;local hwndL = hwndRect.X;local hwndT = hwndRect.Y;local hwndR = hwndL + hwndRect.W;local hwndB = hwndT + hwndRect.H;if classOf rectL != Integer do rectL = hwndL;if classOf rectT != Integer do rectT = hwndT;if classOf rectR != Integer do rectR = hwndR;if classOf rectB != Integer do rectB = hwndB;if rectL > hwndL do rectL = hwndL;if rectT > hwndT do rectT = hwndT;if rectR < hwndR do rectR = hwndR;if rectB < hwndB do rectB = hwndB;);if classOf rectL == Integer and classOf rectT == Integer and classOf rectR == Integer and classOf rectB == Integer do (local x = rectL;local y = rectT;local w = rectR - rectL;local h = rectB - rectT;rect = Box2 x y w h;););rect;),public fn GetResizableH = (this.resizableH;),public fn GetResizableW = (this.resizableW;),public fn GetVisibility = (local isVisible = undefined;if this.isValidControl this.control do (isVisible = this.control.Visible;);isVisible;),public fn SetAlignmentH input = (local validValues = #(#Left, #Center, #Right);if findItem validValues input > 0 do (this.alignmentH = input;this.StateChanged.Notify #AlignmentH this.alignmentH;);this.GetAlignmentH();),public fn SetAlignmentV input = (local validValues = #(#Top, #Center, #Bottom);if findItem validValues input > 0 do (this.alignmentV = input;this.StateChanged.Notify #AlignmentV this.alignmentV;);this.GetAlignmentV();),public fn SetCaptionMargin input = (if superClassOf input == Number do (input = input as Integer;if input < 0 do input = 0;this.captionMargin = input;this.StateChanged.Notify #CaptionMargin this.captionMargin;);this.GetCaptionMargin();),public fn SetCaptionPosition input = (local validValues = #(#Left, #Top);if findItem validValues input > 0 do (this.captionPosition = input;this.StateChanged.Notify #CaptionPosition this.captionPosition;);this.GetCaptionPosition();),public fn SetControl obj = (if this.isValidControl obj do (this.control = obj;this.StateChanged.Notify #Control this.control;);this.GetControl();),public fn SetExplicitH input = (if classOf input == UndefinedClass then (this.explicitH = input;this.StateChanged.Notify #ExplicitH this.explicitH;);else (if superClassOf input == Number do (input = input as Integer;if input < 0 do input = 0;this.explicitH = input;this.StateChanged.Notify #ExplicitH this.explicitH;););this.GetExplicitH();),public fn SetExplicitW input = (if classOf input == UndefinedClass then (this.explicitW = input;this.StateChanged.Notify #ExplicitW this.explicitW;);else (if superClassOf input == Number do (input = input as Integer;if input < 0 do input = 0;this.explicitW = input;this.StateChanged.Notify #ExplicitW this.explicitW;););this.GetExplicitW();),public fn SetRect rect = (local rectX = rect.X as Integer;local rectY = rect.Y as Integer;local rectW = rect.W as Integer;local rectH = rect.H as Integer;if classOf rect == Box2 and this.isValidControl this.control do (if this.control.Hwnd.Count == 1 do (local hwnd1 = this.control.Hwnd[1];local x = copy rectX;local y = copy rectY;local w = copy rectW;local h = copy rectH;if this.defaultW >= 0 do w = copy this.defaultW;if this.defaultH >= 0 do h = copy this.defaultH;if this.isValidExplicitW() do w = copy this.explicitW;if this.isValidExplicitH() do h = copy this.explicitH;local hwnd1Rect = this.getClientRect hwnd1;if not this.resizableW do w = hwnd1Rect.W;if not this.resizableH do h = hwnd1Rect.H;if w < this.minW do w = copy this.minW;if h < this.minH do h = copy this.minH;if w < 0 do w = 0;if h < 0 do h = 0;if rectW > w and this.isFixedW() do (case this.alignmentH of ((#Left): ();(#Center): x += (rectW / 2) as Integer - (w / 2) as Integer;(#Right): x += rectW - w;default: ();););if rectH > h and this.isFixedH() do (case this.alignmentV of ((#Top): ();(#Center): y += (rectH / 2) as Integer - (h / 2) as Integer;(#Bottom): y += rectH - h;default: ();););Windows.SetWindowPos hwnd1 x y w h true;this.StateChanged.Notify #RectUpdated undefined;););this.GetRect();),public fn SetVisibility input = (if classOf input == BooleanClass and this.isValidControl this.control do (this.control.Visible = input;this.StateChanged.Notify #Visibility this.control.Visible;);this.GetVisibility();),private fn getClientRect hwnd = (local parentHwnd = (Windows.GetHwndData hwnd)[2];local rect = Windows.GetWindowPos hwnd;local pos = Windows.ScreenToClient parentHwnd rect.X rect.Y;Box2 (pos.X as Integer) (pos.Y as Integer) rect.W rect.H;),private fn isFixedH = (this.defaultH >= 0 or this.isValidExplicitH() or not this.resizableH;),private fn isFixedW = (this.defaultW >= 0 or this.isValidExplicitW() or not this.resizableW;),private fn isValidControl obj = (classOf obj == GroupBoxControl;),private fn isValidExplicitH = (classOf this.explicitH == Integer and this.explicitH >= 0;),private fn isValidExplicitW = (classOf this.explicitW == Integer and this.explicitW >= 0;),public fn StructName = #FlexGroupBoxControlWidgetStruct,public fn Dump indent:"" out:listener = (format "%FlexGroupBoxControlWidgetStruct\n" indent to:out;format "%  alignmentH:%\n" indent this.alignmentH to:out;format "%  alignmentV:%\n" indent this.alignmentV to:out;format "%  captionMargin:%\n" indent this.captionMargin to:out;format "%  captionPosition:%\n" indent this.captionPosition to:out;format "%  control:%\n" indent this.control to:out;format "%  defaultH:%\n" indent this.defaultH to:out;format "%  defaultW:%\n" indent this.defaultW to:out;format "%  explicitH:%\n" indent this.explicitH to:out;format "%  explicitW:%\n" indent this.explicitW to:out;format "%  minH:%\n" indent this.minH to:out;format "%  minW:%\n" indent this.minW to:out;format "%  resizableH:%\n" indent this.resizableH to:out;format "%  resizableW:%\n" indent this.resizableW to:out;ok;),public fn Equals obj = (local isEqualStructName = isStruct obj and isProperty obj #StructName and classOf obj.StructName == MAXScriptFunction and obj.StructName() == this.StructName();local isEqualProperties = isProperty obj #GetAlignmentH and classOf obj.GetAlignmentH == MAXScriptFunction and obj.GetAlignmentH() == this.GetAlignmentH() and isProperty obj #GetAlignmentV and classOf obj.GetAlignmentV == MAXScriptFunction and obj.GetAlignmentV() == this.GetAlignmentV() and isProperty obj #GetCaptionMargin and classOf obj.GetCaptionMargin == MAXScriptFunction and obj.GetCaptionMargin() == this.GetCaptionMargin() and isProperty obj #GetCaptionPosition and classOf obj.GetCaptionPosition == MAXScriptFunction and obj.GetCaptionPosition() == this.GetCaptionPosition() and isProperty obj #GetControl and classOf obj.GetControl == MAXScriptFunction and obj.GetControl() == this.GetControl() and isProperty obj #GetDefaultH and classOf obj.GetDefaultH == MAXScriptFunction and obj.GetDefaultH() == this.GetDefaultH() and isProperty obj #GetDefaultW and classOf obj.GetDefaultW == MAXScriptFunction and obj.GetDefaultW() == this.GetDefaultW() and isProperty obj #GetExplicitH and classOf obj.GetExplicitH == MAXScriptFunction and obj.GetExplicitH() == this.GetExplicitH() and isProperty obj #GetExplicitW and classOf obj.GetExplicitW == MAXScriptFunction and obj.GetExplicitW() == this.GetExplicitW() and isProperty obj #GetMinH and classOf obj.GetMinH == MAXScriptFunction and obj.GetMinH() == this.GetMinH() and isProperty obj #GetMinW and classOf obj.GetMinW == MAXScriptFunction and obj.GetMinW() == this.GetMinW() and isProperty obj #GetResizableH and classOf obj.GetResizableH == MAXScriptFunction and obj.GetResizableH() == this.GetResizableH() and isProperty obj #GetResizableW and classOf obj.GetResizableW == MAXScriptFunction and obj.GetResizableW() == this.GetResizableW();isEqualStructName and isEqualProperties;),public StateChanged,on Create do (this.StateChanged = ::std.ObservableStruct();this.SetControl this._CP1_;););::flexUIDefinitionPool[@"Model\Widget\FlexImgTagWidget.ms"] = struct FlexImgTagWidgetStruct (public _CP1_,private alignmentH = #Center,private alignmentV = #Center,private captionMargin = 3,private captionPosition = #Left,private control,private explicitH,private explicitW,private defaultH = -1,private defaultW = -1,private minH = 1,private minW = 1,private resizableH = true,private resizableW = true,public fn GetAlignmentH = (this.alignmentH;),public fn GetAlignmentV = (this.alignmentV;),public fn GetCaptionMargin = (this.captionMargin;),public fn GetCaptionPosition = (this.captionPosition;),public fn GetControl = (this.control;),public fn GetDefaultH = (this.defaultH;),public fn GetDefaultW = (this.defaultW;),public fn GetExplicitH = (this.explicitH;),public fn GetExplicitW = (this.explicitW;),public fn GetMinH = (this.minH;),public fn GetMinW = (this.minW;),public fn GetRect = (local rect = undefined;if this.isValidControl this.control do (local rectL = undefined;local rectT = undefined;local rectR = undefined;local rectB = undefined;for hwnd in this.control.Hwnd do (local hwndRect = this.getClientRect hwnd;local hwndL = hwndRect.X;local hwndT = hwndRect.Y;local hwndR = hwndL + hwndRect.W;local hwndB = hwndT + hwndRect.H;if classOf rectL != Integer do rectL = hwndL;if classOf rectT != Integer do rectT = hwndT;if classOf rectR != Integer do rectR = hwndR;if classOf rectB != Integer do rectB = hwndB;if rectL > hwndL do rectL = hwndL;if rectT > hwndT do rectT = hwndT;if rectR < hwndR do rectR = hwndR;if rectB < hwndB do rectB = hwndB;);if classOf rectL == Integer and classOf rectT == Integer and classOf rectR == Integer and classOf rectB == Integer do (local x = rectL;local y = rectT;local w = rectR - rectL;local h = rectB - rectT;rect = Box2 x y w h;););rect;),public fn GetResizableH = (this.resizableH;),public fn GetResizableW = (this.resizableW;),public fn GetVisibility = (local isVisible = undefined;if this.isValidControl this.control do (isVisible = this.control.Visible;);isVisible;),public fn SetAlignmentH input = (local validValues = #(#Left, #Center, #Right);if findItem validValues input > 0 do (this.alignmentH = input;this.StateChanged.Notify #AlignmentH this.alignmentH;);this.GetAlignmentH();),public fn SetAlignmentV input = (local validValues = #(#Top, #Center, #Bottom);if findItem validValues input > 0 do (this.alignmentV = input;this.StateChanged.Notify #AlignmentV this.alignmentV;);this.GetAlignmentV();),public fn SetCaptionMargin input = (if superClassOf input == Number do (input = input as Integer;if input < 0 do input = 0;this.captionMargin = input;this.StateChanged.Notify #CaptionMargin this.captionMargin;);this.GetCaptionMargin();),public fn SetCaptionPosition input = (local validValues = #(#Left, #Top);if findItem validValues input > 0 do (this.captionPosition = input;this.StateChanged.Notify #CaptionPosition this.captionPosition;);this.GetCaptionPosition();),public fn SetControl obj = (if this.isValidControl obj do (this.control = obj;this.StateChanged.Notify #Control this.control;);this.GetControl();),public fn SetExplicitH input = (if classOf input == UndefinedClass then (this.explicitH = input;this.StateChanged.Notify #ExplicitH this.explicitH;);else (if superClassOf input == Number do (input = input as Integer;if input < 0 do input = 0;this.explicitH = input;this.StateChanged.Notify #ExplicitH this.explicitH;););this.GetExplicitH();),public fn SetExplicitW input = (if classOf input == UndefinedClass then (this.explicitW = input;this.StateChanged.Notify #ExplicitW this.explicitW;);else (if superClassOf input == Number do (input = input as Integer;if input < 0 do input = 0;this.explicitW = input;this.StateChanged.Notify #ExplicitW this.explicitW;););this.GetExplicitW();),public fn SetRect rect = (local rectX = rect.X as Integer;local rectY = rect.Y as Integer;local rectW = rect.W as Integer;local rectH = rect.H as Integer;if classOf rect == Box2 and this.isValidControl this.control do (if this.control.Hwnd.Count == 1 do (local hwnd1 = this.control.Hwnd[1];local x = copy rectX;local y = copy rectY;local w = copy rectW;local h = copy rectH;if this.defaultW >= 0 do w = copy this.defaultW;if this.defaultH >= 0 do h = copy this.defaultH;if this.isValidExplicitW() do w = copy this.explicitW;if this.isValidExplicitH() do h = copy this.explicitH;local hwnd1Rect = this.getClientRect hwnd1;if not this.resizableW do w = hwnd1Rect.W;if not this.resizableH do h = hwnd1Rect.H;if w < this.minW do w = copy this.minW;if h < this.minH do h = copy this.minH;if w < 0 do w = 0;if h < 0 do h = 0;if rectW > w and this.isFixedW() do (case this.alignmentH of ((#Left): ();(#Center): x += (rectW / 2) as Integer - (w / 2) as Integer;(#Right): x += rectW - w;default: ();););if rectH > h and this.isFixedH() do (case this.alignmentV of ((#Top): ();(#Center): y += (rectH / 2) as Integer - (h / 2) as Integer;(#Bottom): y += rectH - h;default: ();););Windows.SetWindowPos hwnd1 x y w h true;this.StateChanged.Notify #RectUpdated undefined;););this.GetRect();),public fn SetVisibility input = (if classOf input == BooleanClass and this.isValidControl this.control do (this.control.Visible = input;this.StateChanged.Notify #Visibility this.control.Visible;);this.GetVisibility();),private fn getClientRect hwnd = (local parentHwnd = (Windows.GetHwndData hwnd)[2];local rect = Windows.GetWindowPos hwnd;local pos = Windows.ScreenToClient parentHwnd rect.X rect.Y;Box2 (pos.X as Integer) (pos.Y as Integer) rect.W rect.H;),private fn isFixedH = (this.defaultH >= 0 or this.isValidExplicitH() or not this.resizableH;),private fn isFixedW = (this.defaultW >= 0 or this.isValidExplicitW() or not this.resizableW;),private fn isValidControl obj = (classOf obj == ImgTag;),private fn isValidExplicitH = (classOf this.explicitH == Integer and this.explicitH >= 0;),private fn isValidExplicitW = (classOf this.explicitW == Integer and this.explicitW >= 0;),public fn StructName = #FlexImgTagWidgetStruct,public fn Dump indent:"" out:listener = (format "%FlexImgTagWidgetStruct\n" indent to:out;format "%  alignmentH:%\n" indent this.alignmentH to:out;format "%  alignmentV:%\n" indent this.alignmentV to:out;format "%  captionMargin:%\n" indent this.captionMargin to:out;format "%  captionPosition:%\n" indent this.captionPosition to:out;format "%  control:%\n" indent this.control to:out;format "%  defaultH:%\n" indent this.defaultH to:out;format "%  defaultW:%\n" indent this.defaultW to:out;format "%  explicitH:%\n" indent this.explicitH to:out;format "%  explicitW:%\n" indent this.explicitW to:out;format "%  minH:%\n" indent this.minH to:out;format "%  minW:%\n" indent this.minW to:out;format "%  resizableH:%\n" indent this.resizableH to:out;format "%  resizableW:%\n" indent this.resizableW to:out;ok;),public fn Equals obj = (local isEqualStructName = isStruct obj and isProperty obj #StructName and classOf obj.StructName == MAXScriptFunction and obj.StructName() == this.StructName();local isEqualProperties = isProperty obj #GetAlignmentH and classOf obj.GetAlignmentH == MAXScriptFunction and obj.GetAlignmentH() == this.GetAlignmentH() and isProperty obj #GetAlignmentV and classOf obj.GetAlignmentV == MAXScriptFunction and obj.GetAlignmentV() == this.GetAlignmentV() and isProperty obj #GetCaptionMargin and classOf obj.GetCaptionMargin == MAXScriptFunction and obj.GetCaptionMargin() == this.GetCaptionMargin() and isProperty obj #GetCaptionPosition and classOf obj.GetCaptionPosition == MAXScriptFunction and obj.GetCaptionPosition() == this.GetCaptionPosition() and isProperty obj #GetControl and classOf obj.GetControl == MAXScriptFunction and obj.GetControl() == this.GetControl() and isProperty obj #GetDefaultH and classOf obj.GetDefaultH == MAXScriptFunction and obj.GetDefaultH() == this.GetDefaultH() and isProperty obj #GetDefaultW and classOf obj.GetDefaultW == MAXScriptFunction and obj.GetDefaultW() == this.GetDefaultW() and isProperty obj #GetExplicitH and classOf obj.GetExplicitH == MAXScriptFunction and obj.GetExplicitH() == this.GetExplicitH() and isProperty obj #GetExplicitW and classOf obj.GetExplicitW == MAXScriptFunction and obj.GetExplicitW() == this.GetExplicitW() and isProperty obj #GetMinH and classOf obj.GetMinH == MAXScriptFunction and obj.GetMinH() == this.GetMinH() and isProperty obj #GetMinW and classOf obj.GetMinW == MAXScriptFunction and obj.GetMinW() == this.GetMinW() and isProperty obj #GetResizableH and classOf obj.GetResizableH == MAXScriptFunction and obj.GetResizableH() == this.GetResizableH() and isProperty obj #GetResizableW and classOf obj.GetResizableW == MAXScriptFunction and obj.GetResizableW() == this.GetResizableW();isEqualStructName and isEqualProperties;),public StateChanged,on Create do (this.StateChanged = ::std.ObservableStruct();this.SetControl this._CP1_;););::flexUIDefinitionPool[@"Model\Widget\FlexLabelControlWidget.ms"] = struct FlexLabelControlWidgetStruct (public _CP1_,private alignmentH = #Center,private alignmentV = #Center,private captionMargin = 3,private captionPosition = #Left,private control,private explicitH,private explicitW,private defaultH = -1,private defaultW = -1,private minH = 13,private minW = 2,private resizableH = false,private resizableW = false,public fn GetAlignmentH = (this.alignmentH;),public fn GetAlignmentV = (this.alignmentV;),public fn GetCaptionMargin = (this.captionMargin;),public fn GetCaptionPosition = (this.captionPosition;),public fn GetControl = (this.control;),public fn GetDefaultH = (this.defaultH;),public fn GetDefaultW = (this.defaultW;),public fn GetExplicitH = (this.explicitH;),public fn GetExplicitW = (this.explicitW;),public fn GetMinH = (this.minH;),public fn GetMinW = (this.minW;),public fn GetRect = (local rect = undefined;if this.isValidControl this.control do (local rectL = undefined;local rectT = undefined;local rectR = undefined;local rectB = undefined;for hwnd in this.control.Hwnd do (local hwndRect = this.getClientRect hwnd;local hwndL = hwndRect.X;local hwndT = hwndRect.Y;local hwndR = hwndL + hwndRect.W;local hwndB = hwndT + hwndRect.H;if classOf rectL != Integer do rectL = hwndL;if classOf rectT != Integer do rectT = hwndT;if classOf rectR != Integer do rectR = hwndR;if classOf rectB != Integer do rectB = hwndB;if rectL > hwndL do rectL = hwndL;if rectT > hwndT do rectT = hwndT;if rectR < hwndR do rectR = hwndR;if rectB < hwndB do rectB = hwndB;);if classOf rectL == Integer and classOf rectT == Integer and classOf rectR == Integer and classOf rectB == Integer do (local x = rectL;local y = rectT;local w = rectR - rectL;local h = rectB - rectT;rect = Box2 x y w h;););rect;),public fn GetResizableH = (this.resizableH;),public fn GetResizableW = (this.resizableW;),public fn GetVisibility = (local isVisible = undefined;if this.isValidControl this.control do (isVisible = this.control.Visible;);isVisible;),public fn SetAlignmentH input = (local validValues = #(#Left, #Center, #Right);if findItem validValues input > 0 do (this.alignmentH = input;this.StateChanged.Notify #AlignmentH this.alignmentH;);this.GetAlignmentH();),public fn SetAlignmentV input = (local validValues = #(#Top, #Center, #Bottom);if findItem validValues input > 0 do (this.alignmentV = input;this.StateChanged.Notify #AlignmentV this.alignmentV;);this.GetAlignmentV();),public fn SetCaptionMargin input = (if superClassOf input == Number do (input = input as Integer;if input < 0 do input = 0;this.captionMargin = input;this.StateChanged.Notify #CaptionMargin this.captionMargin;);this.GetCaptionMargin();),public fn SetCaptionPosition input = (local validValues = #(#Left, #Top);if findItem validValues input > 0 do (this.captionPosition = input;this.StateChanged.Notify #CaptionPosition this.captionPosition;);this.GetCaptionPosition();),public fn SetControl obj = (if this.isValidControl obj do (this.control = obj;this.StateChanged.Notify #Control this.control;);this.GetControl();),public fn SetExplicitH input = (if classOf input == UndefinedClass then (this.explicitH = input;this.StateChanged.Notify #ExplicitH this.explicitH;);else (if superClassOf input == Number do (input = input as Integer;if input < 0 do input = 0;this.explicitH = input;this.StateChanged.Notify #ExplicitH this.explicitH;););this.GetExplicitH();),public fn SetExplicitW input = (if classOf input == UndefinedClass then (this.explicitW = input;this.StateChanged.Notify #ExplicitW this.explicitW;);else (if superClassOf input == Number do (input = input as Integer;if input < 0 do input = 0;this.explicitW = input;this.StateChanged.Notify #ExplicitW this.explicitW;););this.GetExplicitW();),public fn SetRect rect = (local rectX = rect.X as Integer;local rectY = rect.Y as Integer;local rectW = rect.W as Integer;local rectH = rect.H as Integer;if classOf rect == Box2 and this.isValidControl this.control do (if this.control.Hwnd.Count == 1 do (local hwnd1 = this.control.Hwnd[1];local x = copy rectX;local y = copy rectY;local w = copy rectW;local h = copy rectH;if this.defaultW >= 0 do w = copy this.defaultW;if this.defaultH >= 0 do h = copy this.defaultH;if this.isValidExplicitW() do w = copy this.explicitW;if this.isValidExplicitH() do h = copy this.explicitH;local hwnd1Rect = this.getClientRect hwnd1;if not this.resizableW do w = hwnd1Rect.W;if not this.resizableH do h = hwnd1Rect.H;if w < this.minW do w = copy this.minW;if h < this.minH do h = copy this.minH;if w < 0 do w = 0;if h < 0 do h = 0;if rectW > w and this.isFixedW() do (case this.alignmentH of ((#Left): ();(#Center): x += (rectW / 2) as Integer - (w / 2) as Integer;(#Right): x += rectW - w;default: ();););if rectH > h and this.isFixedH() do (case this.alignmentV of ((#Top): ();(#Center): y += (rectH / 2) as Integer - (h / 2) as Integer;(#Bottom): y += rectH - h;default: ();););Windows.SetWindowPos hwnd1 x y w h true;this.StateChanged.Notify #RectUpdated undefined;););this.GetRect();),public fn SetVisibility input = (if classOf input == BooleanClass and this.isValidControl this.control do (this.control.Visible = input;this.StateChanged.Notify #Visibility this.control.Visible;);this.GetVisibility();),private fn getClientRect hwnd = (local parentHwnd = (Windows.GetHwndData hwnd)[2];local rect = Windows.GetWindowPos hwnd;local pos = Windows.ScreenToClient parentHwnd rect.X rect.Y;Box2 (pos.X as Integer) (pos.Y as Integer) rect.W rect.H;),private fn isFixedH = (this.defaultH >= 0 or this.isValidExplicitH() or not this.resizableH;),private fn isFixedW = (this.defaultW >= 0 or this.isValidExplicitW() or not this.resizableW;),private fn isValidControl obj = (classOf obj == LabelControl;),private fn isValidExplicitH = (classOf this.explicitH == Integer and this.explicitH >= 0;),private fn isValidExplicitW = (classOf this.explicitW == Integer and this.explicitW >= 0;),public fn StructName = #FlexLabelControlWidgetStruct,public fn Dump indent:"" out:listener = (format "%FlexLabelControlWidgetStruct\n" indent to:out;format "%  alignmentH:%\n" indent this.alignmentH to:out;format "%  alignmentV:%\n" indent this.alignmentV to:out;format "%  captionMargin:%\n" indent this.captionMargin to:out;format "%  captionPosition:%\n" indent this.captionPosition to:out;format "%  control:%\n" indent this.control to:out;format "%  defaultH:%\n" indent this.defaultH to:out;format "%  defaultW:%\n" indent this.defaultW to:out;format "%  explicitH:%\n" indent this.explicitH to:out;format "%  explicitW:%\n" indent this.explicitW to:out;format "%  minH:%\n" indent this.minH to:out;format "%  minW:%\n" indent this.minW to:out;format "%  resizableH:%\n" indent this.resizableH to:out;format "%  resizableW:%\n" indent this.resizableW to:out;ok;),public fn Equals obj = (local isEqualStructName = isStruct obj and isProperty obj #StructName and classOf obj.StructName == MAXScriptFunction and obj.StructName() == this.StructName();local isEqualProperties = isProperty obj #GetAlignmentH and classOf obj.GetAlignmentH == MAXScriptFunction and obj.GetAlignmentH() == this.GetAlignmentH() and isProperty obj #GetAlignmentV and classOf obj.GetAlignmentV == MAXScriptFunction and obj.GetAlignmentV() == this.GetAlignmentV() and isProperty obj #GetCaptionMargin and classOf obj.GetCaptionMargin == MAXScriptFunction and obj.GetCaptionMargin() == this.GetCaptionMargin() and isProperty obj #GetCaptionPosition and classOf obj.GetCaptionPosition == MAXScriptFunction and obj.GetCaptionPosition() == this.GetCaptionPosition() and isProperty obj #GetControl and classOf obj.GetControl == MAXScriptFunction and obj.GetControl() == this.GetControl() and isProperty obj #GetDefaultH and classOf obj.GetDefaultH == MAXScriptFunction and obj.GetDefaultH() == this.GetDefaultH() and isProperty obj #GetDefaultW and classOf obj.GetDefaultW == MAXScriptFunction and obj.GetDefaultW() == this.GetDefaultW() and isProperty obj #GetExplicitH and classOf obj.GetExplicitH == MAXScriptFunction and obj.GetExplicitH() == this.GetExplicitH() and isProperty obj #GetExplicitW and classOf obj.GetExplicitW == MAXScriptFunction and obj.GetExplicitW() == this.GetExplicitW() and isProperty obj #GetMinH and classOf obj.GetMinH == MAXScriptFunction and obj.GetMinH() == this.GetMinH() and isProperty obj #GetMinW and classOf obj.GetMinW == MAXScriptFunction and obj.GetMinW() == this.GetMinW() and isProperty obj #GetResizableH and classOf obj.GetResizableH == MAXScriptFunction and obj.GetResizableH() == this.GetResizableH() and isProperty obj #GetResizableW and classOf obj.GetResizableW == MAXScriptFunction and obj.GetResizableW() == this.GetResizableW();isEqualStructName and isEqualProperties;),public StateChanged,on Create do (this.StateChanged = ::std.ObservableStruct();this.SetControl this._CP1_;););::flexUIDefinitionPool[@"Model\Widget\FlexLinkControlWidget.ms"] = struct FlexLinkControlWidgetStruct (public _CP1_,private alignmentH = #Center,private alignmentV = #Center,private captionMargin = 3,private captionPosition = #Left,private control,private explicitH,private explicitW,private defaultH = -1,private defaultW = -1,private minH = 15,private minW = 2,private resizableH = false,private resizableW = false,public fn GetAlignmentH = (this.alignmentH;),public fn GetAlignmentV = (this.alignmentV;),public fn GetCaptionMargin = (this.captionMargin;),public fn GetCaptionPosition = (this.captionPosition;),public fn GetControl = (this.control;),public fn GetDefaultH = (this.defaultH;),public fn GetDefaultW = (this.defaultW;),public fn GetExplicitH = (this.explicitH;),public fn GetExplicitW = (this.explicitW;),public fn GetMinH = (this.minH;),public fn GetMinW = (this.minW;),public fn GetRect = (local rect = undefined;if this.isValidControl this.control do (local rectL = undefined;local rectT = undefined;local rectR = undefined;local rectB = undefined;for hwnd in this.control.Hwnd do (local hwndRect = this.getClientRect hwnd;local hwndL = hwndRect.X;local hwndT = hwndRect.Y;local hwndR = hwndL + hwndRect.W;local hwndB = hwndT + hwndRect.H;if classOf rectL != Integer do rectL = hwndL;if classOf rectT != Integer do rectT = hwndT;if classOf rectR != Integer do rectR = hwndR;if classOf rectB != Integer do rectB = hwndB;if rectL > hwndL do rectL = hwndL;if rectT > hwndT do rectT = hwndT;if rectR < hwndR do rectR = hwndR;if rectB < hwndB do rectB = hwndB;);if classOf rectL == Integer and classOf rectT == Integer and classOf rectR == Integer and classOf rectB == Integer do (local x = rectL;local y = rectT;local w = rectR - rectL;local h = rectB - rectT;rect = Box2 x y w h;););rect;),public fn GetResizableH = (this.resizableH;),public fn GetResizableW = (this.resizableW;),public fn GetVisibility = (local isVisible = undefined;if this.isValidControl this.control do (isVisible = this.control.Visible;);isVisible;),public fn SetAlignmentH input = (local validValues = #(#Left, #Center, #Right);if findItem validValues input > 0 do (this.alignmentH = input;this.StateChanged.Notify #AlignmentH this.alignmentH;);this.GetAlignmentH();),public fn SetAlignmentV input = (local validValues = #(#Top, #Center, #Bottom);if findItem validValues input > 0 do (this.alignmentV = input;this.StateChanged.Notify #AlignmentV this.alignmentV;);this.GetAlignmentV();),public fn SetCaptionMargin input = (if superClassOf input == Number do (input = input as Integer;if input < 0 do input = 0;this.captionMargin = input;this.StateChanged.Notify #CaptionMargin this.captionMargin;);this.GetCaptionMargin();),public fn SetCaptionPosition input = (local validValues = #(#Left, #Top);if findItem validValues input > 0 do (this.captionPosition = input;this.StateChanged.Notify #CaptionPosition this.captionPosition;);this.GetCaptionPosition();),public fn SetControl obj = (if this.isValidControl obj do (this.control = obj;this.StateChanged.Notify #Control this.control;);this.GetControl();),public fn SetExplicitH input = (if classOf input == UndefinedClass then (this.explicitH = input;this.StateChanged.Notify #ExplicitH this.explicitH;);else (if superClassOf input == Number do (input = input as Integer;if input < 0 do input = 0;this.explicitH = input;this.StateChanged.Notify #ExplicitH this.explicitH;););this.GetExplicitH();),public fn SetExplicitW input = (if classOf input == UndefinedClass then (this.explicitW = input;this.StateChanged.Notify #ExplicitW this.explicitW;);else (if superClassOf input == Number do (input = input as Integer;if input < 0 do input = 0;this.explicitW = input;this.StateChanged.Notify #ExplicitW this.explicitW;););this.GetExplicitW();),public fn SetRect rect = (local rectX = rect.X as Integer;local rectY = rect.Y as Integer;local rectW = rect.W as Integer;local rectH = rect.H as Integer;if classOf rect == Box2 and this.isValidControl this.control do (if this.control.Hwnd.Count == 1 do (local hwnd1 = this.control.Hwnd[1];local x = copy rectX;local y = copy rectY;local w = copy rectW;local h = copy rectH;if this.defaultW >= 0 do w = copy this.defaultW;if this.defaultH >= 0 do h = copy this.defaultH;if this.isValidExplicitW() do w = copy this.explicitW;if this.isValidExplicitH() do h = copy this.explicitH;local hwnd1Rect = this.getClientRect hwnd1;if not this.resizableW do w = hwnd1Rect.W;if not this.resizableH do h = hwnd1Rect.H;if w < this.minW do w = copy this.minW;if h < this.minH do h = copy this.minH;if w < 0 do w = 0;if h < 0 do h = 0;if rectW > w and this.isFixedW() do (case this.alignmentH of ((#Left): ();(#Center): x += (rectW / 2) as Integer - (w / 2) as Integer;(#Right): x += rectW - w;default: ();););if rectH > h and this.isFixedH() do (case this.alignmentV of ((#Top): ();(#Center): y += (rectH / 2) as Integer - (h / 2) as Integer;(#Bottom): y += rectH - h;default: ();););Windows.SetWindowPos hwnd1 x y w h true;this.StateChanged.Notify #RectUpdated undefined;););this.GetRect();),public fn SetVisibility input = (if classOf input == BooleanClass and this.isValidControl this.control do (this.control.Visible = input;this.StateChanged.Notify #Visibility this.control.Visible;);this.GetVisibility();),private fn getClientRect hwnd = (local parentHwnd = (Windows.GetHwndData hwnd)[2];local rect = Windows.GetWindowPos hwnd;local pos = Windows.ScreenToClient parentHwnd rect.X rect.Y;Box2 (pos.X as Integer) (pos.Y as Integer) rect.W rect.H;),private fn isFixedH = (this.defaultH >= 0 or this.isValidExplicitH() or not this.resizableH;),private fn isFixedW = (this.defaultW >= 0 or this.isValidExplicitW() or not this.resizableW;),private fn isValidControl obj = (classOf obj == LinkControl;),private fn isValidExplicitH = (classOf this.explicitH == Integer and this.explicitH >= 0;),private fn isValidExplicitW = (classOf this.explicitW == Integer and this.explicitW >= 0;),public fn StructName = #FlexLinkControlWidgetStruct,public fn Dump indent:"" out:listener = (format "%FlexLinkControlWidgetStruct\n" indent to:out;format "%  alignmentH:%\n" indent this.alignmentH to:out;format "%  alignmentV:%\n" indent this.alignmentV to:out;format "%  captionMargin:%\n" indent this.captionMargin to:out;format "%  captionPosition:%\n" indent this.captionPosition to:out;format "%  control:%\n" indent this.control to:out;format "%  defaultH:%\n" indent this.defaultH to:out;format "%  defaultW:%\n" indent this.defaultW to:out;format "%  explicitH:%\n" indent this.explicitH to:out;format "%  explicitW:%\n" indent this.explicitW to:out;format "%  minH:%\n" indent this.minH to:out;format "%  minW:%\n" indent this.minW to:out;format "%  resizableH:%\n" indent this.resizableH to:out;format "%  resizableW:%\n" indent this.resizableW to:out;ok;),public fn Equals obj = (local isEqualStructName = isStruct obj and isProperty obj #StructName and classOf obj.StructName == MAXScriptFunction and obj.StructName() == this.StructName();local isEqualProperties = isProperty obj #GetAlignmentH and classOf obj.GetAlignmentH == MAXScriptFunction and obj.GetAlignmentH() == this.GetAlignmentH() and isProperty obj #GetAlignmentV and classOf obj.GetAlignmentV == MAXScriptFunction and obj.GetAlignmentV() == this.GetAlignmentV() and isProperty obj #GetCaptionMargin and classOf obj.GetCaptionMargin == MAXScriptFunction and obj.GetCaptionMargin() == this.GetCaptionMargin() and isProperty obj #GetCaptionPosition and classOf obj.GetCaptionPosition == MAXScriptFunction and obj.GetCaptionPosition() == this.GetCaptionPosition() and isProperty obj #GetControl and classOf obj.GetControl == MAXScriptFunction and obj.GetControl() == this.GetControl() and isProperty obj #GetDefaultH and classOf obj.GetDefaultH == MAXScriptFunction and obj.GetDefaultH() == this.GetDefaultH() and isProperty obj #GetDefaultW and classOf obj.GetDefaultW == MAXScriptFunction and obj.GetDefaultW() == this.GetDefaultW() and isProperty obj #GetExplicitH and classOf obj.GetExplicitH == MAXScriptFunction and obj.GetExplicitH() == this.GetExplicitH() and isProperty obj #GetExplicitW and classOf obj.GetExplicitW == MAXScriptFunction and obj.GetExplicitW() == this.GetExplicitW() and isProperty obj #GetMinH and classOf obj.GetMinH == MAXScriptFunction and obj.GetMinH() == this.GetMinH() and isProperty obj #GetMinW and classOf obj.GetMinW == MAXScriptFunction and obj.GetMinW() == this.GetMinW() and isProperty obj #GetResizableH and classOf obj.GetResizableH == MAXScriptFunction and obj.GetResizableH() == this.GetResizableH() and isProperty obj #GetResizableW and classOf obj.GetResizableW == MAXScriptFunction and obj.GetResizableW() == this.GetResizableW();isEqualStructName and isEqualProperties;),public StateChanged,on Create do (this.StateChanged = ::std.ObservableStruct();this.SetControl this._CP1_;););::flexUIDefinitionPool[@"Model\Widget\FlexListBoxControlWidget.ms"] = struct FlexListBoxControlWidgetStruct (public _CP1_,private alignmentH = #Center,private alignmentV = #Center,private captionMargin = 3,private captionPosition = #Top,private control,private explicitH,private explicitW,private defaultH = -1,private defaultW = -1,private minH = 19,private minW = 23,private resizableH = true,private resizableW = true,public fn GetAlignmentH = (this.alignmentH;),public fn GetAlignmentV = (this.alignmentV;),public fn GetCaptionMargin = (this.captionMargin;),public fn GetCaptionPosition = (this.captionPosition;),public fn GetControl = (this.control;),public fn GetDefaultH = (this.defaultH;),public fn GetDefaultW = (this.defaultW;),public fn GetExplicitH = (this.explicitH;),public fn GetExplicitW = (this.explicitW;),public fn GetMinH = (this.minH;),public fn GetMinW = (this.minW;),public fn GetRect = (local rect = undefined;if this.isValidControl this.control do (local rectL = undefined;local rectT = undefined;local rectR = undefined;local rectB = undefined;for hwnd in this.control.Hwnd do (local hwndRect = this.getClientRect hwnd;local hwndL = hwndRect.X;local hwndT = hwndRect.Y;local hwndR = hwndL + hwndRect.W;local hwndB = hwndT + hwndRect.H;if classOf rectL != Integer do rectL = hwndL;if classOf rectT != Integer do rectT = hwndT;if classOf rectR != Integer do rectR = hwndR;if classOf rectB != Integer do rectB = hwndB;if rectL > hwndL do rectL = hwndL;if rectT > hwndT do rectT = hwndT;if rectR < hwndR do rectR = hwndR;if rectB < hwndB do rectB = hwndB;);if classOf rectL == Integer and classOf rectT == Integer and classOf rectR == Integer and classOf rectB == Integer do (local x = rectL;local y = rectT;local w = rectR - rectL;local h = rectB - rectT;rect = Box2 x y w h;););rect;),public fn GetResizableH = (this.resizableH;),public fn GetResizableW = (this.resizableW;),public fn GetVisibility = (local isVisible = undefined;if this.isValidControl this.control do (isVisible = this.control.Visible;);isVisible;),public fn SetAlignmentH input = (local validValues = #(#Left, #Center, #Right);if findItem validValues input > 0 do (this.alignmentH = input;this.StateChanged.Notify #AlignmentH this.alignmentH;);this.GetAlignmentH();),public fn SetAlignmentV input = (local validValues = #(#Top, #Center, #Bottom);if findItem validValues input > 0 do (this.alignmentV = input;this.StateChanged.Notify #AlignmentV this.alignmentV;);this.GetAlignmentV();),public fn SetCaptionMargin input = (if superClassOf input == Number do (input = input as Integer;if input < 0 do input = 0;this.captionMargin = input;this.StateChanged.Notify #CaptionMargin this.captionMargin;);this.GetCaptionMargin();),public fn SetCaptionPosition input = (local validValues = #(#Left, #Top);if findItem validValues input > 0 do (this.captionPosition = input;this.StateChanged.Notify #CaptionPosition this.captionPosition;);this.GetCaptionPosition();),public fn SetControl obj = (if this.isValidControl obj do (this.control = obj;this.StateChanged.Notify #Control this.control;);this.GetControl();),public fn SetExplicitH input = (if classOf input == UndefinedClass then (this.explicitH = input;this.StateChanged.Notify #ExplicitH this.explicitH;);else (if superClassOf input == Number do (input = input as Integer;if input < 0 do input = 0;this.explicitH = input;this.StateChanged.Notify #ExplicitH this.explicitH;););this.GetExplicitH();),public fn SetExplicitW input = (if classOf input == UndefinedClass then (this.explicitW = input;this.StateChanged.Notify #ExplicitW this.explicitW;);else (if superClassOf input == Number do (input = input as Integer;if input < 0 do input = 0;this.explicitW = input;this.StateChanged.Notify #ExplicitW this.explicitW;););this.GetExplicitW();),public fn SetRect rect = (local rectX = rect.X as Integer;local rectY = rect.Y as Integer;local rectW = rect.W as Integer;local rectH = rect.H as Integer;if classOf rect == Box2 and this.isValidControl this.control do (if this.control.Hwnd.Count == 2 do (local hwnd1 = this.control.Hwnd[1];local hwnd2 = this.control.Hwnd[2];local captionSize = getTextExtent this.control.Caption;local captionW = captionSize.X as Integer;local captionH = captionSize.Y as Integer;local captionOffset = 0;if captionW > 0 do (case this.captionPosition of ((#Left): captionOffset = captionW + this.captionMargin;(#Top): captionOffset = captionH + this.captionMargin;default: ();););local x = copy rectX;local y = copy rectY;local w = copy rectW;local h = copy rectH;case this.captionPosition of ((#Left): w -= captionOffset;(#Top): h -= captionOffset;default: (););if this.defaultW >= 0 do w = copy this.defaultW;if this.defaultH >= 0 do h = copy this.defaultH;if this.isValidExplicitW() do w = copy this.explicitW;if this.isValidExplicitH() do h = copy this.explicitH;local hwnd1Rect = this.getClientRect hwnd1;if not this.resizableW do w = hwnd1Rect.W;if not this.resizableH do h = hwnd1Rect.H;if w < this.minW do w = copy this.minW;if h < this.minH do h = copy this.minH;if w < 0 do w = 0;if h < 0 do h = 0;local rectMinW = copy w;if this.captionPosition == #Left do rectMinW += captionOffset;if rectW > rectMinW and this.isFixedW() do (case this.alignmentH of ((#Left): ();(#Center): (case this.captionPosition of ((#Left): x += (rectW / 2) as Integer - ((w + captionOffset) / 2) as Integer;(#Top): x += (rectW / 2) as Integer - (w / 2) as Integer;default: ();););(#Right): (x += rectW - w;if this.captionPosition == #Left do x -= captionOffset;);default: ();););local rectMinH = copy h;if this.captionPosition == #Top do rectMinH += captionOffset;if rectH > rectMinH and this.isFixedH() do (case this.alignmentV of ((#Top): ();(#Center): (case this.captionPosition of ((#Left): y += (rectH / 2) as Integer - (h / 2) as Integer;(#Top): y += (rectH / 2) as Integer - ((h + captionOffset) / 2) as Integer;default: ();););(#Bottom): (y += rectH - h;if this.captionPosition == #Top do y -= captionOffset;);default: ();););case this.captionPosition of ((#Left): x += captionOffset;(#Top): y += captionOffset;default: (););this.control.Height = h;Windows.SetWindowPos hwnd1 x y w h true;if captionW == 0 then (Windows.SetWindowPos hwnd2 x y 1 1 true;);else (local captionX = copy x;case this.captionPosition of ((#Left): captionX -= captionOffset;(#Top): ();default: (););local captionY = copy y;case this.captionPosition of ((#Left): captionY += (h / 2) as Integer - (captionH / 2) as Integer;(#Top): captionY -= captionOffset;default: (););Windows.SetWindowPos hwnd2 captionX captionY captionW captionH true;);this.StateChanged.Notify #RectUpdated undefined;););this.GetRect();),public fn SetVisibility input = (if classOf input == BooleanClass and this.isValidControl this.control do (this.control.Visible = input;this.StateChanged.Notify #Visibility this.control.Visible;);this.GetVisibility();),private fn getClientRect hwnd = (local parentHwnd = (Windows.GetHwndData hwnd)[2];local rect = Windows.GetWindowPos hwnd;local pos = Windows.ScreenToClient parentHwnd rect.X rect.Y;Box2 (pos.X as Integer) (pos.Y as Integer) rect.W rect.H;),private fn isFixedH = (this.defaultH >= 0 or this.isValidExplicitH() or not this.resizableH;),private fn isFixedW = (this.defaultW >= 0 or this.isValidExplicitW() or not this.resizableW;),private fn isValidControl obj = (classOf obj == ListBoxControl;),private fn isValidExplicitH = (classOf this.explicitH == Integer and this.explicitH >= 0;),private fn isValidExplicitW = (classOf this.explicitW == Integer and this.explicitW >= 0;),public fn StructName = #FlexListBoxControlWidgetStruct,public fn Dump indent:"" out:listener = (format "%FlexListBoxControlWidgetStruct\n" indent to:out;format "%  alignmentH:%\n" indent this.alignmentH to:out;format "%  alignmentV:%\n" indent this.alignmentV to:out;format "%  captionMargin:%\n" indent this.captionMargin to:out;format "%  captionPosition:%\n" indent this.captionPosition to:out;format "%  control:%\n" indent this.control to:out;format "%  defaultH:%\n" indent this.defaultH to:out;format "%  defaultW:%\n" indent this.defaultW to:out;format "%  explicitH:%\n" indent this.explicitH to:out;format "%  explicitW:%\n" indent this.explicitW to:out;format "%  minH:%\n" indent this.minH to:out;format "%  minW:%\n" indent this.minW to:out;format "%  resizableH:%\n" indent this.resizableH to:out;format "%  resizableW:%\n" indent this.resizableW to:out;ok;),public fn Equals obj = (local isEqualStructName = isStruct obj and isProperty obj #StructName and classOf obj.StructName == MAXScriptFunction and obj.StructName() == this.StructName();local isEqualProperties = isProperty obj #GetAlignmentH and classOf obj.GetAlignmentH == MAXScriptFunction and obj.GetAlignmentH() == this.GetAlignmentH() and isProperty obj #GetAlignmentV and classOf obj.GetAlignmentV == MAXScriptFunction and obj.GetAlignmentV() == this.GetAlignmentV() and isProperty obj #GetCaptionMargin and classOf obj.GetCaptionMargin == MAXScriptFunction and obj.GetCaptionMargin() == this.GetCaptionMargin() and isProperty obj #GetCaptionPosition and classOf obj.GetCaptionPosition == MAXScriptFunction and obj.GetCaptionPosition() == this.GetCaptionPosition() and isProperty obj #GetControl and classOf obj.GetControl == MAXScriptFunction and obj.GetControl() == this.GetControl() and isProperty obj #GetDefaultH and classOf obj.GetDefaultH == MAXScriptFunction and obj.GetDefaultH() == this.GetDefaultH() and isProperty obj #GetDefaultW and classOf obj.GetDefaultW == MAXScriptFunction and obj.GetDefaultW() == this.GetDefaultW() and isProperty obj #GetExplicitH and classOf obj.GetExplicitH == MAXScriptFunction and obj.GetExplicitH() == this.GetExplicitH() and isProperty obj #GetExplicitW and classOf obj.GetExplicitW == MAXScriptFunction and obj.GetExplicitW() == this.GetExplicitW() and isProperty obj #GetMinH and classOf obj.GetMinH == MAXScriptFunction and obj.GetMinH() == this.GetMinH() and isProperty obj #GetMinW and classOf obj.GetMinW == MAXScriptFunction and obj.GetMinW() == this.GetMinW() and isProperty obj #GetResizableH and classOf obj.GetResizableH == MAXScriptFunction and obj.GetResizableH() == this.GetResizableH() and isProperty obj #GetResizableW and classOf obj.GetResizableW == MAXScriptFunction and obj.GetResizableW() == this.GetResizableW();isEqualStructName and isEqualProperties;),public StateChanged,on Create do (this.StateChanged = ::std.ObservableStruct();this.SetControl this._CP1_;););::flexUIDefinitionPool[@"Model\Widget\FlexMapButtonControlWidget.ms"] = struct FlexMapButtonControlWidgetStruct (public _CP1_,private alignmentH = #Center,private alignmentV = #Center,private captionMargin = 3,private captionPosition = #Left,private control,private explicitH,private explicitW,private defaultH = -1,private defaultW = -1,private minH = 1,private minW = 1,private resizableH = true,private resizableW = true,public fn GetAlignmentH = (this.alignmentH;),public fn GetAlignmentV = (this.alignmentV;),public fn GetCaptionMargin = (this.captionMargin;),public fn GetCaptionPosition = (this.captionPosition;),public fn GetControl = (this.control;),public fn GetDefaultH = (this.defaultH;),public fn GetDefaultW = (this.defaultW;),public fn GetExplicitH = (this.explicitH;),public fn GetExplicitW = (this.explicitW;),public fn GetMinH = (this.minH;),public fn GetMinW = (this.minW;),public fn GetRect = (local rect = undefined;if this.isValidControl this.control do (local rectL = undefined;local rectT = undefined;local rectR = undefined;local rectB = undefined;for hwnd in this.control.Hwnd do (local hwndRect = this.getClientRect hwnd;local hwndL = hwndRect.X;local hwndT = hwndRect.Y;local hwndR = hwndL + hwndRect.W;local hwndB = hwndT + hwndRect.H;if classOf rectL != Integer do rectL = hwndL;if classOf rectT != Integer do rectT = hwndT;if classOf rectR != Integer do rectR = hwndR;if classOf rectB != Integer do rectB = hwndB;if rectL > hwndL do rectL = hwndL;if rectT > hwndT do rectT = hwndT;if rectR < hwndR do rectR = hwndR;if rectB < hwndB do rectB = hwndB;);if classOf rectL == Integer and classOf rectT == Integer and classOf rectR == Integer and classOf rectB == Integer do (local x = rectL;local y = rectT;local w = rectR - rectL;local h = rectB - rectT;rect = Box2 x y w h;););rect;),public fn GetResizableH = (this.resizableH;),public fn GetResizableW = (this.resizableW;),public fn GetVisibility = (local isVisible = undefined;if this.isValidControl this.control do (isVisible = this.control.Visible;);isVisible;),public fn SetAlignmentH input = (local validValues = #(#Left, #Center, #Right);if findItem validValues input > 0 do (this.alignmentH = input;this.StateChanged.Notify #AlignmentH this.alignmentH;);this.GetAlignmentH();),public fn SetAlignmentV input = (local validValues = #(#Top, #Center, #Bottom);if findItem validValues input > 0 do (this.alignmentV = input;this.StateChanged.Notify #AlignmentV this.alignmentV;);this.GetAlignmentV();),public fn SetCaptionMargin input = (if superClassOf input == Number do (input = input as Integer;if input < 0 do input = 0;this.captionMargin = input;this.StateChanged.Notify #CaptionMargin this.captionMargin;);this.GetCaptionMargin();),public fn SetCaptionPosition input = (local validValues = #(#Left, #Top);if findItem validValues input > 0 do (this.captionPosition = input;this.StateChanged.Notify #CaptionPosition this.captionPosition;);this.GetCaptionPosition();),public fn SetControl obj = (if this.isValidControl obj do (this.control = obj;this.StateChanged.Notify #Control this.control;);this.GetControl();),public fn SetExplicitH input = (if classOf input == UndefinedClass then (this.explicitH = input;this.StateChanged.Notify #ExplicitH this.explicitH;);else (if superClassOf input == Number do (input = input as Integer;if input < 0 do input = 0;this.explicitH = input;this.StateChanged.Notify #ExplicitH this.explicitH;););this.GetExplicitH();),public fn SetExplicitW input = (if classOf input == UndefinedClass then (this.explicitW = input;this.StateChanged.Notify #ExplicitW this.explicitW;);else (if superClassOf input == Number do (input = input as Integer;if input < 0 do input = 0;this.explicitW = input;this.StateChanged.Notify #ExplicitW this.explicitW;););this.GetExplicitW();),public fn SetRect rect = (local rectX = rect.X as Integer;local rectY = rect.Y as Integer;local rectW = rect.W as Integer;local rectH = rect.H as Integer;if classOf rect == Box2 and this.isValidControl this.control do (if this.control.Hwnd.Count == 1 do (local hwnd1 = this.control.Hwnd[1];local x = copy rectX;local y = copy rectY;local w = copy rectW;local h = copy rectH;if this.defaultW >= 0 do w = copy this.defaultW;if this.defaultH >= 0 do h = copy this.defaultH;if this.isValidExplicitW() do w = copy this.explicitW;if this.isValidExplicitH() do h = copy this.explicitH;local hwnd1Rect = this.getClientRect hwnd1;if not this.resizableW do w = hwnd1Rect.W;if not this.resizableH do h = hwnd1Rect.H;if w < this.minW do w = copy this.minW;if h < this.minH do h = copy this.minH;if w < 0 do w = 0;if h < 0 do h = 0;if rectW > w and this.isFixedW() do (case this.alignmentH of ((#Left): ();(#Center): x += (rectW / 2) as Integer - (w / 2) as Integer;(#Right): x += rectW - w;default: ();););if rectH > h and this.isFixedH() do (case this.alignmentV of ((#Top): ();(#Center): y += (rectH / 2) as Integer - (h / 2) as Integer;(#Bottom): y += rectH - h;default: ();););Windows.SetWindowPos hwnd1 x y w h true;this.StateChanged.Notify #RectUpdated undefined;););this.GetRect();),public fn SetVisibility input = (if classOf input == BooleanClass and this.isValidControl this.control do (this.control.Visible = input;this.StateChanged.Notify #Visibility this.control.Visible;);this.GetVisibility();),private fn getClientRect hwnd = (local parentHwnd = (Windows.GetHwndData hwnd)[2];local rect = Windows.GetWindowPos hwnd;local pos = Windows.ScreenToClient parentHwnd rect.X rect.Y;Box2 (pos.X as Integer) (pos.Y as Integer) rect.W rect.H;),private fn isFixedH = (this.defaultH >= 0 or this.isValidExplicitH() or not this.resizableH;),private fn isFixedW = (this.defaultW >= 0 or this.isValidExplicitW() or not this.resizableW;),private fn isValidControl obj = (classOf obj == MapButtonControl;),private fn isValidExplicitH = (classOf this.explicitH == Integer and this.explicitH >= 0;),private fn isValidExplicitW = (classOf this.explicitW == Integer and this.explicitW >= 0;),public fn StructName = #FlexMapButtonControlWidgetStruct,public fn Dump indent:"" out:listener = (format "%FlexMapButtonControlWidgetStruct\n" indent to:out;format "%  alignmentH:%\n" indent this.alignmentH to:out;format "%  alignmentV:%\n" indent this.alignmentV to:out;format "%  captionMargin:%\n" indent this.captionMargin to:out;format "%  captionPosition:%\n" indent this.captionPosition to:out;format "%  control:%\n" indent this.control to:out;format "%  defaultH:%\n" indent this.defaultH to:out;format "%  defaultW:%\n" indent this.defaultW to:out;format "%  explicitH:%\n" indent this.explicitH to:out;format "%  explicitW:%\n" indent this.explicitW to:out;format "%  minH:%\n" indent this.minH to:out;format "%  minW:%\n" indent this.minW to:out;format "%  resizableH:%\n" indent this.resizableH to:out;format "%  resizableW:%\n" indent this.resizableW to:out;ok;),public fn Equals obj = (local isEqualStructName = isStruct obj and isProperty obj #StructName and classOf obj.StructName == MAXScriptFunction and obj.StructName() == this.StructName();local isEqualProperties = isProperty obj #GetAlignmentH and classOf obj.GetAlignmentH == MAXScriptFunction and obj.GetAlignmentH() == this.GetAlignmentH() and isProperty obj #GetAlignmentV and classOf obj.GetAlignmentV == MAXScriptFunction and obj.GetAlignmentV() == this.GetAlignmentV() and isProperty obj #GetCaptionMargin and classOf obj.GetCaptionMargin == MAXScriptFunction and obj.GetCaptionMargin() == this.GetCaptionMargin() and isProperty obj #GetCaptionPosition and classOf obj.GetCaptionPosition == MAXScriptFunction and obj.GetCaptionPosition() == this.GetCaptionPosition() and isProperty obj #GetControl and classOf obj.GetControl == MAXScriptFunction and obj.GetControl() == this.GetControl() and isProperty obj #GetDefaultH and classOf obj.GetDefaultH == MAXScriptFunction and obj.GetDefaultH() == this.GetDefaultH() and isProperty obj #GetDefaultW and classOf obj.GetDefaultW == MAXScriptFunction and obj.GetDefaultW() == this.GetDefaultW() and isProperty obj #GetExplicitH and classOf obj.GetExplicitH == MAXScriptFunction and obj.GetExplicitH() == this.GetExplicitH() and isProperty obj #GetExplicitW and classOf obj.GetExplicitW == MAXScriptFunction and obj.GetExplicitW() == this.GetExplicitW() and isProperty obj #GetMinH and classOf obj.GetMinH == MAXScriptFunction and obj.GetMinH() == this.GetMinH() and isProperty obj #GetMinW and classOf obj.GetMinW == MAXScriptFunction and obj.GetMinW() == this.GetMinW() and isProperty obj #GetResizableH and classOf obj.GetResizableH == MAXScriptFunction and obj.GetResizableH() == this.GetResizableH() and isProperty obj #GetResizableW and classOf obj.GetResizableW == MAXScriptFunction and obj.GetResizableW() == this.GetResizableW();isEqualStructName and isEqualProperties;),public StateChanged,on Create do (this.StateChanged = ::std.ObservableStruct();this.SetControl this._CP1_;););::flexUIDefinitionPool[@"Model\Widget\FlexMaxCurveCtlWidget.ms"] = struct FlexMaxCurveCtlWidgetStruct (public _CP1_,private alignmentH = #Center,private alignmentV = #Center,private captionMargin = 3,private captionPosition = #Top,private control,private explicitH,private explicitW,private defaultH = -1,private defaultW = -1,private minH = 7,private minW = 7,private resizableH = false,private resizableW = false,public fn GetAlignmentH = (this.alignmentH;),public fn GetAlignmentV = (this.alignmentV;),public fn GetCaptionMargin = (this.captionMargin;),public fn GetCaptionPosition = (this.captionPosition;),public fn GetControl = (this.control;),public fn GetDefaultH = (this.defaultH;),public fn GetDefaultW = (this.defaultW;),public fn GetExplicitH = (this.explicitH;),public fn GetExplicitW = (this.explicitW;),public fn GetMinH = (this.minH;),public fn GetMinW = (this.minW;),public fn GetRect = (local rect = undefined;if this.isValidControl this.control do (local rectL = undefined;local rectT = undefined;local rectR = undefined;local rectB = undefined;for hwnd in this.control.Hwnd do (local hwndRect = this.getClientRect hwnd;local hwndL = hwndRect.X;local hwndT = hwndRect.Y;local hwndR = hwndL + hwndRect.W;local hwndB = hwndT + hwndRect.H;if classOf rectL != Integer do rectL = hwndL;if classOf rectT != Integer do rectT = hwndT;if classOf rectR != Integer do rectR = hwndR;if classOf rectB != Integer do rectB = hwndB;if rectL > hwndL do rectL = hwndL;if rectT > hwndT do rectT = hwndT;if rectR < hwndR do rectR = hwndR;if rectB < hwndB do rectB = hwndB;);if classOf rectL == Integer and classOf rectT == Integer and classOf rectR == Integer and classOf rectB == Integer do (local x = rectL;local y = rectT;local w = rectR - rectL;local h = rectB - rectT;rect = Box2 x y w h;););rect;),public fn GetResizableH = (this.resizableH;),public fn GetResizableW = (this.resizableW;),public fn GetVisibility = (local isVisible = undefined;if this.isValidControl this.control do (isVisible = this.control.Visible;);isVisible;),public fn SetAlignmentH input = (local validValues = #(#Left, #Center, #Right);if findItem validValues input > 0 do (this.alignmentH = input;this.StateChanged.Notify #AlignmentH this.alignmentH;);this.GetAlignmentH();),public fn SetAlignmentV input = (local validValues = #(#Top, #Center, #Bottom);if findItem validValues input > 0 do (this.alignmentV = input;this.StateChanged.Notify #AlignmentV this.alignmentV;);this.GetAlignmentV();),public fn SetCaptionMargin input = (if superClassOf input == Number do (input = input as Integer;if input < 0 do input = 0;this.captionMargin = input;this.StateChanged.Notify #CaptionMargin this.captionMargin;);this.GetCaptionMargin();),public fn SetCaptionPosition input = (local validValues = #(#Left, #Top);if findItem validValues input > 0 do (this.captionPosition = input;this.StateChanged.Notify #CaptionPosition this.captionPosition;);this.GetCaptionPosition();),public fn SetControl obj = (if this.isValidControl obj do (this.control = obj;this.StateChanged.Notify #Control this.control;);this.GetControl();),public fn SetExplicitH input = (if classOf input == UndefinedClass then (this.explicitH = input;this.StateChanged.Notify #ExplicitH this.explicitH;);else (if superClassOf input == Number do (input = input as Integer;if input < 0 do input = 0;this.explicitH = input;this.StateChanged.Notify #ExplicitH this.explicitH;););this.GetExplicitH();),public fn SetExplicitW input = (if classOf input == UndefinedClass then (this.explicitW = input;this.StateChanged.Notify #ExplicitW this.explicitW;);else (if superClassOf input == Number do (input = input as Integer;if input < 0 do input = 0;this.explicitW = input;this.StateChanged.Notify #ExplicitW this.explicitW;););this.GetExplicitW();),public fn SetRect rect = (local rectX = rect.X as Integer;local rectY = rect.Y as Integer;local rectW = rect.W as Integer;local rectH = rect.H as Integer;if classOf rect == Box2 and this.isValidControl this.control do (if this.control.Hwnd.Count == 2 do (local hwnd1 = this.control.Hwnd[1];local hwnd2 = this.control.Hwnd[2];local captionSize = getTextExtent this.control.Caption;local captionW = captionSize.X as Integer;local captionH = captionSize.Y as Integer;local captionOffset = 0;if captionW > 0 do (case this.captionPosition of ((#Left): captionOffset = captionW + this.captionMargin;(#Top): captionOffset = captionH + this.captionMargin;default: ();););local x = copy rectX;local y = copy rectY;local w = copy rectW;local h = copy rectH;case this.captionPosition of ((#Left): w -= captionOffset;(#Top): h -= captionOffset;default: (););if this.defaultW >= 0 do w = copy this.defaultW;if this.defaultH >= 0 do h = copy this.defaultH;if this.isValidExplicitW() do w = copy this.explicitW;if this.isValidExplicitH() do h = copy this.explicitH;local hwnd1Rect = this.getClientRect hwnd1;if not this.resizableW do w = hwnd1Rect.W;if not this.resizableH do h = hwnd1Rect.H;if w < this.minW do w = copy this.minW;if h < this.minH do h = copy this.minH;if w < 0 do w = 0;if h < 0 do h = 0;local rectMinW = copy w;if this.captionPosition == #Left do rectMinW += captionOffset;if rectW > rectMinW and this.isFixedW() do (case this.alignmentH of ((#Left): ();(#Center): (case this.captionPosition of ((#Left): x += (rectW / 2) as Integer - ((w + captionOffset) / 2) as Integer;(#Top): x += (rectW / 2) as Integer - (w / 2) as Integer;default: ();););(#Right): (x += rectW - w;if this.captionPosition == #Left do x -= captionOffset;);default: ();););local rectMinH = copy h;if this.captionPosition == #Top do rectMinH += captionOffset;if rectH > rectMinH and this.isFixedH() do (case this.alignmentV of ((#Top): ();(#Center): (case this.captionPosition of ((#Left): y += (rectH / 2) as Integer - (h / 2) as Integer;(#Top): y += (rectH / 2) as Integer - ((h + captionOffset) / 2) as Integer;default: ();););(#Bottom): (y += rectH - h;if this.captionPosition == #Top do y -= captionOffset;);default: ();););case this.captionPosition of ((#Left): x += captionOffset;(#Top): y += captionOffset;default: (););Windows.SetWindowPos hwnd1 x y w h true;if captionW == 0 then (Windows.SetWindowPos hwnd2 x y 1 1 true;);else (local captionX = copy x;case this.captionPosition of ((#Left): captionX -= captionOffset;(#Top): ();default: (););local captionY = copy y;case this.captionPosition of ((#Left): captionY += (h / 2) as Integer - (captionH / 2) as Integer;(#Top): captionY -= captionOffset;default: (););Windows.SetWindowPos hwnd2 captionX captionY captionW captionH true;);this.StateChanged.Notify #RectUpdated undefined;););this.GetRect();),public fn SetVisibility input = (if classOf input == BooleanClass and this.isValidControl this.control do (this.control.Visible = input;this.StateChanged.Notify #Visibility this.control.Visible;);this.GetVisibility();),private fn getClientRect hwnd = (local parentHwnd = (Windows.GetHwndData hwnd)[2];local rect = Windows.GetWindowPos hwnd;local pos = Windows.ScreenToClient parentHwnd rect.X rect.Y;Box2 (pos.X as Integer) (pos.Y as Integer) rect.W rect.H;),private fn isFixedH = (this.defaultH >= 0 or this.isValidExplicitH() or not this.resizableH;),private fn isFixedW = (this.defaultW >= 0 or this.isValidExplicitW() or not this.resizableW;),private fn isValidControl obj = (classOf obj == MaxCurveCtl;),private fn isValidExplicitH = (classOf this.explicitH == Integer and this.explicitH >= 0;),private fn isValidExplicitW = (classOf this.explicitW == Integer and this.explicitW >= 0;),public fn StructName = #FlexMaxCurveCtlWidgetStruct,public fn Dump indent:"" out:listener = (format "%FlexMaxCurveCtlWidgetStruct\n" indent to:out;format "%  alignmentH:%\n" indent this.alignmentH to:out;format "%  alignmentV:%\n" indent this.alignmentV to:out;format "%  captionMargin:%\n" indent this.captionMargin to:out;format "%  captionPosition:%\n" indent this.captionPosition to:out;format "%  control:%\n" indent this.control to:out;format "%  defaultH:%\n" indent this.defaultH to:out;format "%  defaultW:%\n" indent this.defaultW to:out;format "%  explicitH:%\n" indent this.explicitH to:out;format "%  explicitW:%\n" indent this.explicitW to:out;format "%  minH:%\n" indent this.minH to:out;format "%  minW:%\n" indent this.minW to:out;format "%  resizableH:%\n" indent this.resizableH to:out;format "%  resizableW:%\n" indent this.resizableW to:out;ok;),public fn Equals obj = (local isEqualStructName = isStruct obj and isProperty obj #StructName and classOf obj.StructName == MAXScriptFunction and obj.StructName() == this.StructName();local isEqualProperties = isProperty obj #GetAlignmentH and classOf obj.GetAlignmentH == MAXScriptFunction and obj.GetAlignmentH() == this.GetAlignmentH() and isProperty obj #GetAlignmentV and classOf obj.GetAlignmentV == MAXScriptFunction and obj.GetAlignmentV() == this.GetAlignmentV() and isProperty obj #GetCaptionMargin and classOf obj.GetCaptionMargin == MAXScriptFunction and obj.GetCaptionMargin() == this.GetCaptionMargin() and isProperty obj #GetCaptionPosition and classOf obj.GetCaptionPosition == MAXScriptFunction and obj.GetCaptionPosition() == this.GetCaptionPosition() and isProperty obj #GetControl and classOf obj.GetControl == MAXScriptFunction and obj.GetControl() == this.GetControl() and isProperty obj #GetDefaultH and classOf obj.GetDefaultH == MAXScriptFunction and obj.GetDefaultH() == this.GetDefaultH() and isProperty obj #GetDefaultW and classOf obj.GetDefaultW == MAXScriptFunction and obj.GetDefaultW() == this.GetDefaultW() and isProperty obj #GetExplicitH and classOf obj.GetExplicitH == MAXScriptFunction and obj.GetExplicitH() == this.GetExplicitH() and isProperty obj #GetExplicitW and classOf obj.GetExplicitW == MAXScriptFunction and obj.GetExplicitW() == this.GetExplicitW() and isProperty obj #GetMinH and classOf obj.GetMinH == MAXScriptFunction and obj.GetMinH() == this.GetMinH() and isProperty obj #GetMinW and classOf obj.GetMinW == MAXScriptFunction and obj.GetMinW() == this.GetMinW() and isProperty obj #GetResizableH and classOf obj.GetResizableH == MAXScriptFunction and obj.GetResizableH() == this.GetResizableH() and isProperty obj #GetResizableW and classOf obj.GetResizableW == MAXScriptFunction and obj.GetResizableW() == this.GetResizableW();isEqualStructName and isEqualProperties;),public StateChanged,on Create do (this.StateChanged = ::std.ObservableStruct();this.SetControl this._CP1_;););::flexUIDefinitionPool[@"Model\Widget\FlexMtlButtonControlWidget.ms"] = struct FlexMtlButtonControlWidgetStruct (public _CP1_,private alignmentH = #Center,private alignmentV = #Center,private captionMargin = 3,private captionPosition = #Left,private control,private explicitH,private explicitW,private defaultH = -1,private defaultW = -1,private minH = 1,private minW = 1,private resizableH = true,private resizableW = true,public fn GetAlignmentH = (this.alignmentH;),public fn GetAlignmentV = (this.alignmentV;),public fn GetCaptionMargin = (this.captionMargin;),public fn GetCaptionPosition = (this.captionPosition;),public fn GetControl = (this.control;),public fn GetDefaultH = (this.defaultH;),public fn GetDefaultW = (this.defaultW;),public fn GetExplicitH = (this.explicitH;),public fn GetExplicitW = (this.explicitW;),public fn GetMinH = (this.minH;),public fn GetMinW = (this.minW;),public fn GetRect = (local rect = undefined;if this.isValidControl this.control do (local rectL = undefined;local rectT = undefined;local rectR = undefined;local rectB = undefined;for hwnd in this.control.Hwnd do (local hwndRect = this.getClientRect hwnd;local hwndL = hwndRect.X;local hwndT = hwndRect.Y;local hwndR = hwndL + hwndRect.W;local hwndB = hwndT + hwndRect.H;if classOf rectL != Integer do rectL = hwndL;if classOf rectT != Integer do rectT = hwndT;if classOf rectR != Integer do rectR = hwndR;if classOf rectB != Integer do rectB = hwndB;if rectL > hwndL do rectL = hwndL;if rectT > hwndT do rectT = hwndT;if rectR < hwndR do rectR = hwndR;if rectB < hwndB do rectB = hwndB;);if classOf rectL == Integer and classOf rectT == Integer and classOf rectR == Integer and classOf rectB == Integer do (local x = rectL;local y = rectT;local w = rectR - rectL;local h = rectB - rectT;rect = Box2 x y w h;););rect;),public fn GetResizableH = (this.resizableH;),public fn GetResizableW = (this.resizableW;),public fn GetVisibility = (local isVisible = undefined;if this.isValidControl this.control do (isVisible = this.control.Visible;);isVisible;),public fn SetAlignmentH input = (local validValues = #(#Left, #Center, #Right);if findItem validValues input > 0 do (this.alignmentH = input;this.StateChanged.Notify #AlignmentH this.alignmentH;);this.GetAlignmentH();),public fn SetAlignmentV input = (local validValues = #(#Top, #Center, #Bottom);if findItem validValues input > 0 do (this.alignmentV = input;this.StateChanged.Notify #AlignmentV this.alignmentV;);this.GetAlignmentV();),public fn SetCaptionMargin input = (if superClassOf input == Number do (input = input as Integer;if input < 0 do input = 0;this.captionMargin = input;this.StateChanged.Notify #CaptionMargin this.captionMargin;);this.GetCaptionMargin();),public fn SetCaptionPosition input = (local validValues = #(#Left, #Top);if findItem validValues input > 0 do (this.captionPosition = input;this.StateChanged.Notify #CaptionPosition this.captionPosition;);this.GetCaptionPosition();),public fn SetControl obj = (if this.isValidControl obj do (this.control = obj;this.StateChanged.Notify #Control this.control;);this.GetControl();),public fn SetExplicitH input = (if classOf input == UndefinedClass then (this.explicitH = input;this.StateChanged.Notify #ExplicitH this.explicitH;);else (if superClassOf input == Number do (input = input as Integer;if input < 0 do input = 0;this.explicitH = input;this.StateChanged.Notify #ExplicitH this.explicitH;););this.GetExplicitH();),public fn SetExplicitW input = (if classOf input == UndefinedClass then (this.explicitW = input;this.StateChanged.Notify #ExplicitW this.explicitW;);else (if superClassOf input == Number do (input = input as Integer;if input < 0 do input = 0;this.explicitW = input;this.StateChanged.Notify #ExplicitW this.explicitW;););this.GetExplicitW();),public fn SetRect rect = (local rectX = rect.X as Integer;local rectY = rect.Y as Integer;local rectW = rect.W as Integer;local rectH = rect.H as Integer;if classOf rect == Box2 and this.isValidControl this.control do (if this.control.Hwnd.Count == 1 do (local hwnd1 = this.control.Hwnd[1];local x = copy rectX;local y = copy rectY;local w = copy rectW;local h = copy rectH;if this.defaultW >= 0 do w = copy this.defaultW;if this.defaultH >= 0 do h = copy this.defaultH;if this.isValidExplicitW() do w = copy this.explicitW;if this.isValidExplicitH() do h = copy this.explicitH;local hwnd1Rect = this.getClientRect hwnd1;if not this.resizableW do w = hwnd1Rect.W;if not this.resizableH do h = hwnd1Rect.H;if w < this.minW do w = copy this.minW;if h < this.minH do h = copy this.minH;if w < 0 do w = 0;if h < 0 do h = 0;if rectW > w and this.isFixedW() do (case this.alignmentH of ((#Left): ();(#Center): x += (rectW / 2) as Integer - (w / 2) as Integer;(#Right): x += rectW - w;default: ();););if rectH > h and this.isFixedH() do (case this.alignmentV of ((#Top): ();(#Center): y += (rectH / 2) as Integer - (h / 2) as Integer;(#Bottom): y += rectH - h;default: ();););Windows.SetWindowPos hwnd1 x y w h true;this.StateChanged.Notify #RectUpdated undefined;););this.GetRect();),public fn SetVisibility input = (if classOf input == BooleanClass and this.isValidControl this.control do (this.control.Visible = input;this.StateChanged.Notify #Visibility this.control.Visible;);this.GetVisibility();),private fn getClientRect hwnd = (local parentHwnd = (Windows.GetHwndData hwnd)[2];local rect = Windows.GetWindowPos hwnd;local pos = Windows.ScreenToClient parentHwnd rect.X rect.Y;Box2 (pos.X as Integer) (pos.Y as Integer) rect.W rect.H;),private fn isFixedH = (this.defaultH >= 0 or this.isValidExplicitH() or not this.resizableH;),private fn isFixedW = (this.defaultW >= 0 or this.isValidExplicitW() or not this.resizableW;),private fn isValidControl obj = (classOf obj == MtlButtonControl;),private fn isValidExplicitH = (classOf this.explicitH == Integer and this.explicitH >= 0;),private fn isValidExplicitW = (classOf this.explicitW == Integer and this.explicitW >= 0;),public fn StructName = #FlexMtlButtonControlWidgetStruct,public fn Dump indent:"" out:listener = (format "%FlexMtlButtonControlWidgetStruct\n" indent to:out;format "%  alignmentH:%\n" indent this.alignmentH to:out;format "%  alignmentV:%\n" indent this.alignmentV to:out;format "%  captionMargin:%\n" indent this.captionMargin to:out;format "%  captionPosition:%\n" indent this.captionPosition to:out;format "%  control:%\n" indent this.control to:out;format "%  defaultH:%\n" indent this.defaultH to:out;format "%  defaultW:%\n" indent this.defaultW to:out;format "%  explicitH:%\n" indent this.explicitH to:out;format "%  explicitW:%\n" indent this.explicitW to:out;format "%  minH:%\n" indent this.minH to:out;format "%  minW:%\n" indent this.minW to:out;format "%  resizableH:%\n" indent this.resizableH to:out;format "%  resizableW:%\n" indent this.resizableW to:out;ok;),public fn Equals obj = (local isEqualStructName = isStruct obj and isProperty obj #StructName and classOf obj.StructName == MAXScriptFunction and obj.StructName() == this.StructName();local isEqualProperties = isProperty obj #GetAlignmentH and classOf obj.GetAlignmentH == MAXScriptFunction and obj.GetAlignmentH() == this.GetAlignmentH() and isProperty obj #GetAlignmentV and classOf obj.GetAlignmentV == MAXScriptFunction and obj.GetAlignmentV() == this.GetAlignmentV() and isProperty obj #GetCaptionMargin and classOf obj.GetCaptionMargin == MAXScriptFunction and obj.GetCaptionMargin() == this.GetCaptionMargin() and isProperty obj #GetCaptionPosition and classOf obj.GetCaptionPosition == MAXScriptFunction and obj.GetCaptionPosition() == this.GetCaptionPosition() and isProperty obj #GetControl and classOf obj.GetControl == MAXScriptFunction and obj.GetControl() == this.GetControl() and isProperty obj #GetDefaultH and classOf obj.GetDefaultH == MAXScriptFunction and obj.GetDefaultH() == this.GetDefaultH() and isProperty obj #GetDefaultW and classOf obj.GetDefaultW == MAXScriptFunction and obj.GetDefaultW() == this.GetDefaultW() and isProperty obj #GetExplicitH and classOf obj.GetExplicitH == MAXScriptFunction and obj.GetExplicitH() == this.GetExplicitH() and isProperty obj #GetExplicitW and classOf obj.GetExplicitW == MAXScriptFunction and obj.GetExplicitW() == this.GetExplicitW() and isProperty obj #GetMinH and classOf obj.GetMinH == MAXScriptFunction and obj.GetMinH() == this.GetMinH() and isProperty obj #GetMinW and classOf obj.GetMinW == MAXScriptFunction and obj.GetMinW() == this.GetMinW() and isProperty obj #GetResizableH and classOf obj.GetResizableH == MAXScriptFunction and obj.GetResizableH() == this.GetResizableH() and isProperty obj #GetResizableW and classOf obj.GetResizableW == MAXScriptFunction and obj.GetResizableW() == this.GetResizableW();isEqualStructName and isEqualProperties;),public StateChanged,on Create do (this.StateChanged = ::std.ObservableStruct();this.SetControl this._CP1_;););::flexUIDefinitionPool[@"Model\Widget\FlexMultiListBoxControlWidget.ms"] = struct FlexMultiListBoxControlWidgetStruct (public _CP1_,private alignmentH = #Center,private alignmentV = #Center,private captionMargin = 3,private captionPosition = #Top,private control,private explicitH,private explicitW,private defaultH = -1,private defaultW = -1,private minH = 19,private minW = 23,private resizableH = true,private resizableW = true,public fn GetAlignmentH = (this.alignmentH;),public fn GetAlignmentV = (this.alignmentV;),public fn GetCaptionMargin = (this.captionMargin;),public fn GetCaptionPosition = (this.captionPosition;),public fn GetControl = (this.control;),public fn GetDefaultH = (this.defaultH;),public fn GetDefaultW = (this.defaultW;),public fn GetExplicitH = (this.explicitH;),public fn GetExplicitW = (this.explicitW;),public fn GetMinH = (this.minH;),public fn GetMinW = (this.minW;),public fn GetRect = (local rect = undefined;if this.isValidControl this.control do (local rectL = undefined;local rectT = undefined;local rectR = undefined;local rectB = undefined;for hwnd in this.control.Hwnd do (local hwndRect = this.getClientRect hwnd;local hwndL = hwndRect.X;local hwndT = hwndRect.Y;local hwndR = hwndL + hwndRect.W;local hwndB = hwndT + hwndRect.H;if classOf rectL != Integer do rectL = hwndL;if classOf rectT != Integer do rectT = hwndT;if classOf rectR != Integer do rectR = hwndR;if classOf rectB != Integer do rectB = hwndB;if rectL > hwndL do rectL = hwndL;if rectT > hwndT do rectT = hwndT;if rectR < hwndR do rectR = hwndR;if rectB < hwndB do rectB = hwndB;);if classOf rectL == Integer and classOf rectT == Integer and classOf rectR == Integer and classOf rectB == Integer do (local x = rectL;local y = rectT;local w = rectR - rectL;local h = rectB - rectT;rect = Box2 x y w h;););rect;),public fn GetResizableH = (this.resizableH;),public fn GetResizableW = (this.resizableW;),public fn GetVisibility = (local isVisible = undefined;if this.isValidControl this.control do (isVisible = this.control.Visible;);isVisible;),public fn SetAlignmentH input = (local validValues = #(#Left, #Center, #Right);if findItem validValues input > 0 do (this.alignmentH = input;this.StateChanged.Notify #AlignmentH this.alignmentH;);this.GetAlignmentH();),public fn SetAlignmentV input = (local validValues = #(#Top, #Center, #Bottom);if findItem validValues input > 0 do (this.alignmentV = input;this.StateChanged.Notify #AlignmentV this.alignmentV;);this.GetAlignmentV();),public fn SetCaptionMargin input = (if superClassOf input == Number do (input = input as Integer;if input < 0 do input = 0;this.captionMargin = input;this.StateChanged.Notify #CaptionMargin this.captionMargin;);this.GetCaptionMargin();),public fn SetCaptionPosition input = (local validValues = #(#Left, #Top);if findItem validValues input > 0 do (this.captionPosition = input;this.StateChanged.Notify #CaptionPosition this.captionPosition;);this.GetCaptionPosition();),public fn SetControl obj = (if this.isValidControl obj do (this.control = obj;this.StateChanged.Notify #Control this.control;);this.GetControl();),public fn SetExplicitH input = (if classOf input == UndefinedClass then (this.explicitH = input;this.StateChanged.Notify #ExplicitH this.explicitH;);else (if superClassOf input == Number do (input = input as Integer;if input < 0 do input = 0;this.explicitH = input;this.StateChanged.Notify #ExplicitH this.explicitH;););this.GetExplicitH();),public fn SetExplicitW input = (if classOf input == UndefinedClass then (this.explicitW = input;this.StateChanged.Notify #ExplicitW this.explicitW;);else (if superClassOf input == Number do (input = input as Integer;if input < 0 do input = 0;this.explicitW = input;this.StateChanged.Notify #ExplicitW this.explicitW;););this.GetExplicitW();),public fn SetRect rect = (local rectX = rect.X as Integer;local rectY = rect.Y as Integer;local rectW = rect.W as Integer;local rectH = rect.H as Integer;if classOf rect == Box2 and this.isValidControl this.control do (if this.control.Hwnd.Count == 2 do (local hwnd1 = this.control.Hwnd[1];local hwnd2 = this.control.Hwnd[2];local captionSize = getTextExtent this.control.Caption;local captionW = captionSize.X as Integer;local captionH = captionSize.Y as Integer;local captionOffset = 0;if captionW > 0 do (case this.captionPosition of ((#Left): captionOffset = captionW + this.captionMargin;(#Top): captionOffset = captionH + this.captionMargin;default: ();););local x = copy rectX;local y = copy rectY;local w = copy rectW;local h = copy rectH;case this.captionPosition of ((#Left): w -= captionOffset;(#Top): h -= captionOffset;default: (););if this.defaultW >= 0 do w = copy this.defaultW;if this.defaultH >= 0 do h = copy this.defaultH;if this.isValidExplicitW() do w = copy this.explicitW;if this.isValidExplicitH() do h = copy this.explicitH;local hwnd1Rect = this.getClientRect hwnd1;if not this.resizableW do w = hwnd1Rect.W;if not this.resizableH do h = hwnd1Rect.H;if w < this.minW do w = copy this.minW;if h < this.minH do h = copy this.minH;if w < 0 do w = 0;if h < 0 do h = 0;local rectMinW = copy w;if this.captionPosition == #Left do rectMinW += captionOffset;if rectW > rectMinW and this.isFixedW() do (case this.alignmentH of ((#Left): ();(#Center): (case this.captionPosition of ((#Left): x += (rectW / 2) as Integer - ((w + captionOffset) / 2) as Integer;(#Top): x += (rectW / 2) as Integer - (w / 2) as Integer;default: ();););(#Right): (x += rectW - w;if this.captionPosition == #Left do x -= captionOffset;);default: ();););local rectMinH = copy h;if this.captionPosition == #Top do rectMinH += captionOffset;if rectH > rectMinH and this.isFixedH() do (case this.alignmentV of ((#Top): ();(#Center): (case this.captionPosition of ((#Left): y += (rectH / 2) as Integer - (h / 2) as Integer;(#Top): y += (rectH / 2) as Integer - ((h + captionOffset) / 2) as Integer;default: ();););(#Bottom): (y += rectH - h;if this.captionPosition == #Top do y -= captionOffset;);default: ();););case this.captionPosition of ((#Left): x += captionOffset;(#Top): y += captionOffset;default: (););this.control.Height = h;Windows.SetWindowPos hwnd1 x y w h true;if captionW == 0 then (Windows.SetWindowPos hwnd2 x y 1 1 true;);else (local captionX = copy x;case this.captionPosition of ((#Left): captionX -= captionOffset;(#Top): ();default: (););local captionY = copy y;case this.captionPosition of ((#Left): captionY += (h / 2) as Integer - (captionH / 2) as Integer;(#Top): captionY -= captionOffset;default: (););Windows.SetWindowPos hwnd2 captionX captionY captionW captionH true;);this.StateChanged.Notify #RectUpdated undefined;););this.GetRect();),public fn SetVisibility input = (if classOf input == BooleanClass and this.isValidControl this.control do (this.control.Visible = input;this.StateChanged.Notify #Visibility this.control.Visible;);this.GetVisibility();),private fn getClientRect hwnd = (local parentHwnd = (Windows.GetHwndData hwnd)[2];local rect = Windows.GetWindowPos hwnd;local pos = Windows.ScreenToClient parentHwnd rect.X rect.Y;Box2 (pos.X as Integer) (pos.Y as Integer) rect.W rect.H;),private fn isFixedH = (this.defaultH >= 0 or this.isValidExplicitH() or not this.resizableH;),private fn isFixedW = (this.defaultW >= 0 or this.isValidExplicitW() or not this.resizableW;),private fn isValidControl obj = (classOf obj == MultiListBoxControl;),private fn isValidExplicitH = (classOf this.explicitH == Integer and this.explicitH >= 0;),private fn isValidExplicitW = (classOf this.explicitW == Integer and this.explicitW >= 0;),public fn StructName = #FlexMultiListBoxControlWidgetStruct,public fn Dump indent:"" out:listener = (format "%FlexMultiListBoxControlWidgetStruct\n" indent to:out;format "%  alignmentH:%\n" indent this.alignmentH to:out;format "%  alignmentV:%\n" indent this.alignmentV to:out;format "%  captionMargin:%\n" indent this.captionMargin to:out;format "%  captionPosition:%\n" indent this.captionPosition to:out;format "%  control:%\n" indent this.control to:out;format "%  defaultH:%\n" indent this.defaultH to:out;format "%  defaultW:%\n" indent this.defaultW to:out;format "%  explicitH:%\n" indent this.explicitH to:out;format "%  explicitW:%\n" indent this.explicitW to:out;format "%  minH:%\n" indent this.minH to:out;format "%  minW:%\n" indent this.minW to:out;format "%  resizableH:%\n" indent this.resizableH to:out;format "%  resizableW:%\n" indent this.resizableW to:out;ok;),public fn Equals obj = (local isEqualStructName = isStruct obj and isProperty obj #StructName and classOf obj.StructName == MAXScriptFunction and obj.StructName() == this.StructName();local isEqualProperties = isProperty obj #GetAlignmentH and classOf obj.GetAlignmentH == MAXScriptFunction and obj.GetAlignmentH() == this.GetAlignmentH() and isProperty obj #GetAlignmentV and classOf obj.GetAlignmentV == MAXScriptFunction and obj.GetAlignmentV() == this.GetAlignmentV() and isProperty obj #GetCaptionMargin and classOf obj.GetCaptionMargin == MAXScriptFunction and obj.GetCaptionMargin() == this.GetCaptionMargin() and isProperty obj #GetCaptionPosition and classOf obj.GetCaptionPosition == MAXScriptFunction and obj.GetCaptionPosition() == this.GetCaptionPosition() and isProperty obj #GetControl and classOf obj.GetControl == MAXScriptFunction and obj.GetControl() == this.GetControl() and isProperty obj #GetDefaultH and classOf obj.GetDefaultH == MAXScriptFunction and obj.GetDefaultH() == this.GetDefaultH() and isProperty obj #GetDefaultW and classOf obj.GetDefaultW == MAXScriptFunction and obj.GetDefaultW() == this.GetDefaultW() and isProperty obj #GetExplicitH and classOf obj.GetExplicitH == MAXScriptFunction and obj.GetExplicitH() == this.GetExplicitH() and isProperty obj #GetExplicitW and classOf obj.GetExplicitW == MAXScriptFunction and obj.GetExplicitW() == this.GetExplicitW() and isProperty obj #GetMinH and classOf obj.GetMinH == MAXScriptFunction and obj.GetMinH() == this.GetMinH() and isProperty obj #GetMinW and classOf obj.GetMinW == MAXScriptFunction and obj.GetMinW() == this.GetMinW() and isProperty obj #GetResizableH and classOf obj.GetResizableH == MAXScriptFunction and obj.GetResizableH() == this.GetResizableH() and isProperty obj #GetResizableW and classOf obj.GetResizableW == MAXScriptFunction and obj.GetResizableW() == this.GetResizableW();isEqualStructName and isEqualProperties;),public StateChanged,on Create do (this.StateChanged = ::std.ObservableStruct();this.SetControl this._CP1_;););::flexUIDefinitionPool[@"Model\Widget\FlexPickerControlWidget.ms"] = struct FlexPickerControlWidgetStruct (public _CP1_,private alignmentH = #Center,private alignmentV = #Center,private captionMargin = 3,private captionPosition = #Left,private control,private explicitH,private explicitW,private defaultH = -1,private defaultW = -1,private minH = 1,private minW = 1,private resizableH = true,private resizableW = true,public fn GetAlignmentH = (this.alignmentH;),public fn GetAlignmentV = (this.alignmentV;),public fn GetCaptionMargin = (this.captionMargin;),public fn GetCaptionPosition = (this.captionPosition;),public fn GetControl = (this.control;),public fn GetDefaultH = (this.defaultH;),public fn GetDefaultW = (this.defaultW;),public fn GetExplicitH = (this.explicitH;),public fn GetExplicitW = (this.explicitW;),public fn GetMinH = (this.minH;),public fn GetMinW = (this.minW;),public fn GetRect = (local rect = undefined;if this.isValidControl this.control do (local rectL = undefined;local rectT = undefined;local rectR = undefined;local rectB = undefined;for hwnd in this.control.Hwnd do (local hwndRect = this.getClientRect hwnd;local hwndL = hwndRect.X;local hwndT = hwndRect.Y;local hwndR = hwndL + hwndRect.W;local hwndB = hwndT + hwndRect.H;if classOf rectL != Integer do rectL = hwndL;if classOf rectT != Integer do rectT = hwndT;if classOf rectR != Integer do rectR = hwndR;if classOf rectB != Integer do rectB = hwndB;if rectL > hwndL do rectL = hwndL;if rectT > hwndT do rectT = hwndT;if rectR < hwndR do rectR = hwndR;if rectB < hwndB do rectB = hwndB;);if classOf rectL == Integer and classOf rectT == Integer and classOf rectR == Integer and classOf rectB == Integer do (local x = rectL;local y = rectT;local w = rectR - rectL;local h = rectB - rectT;rect = Box2 x y w h;););rect;),public fn GetResizableH = (this.resizableH;),public fn GetResizableW = (this.resizableW;),public fn GetVisibility = (local isVisible = undefined;if this.isValidControl this.control do (isVisible = this.control.Visible;);isVisible;),public fn SetAlignmentH input = (local validValues = #(#Left, #Center, #Right);if findItem validValues input > 0 do (this.alignmentH = input;this.StateChanged.Notify #AlignmentH this.alignmentH;);this.GetAlignmentH();),public fn SetAlignmentV input = (local validValues = #(#Top, #Center, #Bottom);if findItem validValues input > 0 do (this.alignmentV = input;this.StateChanged.Notify #AlignmentV this.alignmentV;);this.GetAlignmentV();),public fn SetCaptionMargin input = (if superClassOf input == Number do (input = input as Integer;if input < 0 do input = 0;this.captionMargin = input;this.StateChanged.Notify #CaptionMargin this.captionMargin;);this.GetCaptionMargin();),public fn SetCaptionPosition input = (local validValues = #(#Left, #Top);if findItem validValues input > 0 do (this.captionPosition = input;this.StateChanged.Notify #CaptionPosition this.captionPosition;);this.GetCaptionPosition();),public fn SetControl obj = (if this.isValidControl obj do (this.control = obj;this.StateChanged.Notify #Control this.control;);this.GetControl();),public fn SetExplicitH input = (if classOf input == UndefinedClass then (this.explicitH = input;this.StateChanged.Notify #ExplicitH this.explicitH;);else (if superClassOf input == Number do (input = input as Integer;if input < 0 do input = 0;this.explicitH = input;this.StateChanged.Notify #ExplicitH this.explicitH;););this.GetExplicitH();),public fn SetExplicitW input = (if classOf input == UndefinedClass then (this.explicitW = input;this.StateChanged.Notify #ExplicitW this.explicitW;);else (if superClassOf input == Number do (input = input as Integer;if input < 0 do input = 0;this.explicitW = input;this.StateChanged.Notify #ExplicitW this.explicitW;););this.GetExplicitW();),public fn SetRect rect = (local rectX = rect.X as Integer;local rectY = rect.Y as Integer;local rectW = rect.W as Integer;local rectH = rect.H as Integer;if classOf rect == Box2 and this.isValidControl this.control do (if this.control.Hwnd.Count == 1 do (local hwnd1 = this.control.Hwnd[1];local x = copy rectX;local y = copy rectY;local w = copy rectW;local h = copy rectH;if this.defaultW >= 0 do w = copy this.defaultW;if this.defaultH >= 0 do h = copy this.defaultH;if this.isValidExplicitW() do w = copy this.explicitW;if this.isValidExplicitH() do h = copy this.explicitH;local hwnd1Rect = this.getClientRect hwnd1;if not this.resizableW do w = hwnd1Rect.W;if not this.resizableH do h = hwnd1Rect.H;if w < this.minW do w = copy this.minW;if h < this.minH do h = copy this.minH;if w < 0 do w = 0;if h < 0 do h = 0;if rectW > w and this.isFixedW() do (case this.alignmentH of ((#Left): ();(#Center): x += (rectW / 2) as Integer - (w / 2) as Integer;(#Right): x += rectW - w;default: ();););if rectH > h and this.isFixedH() do (case this.alignmentV of ((#Top): ();(#Center): y += (rectH / 2) as Integer - (h / 2) as Integer;(#Bottom): y += rectH - h;default: ();););Windows.SetWindowPos hwnd1 x y w h true;this.StateChanged.Notify #RectUpdated undefined;););this.GetRect();),public fn SetVisibility input = (if classOf input == BooleanClass and this.isValidControl this.control do (this.control.Visible = input;this.StateChanged.Notify #Visibility this.control.Visible;);this.GetVisibility();),private fn getClientRect hwnd = (local parentHwnd = (Windows.GetHwndData hwnd)[2];local rect = Windows.GetWindowPos hwnd;local pos = Windows.ScreenToClient parentHwnd rect.X rect.Y;Box2 (pos.X as Integer) (pos.Y as Integer) rect.W rect.H;),private fn isFixedH = (this.defaultH >= 0 or this.isValidExplicitH() or not this.resizableH;),private fn isFixedW = (this.defaultW >= 0 or this.isValidExplicitW() or not this.resizableW;),private fn isValidControl obj = (classOf obj == PickerControl;),private fn isValidExplicitH = (classOf this.explicitH == Integer and this.explicitH >= 0;),private fn isValidExplicitW = (classOf this.explicitW == Integer and this.explicitW >= 0;),public fn StructName = #FlexPickerControlWidgetStruct,public fn Dump indent:"" out:listener = (format "%FlexPickerControlWidgetStruct\n" indent to:out;format "%  alignmentH:%\n" indent this.alignmentH to:out;format "%  alignmentV:%\n" indent this.alignmentV to:out;format "%  captionMargin:%\n" indent this.captionMargin to:out;format "%  captionPosition:%\n" indent this.captionPosition to:out;format "%  control:%\n" indent this.control to:out;format "%  defaultH:%\n" indent this.defaultH to:out;format "%  defaultW:%\n" indent this.defaultW to:out;format "%  explicitH:%\n" indent this.explicitH to:out;format "%  explicitW:%\n" indent this.explicitW to:out;format "%  minH:%\n" indent this.minH to:out;format "%  minW:%\n" indent this.minW to:out;format "%  resizableH:%\n" indent this.resizableH to:out;format "%  resizableW:%\n" indent this.resizableW to:out;ok;),public fn Equals obj = (local isEqualStructName = isStruct obj and isProperty obj #StructName and classOf obj.StructName == MAXScriptFunction and obj.StructName() == this.StructName();local isEqualProperties = isProperty obj #GetAlignmentH and classOf obj.GetAlignmentH == MAXScriptFunction and obj.GetAlignmentH() == this.GetAlignmentH() and isProperty obj #GetAlignmentV and classOf obj.GetAlignmentV == MAXScriptFunction and obj.GetAlignmentV() == this.GetAlignmentV() and isProperty obj #GetCaptionMargin and classOf obj.GetCaptionMargin == MAXScriptFunction and obj.GetCaptionMargin() == this.GetCaptionMargin() and isProperty obj #GetCaptionPosition and classOf obj.GetCaptionPosition == MAXScriptFunction and obj.GetCaptionPosition() == this.GetCaptionPosition() and isProperty obj #GetControl and classOf obj.GetControl == MAXScriptFunction and obj.GetControl() == this.GetControl() and isProperty obj #GetDefaultH and classOf obj.GetDefaultH == MAXScriptFunction and obj.GetDefaultH() == this.GetDefaultH() and isProperty obj #GetDefaultW and classOf obj.GetDefaultW == MAXScriptFunction and obj.GetDefaultW() == this.GetDefaultW() and isProperty obj #GetExplicitH and classOf obj.GetExplicitH == MAXScriptFunction and obj.GetExplicitH() == this.GetExplicitH() and isProperty obj #GetExplicitW and classOf obj.GetExplicitW == MAXScriptFunction and obj.GetExplicitW() == this.GetExplicitW() and isProperty obj #GetMinH and classOf obj.GetMinH == MAXScriptFunction and obj.GetMinH() == this.GetMinH() and isProperty obj #GetMinW and classOf obj.GetMinW == MAXScriptFunction and obj.GetMinW() == this.GetMinW() and isProperty obj #GetResizableH and classOf obj.GetResizableH == MAXScriptFunction and obj.GetResizableH() == this.GetResizableH() and isProperty obj #GetResizableW and classOf obj.GetResizableW == MAXScriptFunction and obj.GetResizableW() == this.GetResizableW();isEqualStructName and isEqualProperties;),public StateChanged,on Create do (this.StateChanged = ::std.ObservableStruct();this.SetControl this._CP1_;););::flexUIDefinitionPool[@"Model\Widget\FlexProgressBarWidget.ms"] = struct FlexProgressBarWidgetStruct (public _CP1_,private alignmentH = #Center,private alignmentV = #Center,private captionMargin = 3,private captionPosition = #Left,private control,private explicitH,private explicitW,private defaultH = 14,private defaultW = -1,private minH = 1,private minW = 1,private resizableH = true,private resizableW = true,public fn GetAlignmentH = (this.alignmentH;),public fn GetAlignmentV = (this.alignmentV;),public fn GetCaptionMargin = (this.captionMargin;),public fn GetCaptionPosition = (this.captionPosition;),public fn GetControl = (this.control;),public fn GetDefaultH = (this.defaultH;),public fn GetDefaultW = (this.defaultW;),public fn GetExplicitH = (this.explicitH;),public fn GetExplicitW = (this.explicitW;),public fn GetMinH = (this.minH;),public fn GetMinW = (this.minW;),public fn GetRect = (local rect = undefined;if this.isValidControl this.control do (local rectL = undefined;local rectT = undefined;local rectR = undefined;local rectB = undefined;for hwnd in this.control.Hwnd do (local hwndRect = this.getClientRect hwnd;local hwndL = hwndRect.X;local hwndT = hwndRect.Y;local hwndR = hwndL + hwndRect.W;local hwndB = hwndT + hwndRect.H;if classOf rectL != Integer do rectL = hwndL;if classOf rectT != Integer do rectT = hwndT;if classOf rectR != Integer do rectR = hwndR;if classOf rectB != Integer do rectB = hwndB;if rectL > hwndL do rectL = hwndL;if rectT > hwndT do rectT = hwndT;if rectR < hwndR do rectR = hwndR;if rectB < hwndB do rectB = hwndB;);if classOf rectL == Integer and classOf rectT == Integer and classOf rectR == Integer and classOf rectB == Integer do (local x = rectL;local y = rectT;local w = rectR - rectL;local h = rectB - rectT;rect = Box2 x y w h;););rect;),public fn GetResizableH = (this.resizableH;),public fn GetResizableW = (this.resizableW;),public fn GetVisibility = (local isVisible = undefined;if this.isValidControl this.control do (isVisible = this.control.Visible;);isVisible;),public fn SetAlignmentH input = (local validValues = #(#Left, #Center, #Right);if findItem validValues input > 0 do (this.alignmentH = input;this.StateChanged.Notify #AlignmentH this.alignmentH;);this.GetAlignmentH();),public fn SetAlignmentV input = (local validValues = #(#Top, #Center, #Bottom);if findItem validValues input > 0 do (this.alignmentV = input;this.StateChanged.Notify #AlignmentV this.alignmentV;);this.GetAlignmentV();),public fn SetCaptionMargin input = (if superClassOf input == Number do (input = input as Integer;if input < 0 do input = 0;this.captionMargin = input;this.StateChanged.Notify #CaptionMargin this.captionMargin;);this.GetCaptionMargin();),public fn SetCaptionPosition input = (local validValues = #(#Left, #Top);if findItem validValues input > 0 do (this.captionPosition = input;this.StateChanged.Notify #CaptionPosition this.captionPosition;);this.GetCaptionPosition();),public fn SetControl obj = (if this.isValidControl obj do (this.control = obj;this.StateChanged.Notify #Control this.control;);this.GetControl();),public fn SetExplicitH input = (if classOf input == UndefinedClass then (this.explicitH = input;this.StateChanged.Notify #ExplicitH this.explicitH;);else (if superClassOf input == Number do (input = input as Integer;if input < 0 do input = 0;this.explicitH = input;this.StateChanged.Notify #ExplicitH this.explicitH;););this.GetExplicitH();),public fn SetExplicitW input = (if classOf input == UndefinedClass then (this.explicitW = input;this.StateChanged.Notify #ExplicitW this.explicitW;);else (if superClassOf input == Number do (input = input as Integer;if input < 0 do input = 0;this.explicitW = input;this.StateChanged.Notify #ExplicitW this.explicitW;););this.GetExplicitW();),public fn SetRect rect = (local rectX = rect.X as Integer;local rectY = rect.Y as Integer;local rectW = rect.W as Integer;local rectH = rect.H as Integer;if classOf rect == Box2 and this.isValidControl this.control do (if this.control.Hwnd.Count == 1 do (local hwnd1 = this.control.Hwnd[1];local x = copy rectX;local y = copy rectY;local w = copy rectW;local h = copy rectH;if this.defaultW >= 0 do w = copy this.defaultW;if this.defaultH >= 0 do h = copy this.defaultH;if this.isValidExplicitW() do w = copy this.explicitW;if this.isValidExplicitH() do h = copy this.explicitH;local hwnd1Rect = this.getClientRect hwnd1;if not this.resizableW do w = hwnd1Rect.W;if not this.resizableH do h = hwnd1Rect.H;if w < this.minW do w = copy this.minW;if h < this.minH do h = copy this.minH;if w < 0 do w = 0;if h < 0 do h = 0;if rectW > w and this.isFixedW() do (case this.alignmentH of ((#Left): ();(#Center): x += (rectW / 2) as Integer - (w / 2) as Integer;(#Right): x += rectW - w;default: ();););if rectH > h and this.isFixedH() do (case this.alignmentV of ((#Top): ();(#Center): y += (rectH / 2) as Integer - (h / 2) as Integer;(#Bottom): y += rectH - h;default: ();););Windows.SetWindowPos hwnd1 x y w h true;this.StateChanged.Notify #RectUpdated undefined;););this.GetRect();),public fn SetVisibility input = (if classOf input == BooleanClass and this.isValidControl this.control do (this.control.Visible = input;this.StateChanged.Notify #Visibility this.control.Visible;);this.GetVisibility();),private fn getClientRect hwnd = (local parentHwnd = (Windows.GetHwndData hwnd)[2];local rect = Windows.GetWindowPos hwnd;local pos = Windows.ScreenToClient parentHwnd rect.X rect.Y;Box2 (pos.X as Integer) (pos.Y as Integer) rect.W rect.H;),private fn isFixedH = (this.defaultH >= 0 or this.isValidExplicitH() or not this.resizableH;),private fn isFixedW = (this.defaultW >= 0 or this.isValidExplicitW() or not this.resizableW;),private fn isValidControl obj = (classOf obj == ProgressBar;),private fn isValidExplicitH = (classOf this.explicitH == Integer and this.explicitH >= 0;),private fn isValidExplicitW = (classOf this.explicitW == Integer and this.explicitW >= 0;),public fn StructName = #FlexProgressBarWidgetStruct,public fn Dump indent:"" out:listener = (format "%FlexProgressBarWidgetStruct\n" indent to:out;format "%  alignmentH:%\n" indent this.alignmentH to:out;format "%  alignmentV:%\n" indent this.alignmentV to:out;format "%  captionMargin:%\n" indent this.captionMargin to:out;format "%  captionPosition:%\n" indent this.captionPosition to:out;format "%  control:%\n" indent this.control to:out;format "%  defaultH:%\n" indent this.defaultH to:out;format "%  defaultW:%\n" indent this.defaultW to:out;format "%  explicitH:%\n" indent this.explicitH to:out;format "%  explicitW:%\n" indent this.explicitW to:out;format "%  minH:%\n" indent this.minH to:out;format "%  minW:%\n" indent this.minW to:out;format "%  resizableH:%\n" indent this.resizableH to:out;format "%  resizableW:%\n" indent this.resizableW to:out;ok;),public fn Equals obj = (local isEqualStructName = isStruct obj and isProperty obj #StructName and classOf obj.StructName == MAXScriptFunction and obj.StructName() == this.StructName();local isEqualProperties = isProperty obj #GetAlignmentH and classOf obj.GetAlignmentH == MAXScriptFunction and obj.GetAlignmentH() == this.GetAlignmentH() and isProperty obj #GetAlignmentV and classOf obj.GetAlignmentV == MAXScriptFunction and obj.GetAlignmentV() == this.GetAlignmentV() and isProperty obj #GetCaptionMargin and classOf obj.GetCaptionMargin == MAXScriptFunction and obj.GetCaptionMargin() == this.GetCaptionMargin() and isProperty obj #GetCaptionPosition and classOf obj.GetCaptionPosition == MAXScriptFunction and obj.GetCaptionPosition() == this.GetCaptionPosition() and isProperty obj #GetControl and classOf obj.GetControl == MAXScriptFunction and obj.GetControl() == this.GetControl() and isProperty obj #GetDefaultH and classOf obj.GetDefaultH == MAXScriptFunction and obj.GetDefaultH() == this.GetDefaultH() and isProperty obj #GetDefaultW and classOf obj.GetDefaultW == MAXScriptFunction and obj.GetDefaultW() == this.GetDefaultW() and isProperty obj #GetExplicitH and classOf obj.GetExplicitH == MAXScriptFunction and obj.GetExplicitH() == this.GetExplicitH() and isProperty obj #GetExplicitW and classOf obj.GetExplicitW == MAXScriptFunction and obj.GetExplicitW() == this.GetExplicitW() and isProperty obj #GetMinH and classOf obj.GetMinH == MAXScriptFunction and obj.GetMinH() == this.GetMinH() and isProperty obj #GetMinW and classOf obj.GetMinW == MAXScriptFunction and obj.GetMinW() == this.GetMinW() and isProperty obj #GetResizableH and classOf obj.GetResizableH == MAXScriptFunction and obj.GetResizableH() == this.GetResizableH() and isProperty obj #GetResizableW and classOf obj.GetResizableW == MAXScriptFunction and obj.GetResizableW() == this.GetResizableW();isEqualStructName and isEqualProperties;),public StateChanged,on Create do (this.StateChanged = ::std.ObservableStruct();this.SetControl this._CP1_;););::flexUIDefinitionPool[@"Model\Widget\FlexRadioControlWidget.ms"] = struct FlexRadioControlWidgetStruct (public _CP1_,private alignmentH = #Center,private alignmentV = #Center,private captionMargin = 3,private captionPosition = #Top,private control,private explicitH,private explicitW,private defaultH = -1,private defaultW = -1,private minH = 15,private minW = 23,private resizableH = true,private resizableW = true,public fn GetAlignmentH = (this.alignmentH;),public fn GetAlignmentV = (this.alignmentV;),public fn GetCaptionMargin = (this.captionMargin;),public fn GetCaptionPosition = (this.captionPosition;),public fn GetControl = (this.control;),public fn GetDefaultH = (this.defaultH;),public fn GetDefaultW = (this.defaultW;),public fn GetExplicitH = (this.explicitH;),public fn GetExplicitW = (this.explicitW;),public fn GetMinH = (this.minH;),public fn GetMinW = (this.minW;),public fn GetRect = (local rect = undefined;if this.isValidControl this.control do (local rectL = undefined;local rectT = undefined;local rectR = undefined;local rectB = undefined;for hwnd in this.control.Hwnd do (local hwndRect = this.getClientRect hwnd;local hwndL = hwndRect.X;local hwndT = hwndRect.Y;local hwndR = hwndL + hwndRect.W;local hwndB = hwndT + hwndRect.H;if classOf rectL != Integer do rectL = hwndL;if classOf rectT != Integer do rectT = hwndT;if classOf rectR != Integer do rectR = hwndR;if classOf rectB != Integer do rectB = hwndB;if rectL > hwndL do rectL = hwndL;if rectT > hwndT do rectT = hwndT;if rectR < hwndR do rectR = hwndR;if rectB < hwndB do rectB = hwndB;);if classOf rectL == Integer and classOf rectT == Integer and classOf rectR == Integer and classOf rectB == Integer do (local x = rectL;local y = rectT;local w = rectR - rectL;local h = rectB - rectT;rect = Box2 x y w h;););rect;),public fn GetResizableH = (this.resizableH;),public fn GetResizableW = (this.resizableW;),public fn GetVisibility = (local isVisible = undefined;if this.isValidControl this.control do (isVisible = this.control.Visible;);isVisible;),public fn SetAlignmentH input = (local validValues = #(#Left, #Center, #Right);if findItem validValues input > 0 do (this.alignmentH = input;this.StateChanged.Notify #AlignmentH this.alignmentH;);this.GetAlignmentH();),public fn SetAlignmentV input = (local validValues = #(#Top, #Center, #Bottom);if findItem validValues input > 0 do (this.alignmentV = input;this.StateChanged.Notify #AlignmentV this.alignmentV;);this.GetAlignmentV();),public fn SetCaptionMargin input = (if superClassOf input == Number do (input = input as Integer;if input < 0 do input = 0;this.captionMargin = input;this.StateChanged.Notify #CaptionMargin this.captionMargin;);this.GetCaptionMargin();),public fn SetCaptionPosition input = (local validValues = #(#Left, #Top);if findItem validValues input > 0 do (this.captionPosition = input;this.StateChanged.Notify #CaptionPosition this.captionPosition;);this.GetCaptionPosition();),public fn SetControl obj = (if this.isValidControl obj do (this.control = obj;this.StateChanged.Notify #Control this.control;);this.GetControl();),public fn SetExplicitH input = (if classOf input == UndefinedClass then (this.explicitH = input;this.StateChanged.Notify #ExplicitH this.explicitH;);else (if superClassOf input == Number do (input = input as Integer;if input < 0 do input = 0;this.explicitH = input;this.StateChanged.Notify #ExplicitH this.explicitH;););this.GetExplicitH();),public fn SetExplicitW input = (if classOf input == UndefinedClass then (this.explicitW = input;this.StateChanged.Notify #ExplicitW this.explicitW;);else (if superClassOf input == Number do (input = input as Integer;if input < 0 do input = 0;this.explicitW = input;this.StateChanged.Notify #ExplicitW this.explicitW;););this.GetExplicitW();),public fn SetRect rect = (local rectX = rect.X as Integer;local rectY = rect.Y as Integer;local rectW = rect.W as Integer;local rectH = rect.H as Integer;if classOf rect == Box2 and this.isValidControl this.control do (local hwndCount = this.control.Hwnd.Count;if hwndCount > 0 do (local captionHwnd = this.control.Hwnd[hwndCount];local labelCount = hwndCount - 1;local labelRowData = #();local maxLabelW = 0;local rowYs = #();for i = 1 to labelCount do (local labelHwnd = this.control.Hwnd[i];local labelRect = this.getClientRect labelHwnd;local labelData = DataPair Hwnd:labelHwnd Rect:labelRect;local y = labelRect.Y as Integer;local w = labelRect.W as Integer;if w > maxLabelW do maxLabelW = w;local rowIndex = findItem rowYs y;if rowIndex == 0 then (append labelRowData #(labelData);append rowYs y;);else (append labelRowData[rowIndex] labelData;););local rowCount = labelRowData.Count;local colCount = 0;if rowCount > 0 do (colCount = amax (for rowData in labelRowData collect rowData.Count););local minRectW = colCount * maxLabelW;local minRectH = rowCount * this.minH;if minRectW < this.minW do minRectW = copy this.minW;if minRectH < this.minH do minRectH = copy this.minH;local captionSize = getTextExtent this.control.Caption;local captionW = captionSize.X as Integer;local captionH = captionSize.Y as Integer;local captionOffset = 0;if captionW > 0 do (case this.captionPosition of ((#Left): captionOffset = captionW + this.captionMargin;(#Top): captionOffset = captionH + this.captionMargin;default: ();););local x = copy rectX;local y = copy rectY;local w = copy rectW;local h = copy rectH;case this.captionPosition of ((#Left): w -= captionOffset;(#Top): h -= captionOffset;default: (););if this.defaultW >= 0 do w = copy this.defaultW;if this.defaultH >= 0 do h = copy this.defaultH;if this.isValidExplicitW() do w = copy this.explicitW;if this.isValidExplicitH() do h = copy this.explicitH;if w < minRectW do w = copy minRectW;if h < minRectH do h = copy minRectH;if w < 0 do w = 0;if h < 0 do h = 0;local rectMinW = copy w;if this.captionPosition == #Left do rectMinW += captionOffset;if rectW > rectMinW and this.isFixedW() do (case this.alignmentH of ((#Left): ();(#Center): (case this.captionPosition of ((#Left): x += (rectW / 2) as Integer - ((w + captionOffset) / 2) as Integer;(#Top): x += (rectW / 2) as Integer - (w / 2) as Integer;default: ();););(#Right): (x += rectW - w;if this.captionPosition == #Left do x -= captionOffset;);default: ();););local rectMinH = copy h;if this.captionPosition == #Top do rectMinH += captionOffset;if rectH > rectMinH and this.isFixedH() do (case this.alignmentV of ((#Top): ();(#Center): (case this.captionPosition of ((#Left): y += (rectH / 2) as Integer - (h / 2) as Integer;(#Top): y += (rectH / 2) as Integer - ((h + captionOffset) / 2) as Integer;default: ();););(#Bottom): (y += rectH - h;if this.captionPosition == #Top do y -= captionOffset;);default: ();););case this.captionPosition of ((#Left): x += captionOffset;(#Top): y += captionOffset;default: (););local rowStep = 0;local colStep = 0;local rowDivision = rowCount - 1;local colDivision = colCount - 1;if rowDivision > 0 do (rowStep = ((h - this.minH) / rowDivision) as Integer;);if colDivision > 0 do (colStep = ((w - maxLabelW) / colDivision) as Integer;);for rowIndex = 1 to labelRowData.Count do (local labelY = rowStep * (rowIndex - 1) + y;for colIndex = 1 to labelRowData[rowIndex].Count do (local labelData = labelRowData[rowIndex][colIndex];local labelHwnd = labelData.Hwnd;local labelX = colStep * (colIndex - 1) + x;local labelW = labelData.Rect.W;local labelH = labelData.Rect.H;Windows.SetWindowPos labelHwnd labelX labelY labelW labelH true;););if captionW == 0 then (Windows.SetWindowPos captionHwnd x y 1 1 true;);else (local captionX = copy x;case this.captionPosition of ((#Left): captionX -= captionOffset;(#Top): ();default: (););local captionY = copy y;case this.captionPosition of ((#Left): captionY += (h / 2) as Integer - (captionH / 2) as Integer;(#Top): captionY -= captionOffset;default: (););Windows.SetWindowPos captionHwnd captionX captionY captionW captionH true;);this.StateChanged.Notify #RectUpdated undefined;););this.GetRect();),public fn SetVisibility input = (if classOf input == BooleanClass and this.isValidControl this.control do (this.control.Visible = input;this.StateChanged.Notify #Visibility this.control.Visible;);this.GetVisibility();),private fn getClientRect hwnd = (local parentHwnd = (Windows.GetHwndData hwnd)[2];local rect = Windows.GetWindowPos hwnd;local pos = Windows.ScreenToClient parentHwnd rect.X rect.Y;Box2 (pos.X as Integer) (pos.Y as Integer) rect.W rect.H;),private fn isFixedH = (this.defaultH >= 0 or this.isValidExplicitH() or not this.resizableH;),private fn isFixedW = (this.defaultW >= 0 or this.isValidExplicitW() or not this.resizableW;),private fn isValidControl obj = (classOf obj == RadioControl;),private fn isValidExplicitH = (classOf this.explicitH == Integer and this.explicitH >= 0;),private fn isValidExplicitW = (classOf this.explicitW == Integer and this.explicitW >= 0;),public fn StructName = #FlexRadioControlWidgetStruct,public fn Dump indent:"" out:listener = (format "%FlexRadioControlWidgetStruct\n" indent to:out;format "%  alignmentH:%\n" indent this.alignmentH to:out;format "%  alignmentV:%\n" indent this.alignmentV to:out;format "%  captionMargin:%\n" indent this.captionMargin to:out;format "%  captionPosition:%\n" indent this.captionPosition to:out;format "%  control:%\n" indent this.control to:out;format "%  defaultH:%\n" indent this.defaultH to:out;format "%  defaultW:%\n" indent this.defaultW to:out;format "%  explicitH:%\n" indent this.explicitH to:out;format "%  explicitW:%\n" indent this.explicitW to:out;format "%  minH:%\n" indent this.minH to:out;format "%  minW:%\n" indent this.minW to:out;format "%  resizableH:%\n" indent this.resizableH to:out;format "%  resizableW:%\n" indent this.resizableW to:out;ok;),public fn Equals obj = (local isEqualStructName = isStruct obj and isProperty obj #StructName and classOf obj.StructName == MAXScriptFunction and obj.StructName() == this.StructName();local isEqualProperties = isProperty obj #GetAlignmentH and classOf obj.GetAlignmentH == MAXScriptFunction and obj.GetAlignmentH() == this.GetAlignmentH() and isProperty obj #GetAlignmentV and classOf obj.GetAlignmentV == MAXScriptFunction and obj.GetAlignmentV() == this.GetAlignmentV() and isProperty obj #GetCaptionMargin and classOf obj.GetCaptionMargin == MAXScriptFunction and obj.GetCaptionMargin() == this.GetCaptionMargin() and isProperty obj #GetCaptionPosition and classOf obj.GetCaptionPosition == MAXScriptFunction and obj.GetCaptionPosition() == this.GetCaptionPosition() and isProperty obj #GetControl and classOf obj.GetControl == MAXScriptFunction and obj.GetControl() == this.GetControl() and isProperty obj #GetDefaultH and classOf obj.GetDefaultH == MAXScriptFunction and obj.GetDefaultH() == this.GetDefaultH() and isProperty obj #GetDefaultW and classOf obj.GetDefaultW == MAXScriptFunction and obj.GetDefaultW() == this.GetDefaultW() and isProperty obj #GetExplicitH and classOf obj.GetExplicitH == MAXScriptFunction and obj.GetExplicitH() == this.GetExplicitH() and isProperty obj #GetExplicitW and classOf obj.GetExplicitW == MAXScriptFunction and obj.GetExplicitW() == this.GetExplicitW() and isProperty obj #GetMinH and classOf obj.GetMinH == MAXScriptFunction and obj.GetMinH() == this.GetMinH() and isProperty obj #GetMinW and classOf obj.GetMinW == MAXScriptFunction and obj.GetMinW() == this.GetMinW() and isProperty obj #GetResizableH and classOf obj.GetResizableH == MAXScriptFunction and obj.GetResizableH() == this.GetResizableH() and isProperty obj #GetResizableW and classOf obj.GetResizableW == MAXScriptFunction and obj.GetResizableW() == this.GetResizableW();isEqualStructName and isEqualProperties;),public StateChanged,on Create do (this.StateChanged = ::std.ObservableStruct();this.SetControl this._CP1_;););::flexUIDefinitionPool[@"Model\Widget\FlexSliderControlWidget.ms"] = struct FlexSliderControlWidgetStruct (public _CP1_,private alignmentH = #Center,private alignmentV = #Center,private captionMargin = 3,private captionPosition = #Top,private control,private explicitH,private explicitW,private defaultH = 34,private defaultW = -1,private minH = 34,private minW = 27,private resizableH = false,private resizableW = true,public fn GetAlignmentH = (this.alignmentH;),public fn GetAlignmentV = (this.alignmentV;),public fn GetCaptionMargin = (this.captionMargin;),public fn GetCaptionPosition = (this.captionPosition;),public fn GetControl = (this.control;),public fn GetDefaultH = (this.defaultH;),public fn GetDefaultW = (this.defaultW;),public fn GetExplicitH = (this.explicitH;),public fn GetExplicitW = (this.explicitW;),public fn GetMinH = (this.minH;),public fn GetMinW = (this.minW;),public fn GetRect = (local rect = undefined;if this.isValidControl this.control do (local rectL = undefined;local rectT = undefined;local rectR = undefined;local rectB = undefined;for hwnd in this.control.Hwnd do (local hwndRect = this.getClientRect hwnd;local hwndL = hwndRect.X;local hwndT = hwndRect.Y;local hwndR = hwndL + hwndRect.W;local hwndB = hwndT + hwndRect.H;if classOf rectL != Integer do rectL = hwndL;if classOf rectT != Integer do rectT = hwndT;if classOf rectR != Integer do rectR = hwndR;if classOf rectB != Integer do rectB = hwndB;if rectL > hwndL do rectL = hwndL;if rectT > hwndT do rectT = hwndT;if rectR < hwndR do rectR = hwndR;if rectB < hwndB do rectB = hwndB;);if classOf rectL == Integer and classOf rectT == Integer and classOf rectR == Integer and classOf rectB == Integer do (local x = rectL;local y = rectT;local w = rectR - rectL;local h = rectB - rectT;rect = Box2 x y w h;););rect;),public fn GetResizableH = (this.resizableH;),public fn GetResizableW = (this.resizableW;),public fn GetVisibility = (local isVisible = undefined;if this.isValidControl this.control do (isVisible = this.control.Visible;);isVisible;),public fn SetAlignmentH input = (local validValues = #(#Left, #Center, #Right);if findItem validValues input > 0 do (this.alignmentH = input;this.StateChanged.Notify #AlignmentH this.alignmentH;);this.GetAlignmentH();),public fn SetAlignmentV input = (local validValues = #(#Top, #Center, #Bottom);if findItem validValues input > 0 do (this.alignmentV = input;this.StateChanged.Notify #AlignmentV this.alignmentV;);this.GetAlignmentV();),public fn SetCaptionMargin input = (if superClassOf input == Number do (input = input as Integer;if input < 0 do input = 0;this.captionMargin = input;this.StateChanged.Notify #CaptionMargin this.captionMargin;);this.GetCaptionMargin();),public fn SetCaptionPosition input = (local validValues = #(#Left, #Top);if findItem validValues input > 0 do (this.captionPosition = input;this.StateChanged.Notify #CaptionPosition this.captionPosition;);this.GetCaptionPosition();),public fn SetControl obj = (if this.isValidControl obj do (this.control = obj;this.StateChanged.Notify #Control this.control;);this.GetControl();),public fn SetExplicitH input = (if classOf input == UndefinedClass then (this.explicitH = input;this.StateChanged.Notify #ExplicitH this.explicitH;);else (if superClassOf input == Number do (input = input as Integer;if input < 0 do input = 0;this.explicitH = input;this.StateChanged.Notify #ExplicitH this.explicitH;););this.GetExplicitH();),public fn SetExplicitW input = (if classOf input == UndefinedClass then (this.explicitW = input;this.StateChanged.Notify #ExplicitW this.explicitW;);else (if superClassOf input == Number do (input = input as Integer;if input < 0 do input = 0;this.explicitW = input;this.StateChanged.Notify #ExplicitW this.explicitW;););this.GetExplicitW();),public fn SetRect rect = (local rectX = rect.X as Integer;local rectY = rect.Y as Integer;local rectW = rect.W as Integer;local rectH = rect.H as Integer;if classOf rect == Box2 and this.isValidControl this.control do (if this.control.Hwnd.Count == 2 do (local hwnd1 = this.control.Hwnd[1];local hwnd2 = this.control.Hwnd[2];local captionSize = getTextExtent this.control.Caption;local captionW = captionSize.X as Integer;local captionH = captionSize.Y as Integer;local captionOffset = 0;if captionW > 0 do (case this.captionPosition of ((#Left): captionOffset = captionW + this.captionMargin;(#Top): captionOffset = captionH + this.captionMargin;default: ();););local x = copy rectX;local y = copy rectY;local w = copy rectW;local h = copy rectH;case this.captionPosition of ((#Left): w -= captionOffset;(#Top): h -= captionOffset;default: (););if this.defaultW >= 0 do w = copy this.defaultW;if this.defaultH >= 0 do h = copy this.defaultH;if this.isValidExplicitW() do w = copy this.explicitW;if this.isValidExplicitH() do h = copy this.explicitH;local hwnd1Rect = this.getClientRect hwnd1;if not this.resizableW do w = hwnd1Rect.W;if not this.resizableH do h = hwnd1Rect.H;if w < this.minW do w = copy this.minW;if h < this.minH do h = copy this.minH;if w < 0 do w = 0;if h < 0 do h = 0;local rectMinW = copy w;if this.captionPosition == #Left do rectMinW += captionOffset;if rectW > rectMinW and this.isFixedW() do (case this.alignmentH of ((#Left): ();(#Center): (case this.captionPosition of ((#Left): x += (rectW / 2) as Integer - ((w + captionOffset) / 2) as Integer;(#Top): x += (rectW / 2) as Integer - (w / 2) as Integer;default: ();););(#Right): (x += rectW - w;if this.captionPosition == #Left do x -= captionOffset;);default: ();););local rectMinH = copy h;if this.captionPosition == #Top do rectMinH += captionOffset;if rectH > rectMinH and this.isFixedH() do (case this.alignmentV of ((#Top): ();(#Center): (case this.captionPosition of ((#Left): y += (rectH / 2) as Integer - (h / 2) as Integer;(#Top): y += (rectH / 2) as Integer - ((h + captionOffset) / 2) as Integer;default: ();););(#Bottom): (y += rectH - h;if this.captionPosition == #Top do y -= captionOffset;);default: ();););case this.captionPosition of ((#Left): x += captionOffset;(#Top): y += captionOffset;default: (););Windows.SetWindowPos hwnd1 x y w h true;if captionW == 0 then (Windows.SetWindowPos hwnd2 x y 1 1 true;);else (local captionX = copy x;case this.captionPosition of ((#Left): captionX -= captionOffset;(#Top): ();default: (););local captionY = copy y;case this.captionPosition of ((#Left): captionY += (h / 2) as Integer - (captionH / 2) as Integer;(#Top): captionY -= captionOffset;default: (););Windows.SetWindowPos hwnd2 captionX captionY captionW captionH true;);this.StateChanged.Notify #RectUpdated undefined;););this.GetRect();),public fn SetVisibility input = (if classOf input == BooleanClass and this.isValidControl this.control do (this.control.Visible = input;this.StateChanged.Notify #Visibility this.control.Visible;);this.GetVisibility();),private fn getClientRect hwnd = (local parentHwnd = (Windows.GetHwndData hwnd)[2];local rect = Windows.GetWindowPos hwnd;local pos = Windows.ScreenToClient parentHwnd rect.X rect.Y;Box2 (pos.X as Integer) (pos.Y as Integer) rect.W rect.H;),private fn isFixedH = (this.defaultH >= 0 or this.isValidExplicitH() or not this.resizableH;),private fn isFixedW = (this.defaultW >= 0 or this.isValidExplicitW() or not this.resizableW;),private fn isValidControl obj = (classOf obj == SliderControl;),private fn isValidExplicitH = (classOf this.explicitH == Integer and this.explicitH >= 0;),private fn isValidExplicitW = (classOf this.explicitW == Integer and this.explicitW >= 0;),public fn StructName = #FlexSliderControlWidgetStruct,public fn Dump indent:"" out:listener = (format "%FlexSliderControlWidgetStruct\n" indent to:out;format "%  alignmentH:%\n" indent this.alignmentH to:out;format "%  alignmentV:%\n" indent this.alignmentV to:out;format "%  captionMargin:%\n" indent this.captionMargin to:out;format "%  captionPosition:%\n" indent this.captionPosition to:out;format "%  control:%\n" indent this.control to:out;format "%  defaultH:%\n" indent this.defaultH to:out;format "%  defaultW:%\n" indent this.defaultW to:out;format "%  explicitH:%\n" indent this.explicitH to:out;format "%  explicitW:%\n" indent this.explicitW to:out;format "%  minH:%\n" indent this.minH to:out;format "%  minW:%\n" indent this.minW to:out;format "%  resizableH:%\n" indent this.resizableH to:out;format "%  resizableW:%\n" indent this.resizableW to:out;ok;),public fn Equals obj = (local isEqualStructName = isStruct obj and isProperty obj #StructName and classOf obj.StructName == MAXScriptFunction and obj.StructName() == this.StructName();local isEqualProperties = isProperty obj #GetAlignmentH and classOf obj.GetAlignmentH == MAXScriptFunction and obj.GetAlignmentH() == this.GetAlignmentH() and isProperty obj #GetAlignmentV and classOf obj.GetAlignmentV == MAXScriptFunction and obj.GetAlignmentV() == this.GetAlignmentV() and isProperty obj #GetCaptionMargin and classOf obj.GetCaptionMargin == MAXScriptFunction and obj.GetCaptionMargin() == this.GetCaptionMargin() and isProperty obj #GetCaptionPosition and classOf obj.GetCaptionPosition == MAXScriptFunction and obj.GetCaptionPosition() == this.GetCaptionPosition() and isProperty obj #GetControl and classOf obj.GetControl == MAXScriptFunction and obj.GetControl() == this.GetControl() and isProperty obj #GetDefaultH and classOf obj.GetDefaultH == MAXScriptFunction and obj.GetDefaultH() == this.GetDefaultH() and isProperty obj #GetDefaultW and classOf obj.GetDefaultW == MAXScriptFunction and obj.GetDefaultW() == this.GetDefaultW() and isProperty obj #GetExplicitH and classOf obj.GetExplicitH == MAXScriptFunction and obj.GetExplicitH() == this.GetExplicitH() and isProperty obj #GetExplicitW and classOf obj.GetExplicitW == MAXScriptFunction and obj.GetExplicitW() == this.GetExplicitW() and isProperty obj #GetMinH and classOf obj.GetMinH == MAXScriptFunction and obj.GetMinH() == this.GetMinH() and isProperty obj #GetMinW and classOf obj.GetMinW == MAXScriptFunction and obj.GetMinW() == this.GetMinW() and isProperty obj #GetResizableH and classOf obj.GetResizableH == MAXScriptFunction and obj.GetResizableH() == this.GetResizableH() and isProperty obj #GetResizableW and classOf obj.GetResizableW == MAXScriptFunction and obj.GetResizableW() == this.GetResizableW();isEqualStructName and isEqualProperties;),public StateChanged,on Create do (this.StateChanged = ::std.ObservableStruct();this.SetControl this._CP1_;););::flexUIDefinitionPool[@"Model\Widget\FlexSpinnerControlWidget.ms"] = struct FlexSpinnerControlWidgetStruct (public _CP1_,private alignmentH = #Center,private alignmentV = #Center,private captionMargin = 3,private captionPosition = #Left,private control,private explicitH,private explicitW,private defaultH = 16,private defaultW = -1,private minH = 16,private minW = 12,private resizableH = false,private resizableW = true,public fn GetAlignmentH = (this.alignmentH;),public fn GetAlignmentV = (this.alignmentV;),public fn GetCaptionMargin = (this.captionMargin;),public fn GetCaptionPosition = (this.captionPosition;),public fn GetControl = (this.control;),public fn GetDefaultH = (this.defaultH;),public fn GetDefaultW = (this.defaultW;),public fn GetExplicitH = (this.explicitH;),public fn GetExplicitW = (this.explicitW;),public fn GetMinH = (this.minH;),public fn GetMinW = (this.minW;),public fn GetRect = (local rect = undefined;if this.isValidControl this.control do (local rectL = undefined;local rectT = undefined;local rectR = undefined;local rectB = undefined;for hwnd in this.control.Hwnd do (local hwndRect = this.getClientRect hwnd;local hwndL = hwndRect.X;local hwndT = hwndRect.Y;local hwndR = hwndL + hwndRect.W;local hwndB = hwndT + hwndRect.H;if classOf rectL != Integer do rectL = hwndL;if classOf rectT != Integer do rectT = hwndT;if classOf rectR != Integer do rectR = hwndR;if classOf rectB != Integer do rectB = hwndB;if rectL > hwndL do rectL = hwndL;if rectT > hwndT do rectT = hwndT;if rectR < hwndR do rectR = hwndR;if rectB < hwndB do rectB = hwndB;);if classOf rectL == Integer and classOf rectT == Integer and classOf rectR == Integer and classOf rectB == Integer do (local x = rectL;local y = rectT;local w = rectR - rectL;local h = rectB - rectT;rect = Box2 x y w h;););rect;),public fn GetResizableH = (this.resizableH;),public fn GetResizableW = (this.resizableW;),public fn GetVisibility = (local isVisible = undefined;if this.isValidControl this.control do (isVisible = this.control.Visible;);isVisible;),public fn SetAlignmentH input = (local validValues = #(#Left, #Center, #Right);if findItem validValues input > 0 do (this.alignmentH = input;this.StateChanged.Notify #AlignmentH this.alignmentH;);this.GetAlignmentH();),public fn SetAlignmentV input = (local validValues = #(#Top, #Center, #Bottom);if findItem validValues input > 0 do (this.alignmentV = input;this.StateChanged.Notify #AlignmentV this.alignmentV;);this.GetAlignmentV();),public fn SetCaptionMargin input = (if superClassOf input == Number do (input = input as Integer;if input < 0 do input = 0;this.captionMargin = input;this.StateChanged.Notify #CaptionMargin this.captionMargin;);this.GetCaptionMargin();),public fn SetCaptionPosition input = (local validValues = #(#Left, #Top);if findItem validValues input > 0 do (this.captionPosition = input;this.StateChanged.Notify #CaptionPosition this.captionPosition;);this.GetCaptionPosition();),public fn SetControl obj = (if this.isValidControl obj do (this.control = obj;this.StateChanged.Notify #Control this.control;);this.GetControl();),public fn SetExplicitH input = (if classOf input == UndefinedClass then (this.explicitH = input;this.StateChanged.Notify #ExplicitH this.explicitH;);else (if superClassOf input == Number do (input = input as Integer;if input < 0 do input = 0;this.explicitH = input;this.StateChanged.Notify #ExplicitH this.explicitH;););this.GetExplicitH();),public fn SetExplicitW input = (if classOf input == UndefinedClass then (this.explicitW = input;this.StateChanged.Notify #ExplicitW this.explicitW;);else (if superClassOf input == Number do (input = input as Integer;if input < 0 do input = 0;this.explicitW = input;this.StateChanged.Notify #ExplicitW this.explicitW;););this.GetExplicitW();),public fn SetRect rect = (local rectX = rect.X as Integer;local rectY = rect.Y as Integer;local rectW = rect.W as Integer;local rectH = rect.H as Integer;if classOf rect == Box2 and this.isValidControl this.control do (if this.control.Hwnd.Count == 3 do (local hwnd1 = this.control.Hwnd[1];local hwnd2 = this.control.Hwnd[2];local hwnd3 = this.control.Hwnd[3];local captionSize = getTextExtent this.control.Caption;local captionW = captionSize.X as Integer;local captionH = captionSize.Y as Integer;local captionOffset = 0;if captionW > 0 do (case this.captionPosition of ((#Left): captionOffset = captionW + this.captionMargin;(#Top): captionOffset = captionH + this.captionMargin;default: ();););local x = copy rectX;local y = copy rectY;local w = copy rectW;local h = copy rectH;case this.captionPosition of ((#Left): w -= captionOffset;(#Top): h -= captionOffset;default: (););if this.defaultW >= 0 do w = copy this.defaultW;if this.defaultH >= 0 do h = copy this.defaultH;if this.isValidExplicitW() do w = copy this.explicitW;if this.isValidExplicitH() do h = copy this.explicitH;local hwnd1Rect = this.getClientRect hwnd1;if not this.resizableW do w = hwnd1Rect.W;if not this.resizableH do h = hwnd1Rect.H;if w < this.minW do w = copy this.minW;if h < this.minH do h = copy this.minH;if w < 0 do w = 0;if h < 0 do h = 0;local rectMinW = copy w;if this.captionPosition == #Left do rectMinW += captionOffset;if rectW > rectMinW and this.isFixedW() do (case this.alignmentH of ((#Left): ();(#Center): (case this.captionPosition of ((#Left): x += (rectW / 2) as Integer - ((w + captionOffset) / 2) as Integer;(#Top): x += (rectW / 2) as Integer - (w / 2) as Integer;default: ();););(#Right): (x += rectW - w;if this.captionPosition == #Left do x -= captionOffset;);default: ();););local rectMinH = copy h;if this.captionPosition == #Top do rectMinH += captionOffset;if rectH > rectMinH and this.isFixedH() do (case this.alignmentV of ((#Top): ();(#Center): (case this.captionPosition of ((#Left): y += (rectH / 2) as Integer - (h / 2) as Integer;(#Top): y += (rectH / 2) as Integer - ((h + captionOffset) / 2) as Integer;default: ();););(#Bottom): (y += rectH - h;if this.captionPosition == #Top do y -= captionOffset;);default: ();););case this.captionPosition of ((#Left): x += captionOffset;(#Top): y += captionOffset;default: (););local hwnd1X = x + w - 12;local hwnd1Y = y;local hwnd1W = 12;local hwnd1H = h;local hwnd3X = x;local hwnd3Y = y;local hwnd3W = w - 12;local hwnd3H = h;Windows.SetWindowPos hwnd1 hwnd1X hwnd1Y hwnd1W hwnd1H true;Windows.SetWindowPos hwnd3 hwnd3X hwnd3Y hwnd3W hwnd3H true;if captionW == 0 then (Windows.SetWindowPos hwnd2 x y 1 1 true;);else (local captionX = copy x;case this.captionPosition of ((#Left): captionX -= captionOffset;(#Top): ();default: (););local captionY = copy y;case this.captionPosition of ((#Left): captionY += (h / 2) as Integer - (captionH / 2) as Integer;(#Top): captionY -= captionOffset;default: (););Windows.SetWindowPos hwnd2 captionX captionY captionW captionH true;);this.StateChanged.Notify #RectUpdated undefined;););this.GetRect();),public fn SetVisibility input = (if classOf input == BooleanClass and this.isValidControl this.control do (this.control.Visible = input;this.StateChanged.Notify #Visibility this.control.Visible;);this.GetVisibility();),private fn getClientRect hwnd = (local parentHwnd = (Windows.GetHwndData hwnd)[2];local rect = Windows.GetWindowPos hwnd;local pos = Windows.ScreenToClient parentHwnd rect.X rect.Y;Box2 (pos.X as Integer) (pos.Y as Integer) rect.W rect.H;),private fn isFixedH = (this.defaultH >= 0 or this.isValidExplicitH() or not this.resizableH;),private fn isFixedW = (this.defaultW >= 0 or this.isValidExplicitW() or not this.resizableW;),private fn isValidControl obj = (classOf obj == SpinnerControl;),private fn isValidExplicitH = (classOf this.explicitH == Integer and this.explicitH >= 0;),private fn isValidExplicitW = (classOf this.explicitW == Integer and this.explicitW >= 0;),public fn StructName = #FlexSpinnerControlWidgetStruct,public fn Dump indent:"" out:listener = (format "%FlexSpinnerControlWidgetStruct\n" indent to:out;format "%  alignmentH:%\n" indent this.alignmentH to:out;format "%  alignmentV:%\n" indent this.alignmentV to:out;format "%  captionMargin:%\n" indent this.captionMargin to:out;format "%  captionPosition:%\n" indent this.captionPosition to:out;format "%  control:%\n" indent this.control to:out;format "%  defaultH:%\n" indent this.defaultH to:out;format "%  defaultW:%\n" indent this.defaultW to:out;format "%  explicitH:%\n" indent this.explicitH to:out;format "%  explicitW:%\n" indent this.explicitW to:out;format "%  minH:%\n" indent this.minH to:out;format "%  minW:%\n" indent this.minW to:out;format "%  resizableH:%\n" indent this.resizableH to:out;format "%  resizableW:%\n" indent this.resizableW to:out;ok;),public fn Equals obj = (local isEqualStructName = isStruct obj and isProperty obj #StructName and classOf obj.StructName == MAXScriptFunction and obj.StructName() == this.StructName();local isEqualProperties = isProperty obj #GetAlignmentH and classOf obj.GetAlignmentH == MAXScriptFunction and obj.GetAlignmentH() == this.GetAlignmentH() and isProperty obj #GetAlignmentV and classOf obj.GetAlignmentV == MAXScriptFunction and obj.GetAlignmentV() == this.GetAlignmentV() and isProperty obj #GetCaptionMargin and classOf obj.GetCaptionMargin == MAXScriptFunction and obj.GetCaptionMargin() == this.GetCaptionMargin() and isProperty obj #GetCaptionPosition and classOf obj.GetCaptionPosition == MAXScriptFunction and obj.GetCaptionPosition() == this.GetCaptionPosition() and isProperty obj #GetControl and classOf obj.GetControl == MAXScriptFunction and obj.GetControl() == this.GetControl() and isProperty obj #GetDefaultH and classOf obj.GetDefaultH == MAXScriptFunction and obj.GetDefaultH() == this.GetDefaultH() and isProperty obj #GetDefaultW and classOf obj.GetDefaultW == MAXScriptFunction and obj.GetDefaultW() == this.GetDefaultW() and isProperty obj #GetExplicitH and classOf obj.GetExplicitH == MAXScriptFunction and obj.GetExplicitH() == this.GetExplicitH() and isProperty obj #GetExplicitW and classOf obj.GetExplicitW == MAXScriptFunction and obj.GetExplicitW() == this.GetExplicitW() and isProperty obj #GetMinH and classOf obj.GetMinH == MAXScriptFunction and obj.GetMinH() == this.GetMinH() and isProperty obj #GetMinW and classOf obj.GetMinW == MAXScriptFunction and obj.GetMinW() == this.GetMinW() and isProperty obj #GetResizableH and classOf obj.GetResizableH == MAXScriptFunction and obj.GetResizableH() == this.GetResizableH() and isProperty obj #GetResizableW and classOf obj.GetResizableW == MAXScriptFunction and obj.GetResizableW() == this.GetResizableW();isEqualStructName and isEqualProperties;),public StateChanged,on Create do (this.StateChanged = ::std.ObservableStruct();this.SetControl this._CP1_;););global flexUI;struct FlexUIStruct (private layoutDefTable,private layoutOptionsDef,private widgetDefTable,public fn CreateGridLayout options:undefined = (local layout = undefined;local key = #FlexGridLayout;if hasDictValue this.layoutDefTable key do (layout = this.layoutDefTable[key] options;);layout;),public fn CreateGroupLayout groupBoxWidget = (local layout = undefined;local key = #FlexGroupLayout;if hasDictValue this.layoutDefTable key and this.isValidGroupBoxControlWidget groupBoxWidget do (layout = this.layoutDefTable[key] groupBoxWidget;);layout;),public fn CreateHBoxLayout options:undefined = (local layout = undefined;local key = #FlexHBoxLayout;if hasDictValue this.layoutDefTable key do (layout = this.layoutDefTable[key] options;);layout;),public fn CreateLayoutOptions = (this.layoutOptionsDef();),public fn CreateStackedLayout options:undefined = (local layout = undefined;local key = #FlexStackedLayout;if hasDictValue this.layoutDefTable key do (layout = this.layoutDefTable[key] options;);layout;),public fn CreateVBoxLayout options:undefined = (local layout = undefined;local key = #FlexVBoxLayout;if hasDictValue this.layoutDefTable key do (layout = this.layoutDefTable[key] options;);layout;),public fn CreateWidget control explicitW:undefined explicitH:undefined = (local widget = undefined;local key = ("Flex" + (classOf control) as String + "Widget") as Name;if hasDictValue this.widgetDefTable key do (widget = this.widgetDefTable[key] control;widget.SetExplicitH explicitH;widget.SetExplicitW explicitW;);widget;),public fn Install = (::FlexUIStruct();if isProperty ::startupLoader #RegisterFile do (::startupLoader.RegisterFile (getSourceFileName()););format "[install]::flexUI\n";ok;),public fn Uninstall = (if isProperty ::startupLoader #UnregisterFile do (::startupLoader.UnregisterFile (getSourceFileName()););::flexUI = undefined;format "[uninstall]::flexUI\n";ok;),private fn initialize = (this.layoutDefTable = Dictionary #Name;this.widgetDefTable = Dictionary #Name;this.layoutDefTable[#FlexGridLayout] = ::flexUIDefinitionPool[@"Model\Layout\FlexGridLayout.ms"];this.layoutDefTable[#FlexGroupLayout] = ::flexUIDefinitionPool[@"Model\Layout\FlexGroupLayout.ms"];this.layoutDefTable[#FlexHBoxLayout] = ::flexUIDefinitionPool[@"Model\Layout\FlexHBoxLayout.ms"];this.layoutDefTable[#FlexStackedLayout] = ::flexUIDefinitionPool[@"Model\Layout\FlexStackedLayout.ms"];this.layoutDefTable[#FlexVBoxLayout] = ::flexUIDefinitionPool[@"Model\Layout\FlexVBoxLayout.ms"];this.widgetDefTable[#FlexAngleControlWidget] = ::flexUIDefinitionPool[@"Model\Widget\FlexAngleControlWidget.ms"];this.widgetDefTable[#FlexBitmapControlWidget] = ::flexUIDefinitionPool[@"Model\Widget\FlexBitmapControlWidget.ms"];this.widgetDefTable[#FlexButtonControlWidget] = ::flexUIDefinitionPool[@"Model\Widget\FlexButtonControlWidget.ms"];this.widgetDefTable[#FlexCheckBoxControlWidget] = ::flexUIDefinitionPool[@"Model\Widget\FlexCheckBoxControlWidget.ms"];this.widgetDefTable[#FlexCheckButtonControlWidget] = ::flexUIDefinitionPool[@"Model\Widget\FlexCheckButtonControlWidget.ms"];this.widgetDefTable[#FlexColorPickerControlWidget] = ::flexUIDefinitionPool[@"Model\Widget\FlexColorPickerControlWidget.ms"];this.widgetDefTable[#FlexComboBoxControlWidget] = ::flexUIDefinitionPool[@"Model\Widget\FlexComboBoxControlWidget.ms"];this.widgetDefTable[#FlexDotNetControlWidget] = ::flexUIDefinitionPool[@"Model\Widget\FlexDotNetControlWidget.ms"];this.widgetDefTable[#FlexEditTextControlWidget] = ::flexUIDefinitionPool[@"Model\Widget\FlexEditTextControlWidget.ms"];this.widgetDefTable[#FlexGroupBoxControlWidget] = ::flexUIDefinitionPool[@"Model\Widget\FlexGroupBoxControlWidget.ms"];this.widgetDefTable[#FlexImgTagWidget] = ::flexUIDefinitionPool[@"Model\Widget\FlexImgTagWidget.ms"];this.widgetDefTable[#FlexLabelControlWidget] = ::flexUIDefinitionPool[@"Model\Widget\FlexLabelControlWidget.ms"];this.widgetDefTable[#FlexLinkControlWidget] = ::flexUIDefinitionPool[@"Model\Widget\FlexLinkControlWidget.ms"];this.widgetDefTable[#FlexListBoxControlWidget] = ::flexUIDefinitionPool[@"Model\Widget\FlexListBoxControlWidget.ms"];this.widgetDefTable[#FlexMapButtonControlWidget] = ::flexUIDefinitionPool[@"Model\Widget\FlexMapButtonControlWidget.ms"];this.widgetDefTable[#FlexMaxCurveCtlWidget] = ::flexUIDefinitionPool[@"Model\Widget\FlexMaxCurveCtlWidget.ms"];this.widgetDefTable[#FlexMtlButtonControlWidget] = ::flexUIDefinitionPool[@"Model\Widget\FlexMtlButtonControlWidget.ms"];this.widgetDefTable[#FlexMultiListBoxControlWidget] = ::flexUIDefinitionPool[@"Model\Widget\FlexMultiListBoxControlWidget.ms"];this.widgetDefTable[#FlexPickerControlWidget] = ::flexUIDefinitionPool[@"Model\Widget\FlexPickerControlWidget.ms"];this.widgetDefTable[#FlexProgressBarWidget] = ::flexUIDefinitionPool[@"Model\Widget\FlexProgressBarWidget.ms"];this.widgetDefTable[#FlexRadioControlWidget] = ::flexUIDefinitionPool[@"Model\Widget\FlexRadioControlWidget.ms"];this.widgetDefTable[#FlexSliderControlWidget] = ::flexUIDefinitionPool[@"Model\Widget\FlexSliderControlWidget.ms"];this.widgetDefTable[#FlexSpinnerControlWidget] = ::flexUIDefinitionPool[@"Model\Widget\FlexSpinnerControlWidget.ms"];ok;),private fn isValidGroupBoxControlWidget obj = (isStruct obj and isProperty obj #StructName and classOf obj.StructName == MAXScriptFunction and obj.StructName() == #FlexGroupBoxControlWidgetStruct;),private version = "2.2.1",public fn StructName = #FlexUIStruct,public fn Dump indent:"" out:listener = (format "%FlexUIStruct\n" indent to:out;format "%  layoutDefTable:%\n" indent this.layoutDefTable.Count to:out;for key in this.layoutDefTable.Keys do (format "%    [%]:%\n" indent key (classOf this.layoutDefTable[key]) to:out;);format "%  widgetDefTable:%\n" indent this.widgetDefTable.Count to:out;for key in this.widgetDefTable.Keys do (format "%    [%]:%\n" indent key (classOf this.widgetDefTable[key]) to:out;);ok;),public fn Equals obj = (local isEqualStructName = isStruct obj and isProperty obj #StructName and classOf obj.StructName == MAXScriptFunction and obj.StructName() == this.StructName();local isEqualProperties = true;isEqualStructName and isEqualProperties;),public fn GetVersion = (this.version;),on Create do (::flexUI = this;this.layoutOptionsDef = ::flexUIDefinitionPool[@"Model\Layout\FlexLayoutOptions.ms"];this.initialize();););::FlexUIStruct.Install();::FlexUIStruct;